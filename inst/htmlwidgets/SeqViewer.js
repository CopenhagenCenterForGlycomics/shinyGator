/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 14);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!***************************!*\
  !*** ../gator/js/bean.js ***!
  \***************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {/*!\n  * bean.js - copyright Jacob Thornton 2011\n  * https://github.com/fat/bean\n  * MIT License\n  * special thanks to:\n  * dean edwards: http://dean.edwards.name/\n  * dperini: https://github.com/dperini/nwevents\n  * the entire mootools team: github.com/mootools/mootools-core\n  */\nconst bean = function (context) {\n  var __uid = 1,\n      registry = {},\n      collected = {},\n      overOut = /over|out/,\n      namespace = /[^\\.]*(?=\\..*)\\.|.*/,\n      stripName = /\\..*/,\n      addEvent = 'addEventListener',\n      attachEvent = 'attachEvent',\n      removeEvent = 'removeEventListener',\n      detachEvent = 'detachEvent',\n      doc = context.document || {},\n      root = doc.documentElement || {},\n      W3C_MODEL = root[addEvent],\n      eventSupport = W3C_MODEL ? addEvent : attachEvent,\n      isDescendant = function isDescendant(parent, child) {\n    var node = child.parentNode;\n    while (node !== null) {\n      if (node == parent) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n  },\n      retrieveUid = function retrieveUid(obj, uid) {\n    return obj.__uid = uid && uid + '::' + __uid++ || obj.__uid || __uid++;\n  },\n      retrieveEvents = function retrieveEvents(element) {\n    var uid = retrieveUid(element);\n    return registry[uid] = registry[uid] || {};\n  },\n      listener = W3C_MODEL ? function (element, type, fn, add) {\n    element[add ? addEvent : removeEvent](type, fn, false);\n  } : function (element, type, fn, add, custom) {\n    custom && add && (element['_on' + custom] = element['_on' + custom] || 0);\n    element[add ? attachEvent : detachEvent]('on' + type, fn);\n  },\n      nativeHandler = function nativeHandler(element, fn, args) {\n    return function (event, arg) {\n      event = fixEvent(event || ((this.ownerDocument || this.document || this).parentWindow || context).event);\n      return fn.apply(element, [event].concat(args).concat(arg));\n    };\n  },\n      customHandler = function customHandler(element, fn, type, condition, args) {\n    return function (e) {\n      if (condition ? condition.apply(this, arguments) : W3C_MODEL ? true : e && e.propertyName == '_on' + type || !e) {\n        fn.apply(element, Array.prototype.slice.call(arguments, e ? 0 : 1).concat(args));\n      }\n    };\n  },\n      addListener = function addListener(element, orgType, _fn, args) {\n    var type = orgType.replace(stripName, ''),\n        events = retrieveEvents(element),\n        handlers = events[type] || (events[type] = {}),\n        originalFn = _fn,\n        uid = retrieveUid(_fn, orgType.replace(namespace, ''));\n    if (handlers[uid]) {\n      return element;\n    }\n    var custom = customEvents[type];\n    if (custom) {\n      _fn = custom.condition ? customHandler(element, _fn, type, custom.condition) : _fn;\n      type = custom.base || type;\n    }\n    var isNative = nativeEvents[type];\n    _fn = isNative ? nativeHandler(element, _fn, args) : customHandler(element, _fn, type, false, args);\n    isNative = W3C_MODEL || isNative;\n    if (type == 'unload') {\n      var org = _fn;\n      _fn = function fn() {\n        removeListener(element, type, _fn) && org();\n      };\n    }\n    element[eventSupport] && listener(element, isNative ? type : 'propertychange', _fn, true, !isNative && type);\n    handlers[uid] = _fn;\n    _fn.__uid = uid;\n    _fn.__originalFn = originalFn;\n    return type == 'unload' ? element : collected[retrieveUid(element)] = element;\n  },\n      removeListener = function removeListener(element, orgType, handler) {\n    var uid,\n        names,\n        uids,\n        i,\n        events = retrieveEvents(element),\n        type = orgType.replace(stripName, '');\n    if (!events || !events[type]) {\n      return element;\n    }\n    names = orgType.replace(namespace, '');\n    uids = names ? names.split('.') : [handler.__uid];\n\n    function destroyHandler(uid) {\n      handler = events[type][uid];\n      if (!handler) {\n        return;\n      }\n      delete events[type][uid];\n      if (element[eventSupport]) {\n        type = customEvents[type] ? customEvents[type].base : type;\n        var isNative = W3C_MODEL || nativeEvents[type];\n        listener(element, isNative ? type : 'propertychange', handler, false, !isNative && type);\n      }\n    }\n\n    destroyHandler(names); //get combos\n    for (i = uids.length; i--; destroyHandler(uids[i])) {} //get singles\n\n    return element;\n  },\n      del = function del(selector, fn, $) {\n    return function (e) {\n      var array = typeof selector == 'string' ? $(selector, this) : selector;\n      for (var target = e.target; target && target != this; target = target.parentNode) {\n        for (var i = array.length; i--;) {\n          if (array[i] == target) {\n            return fn.apply(target, arguments);\n          }\n        }\n      }\n    };\n  },\n      add = function add(element, events, fn, delfn, $) {\n    if (typeof events == 'object' && !fn) {\n      for (var type in events) {\n        events.hasOwnProperty(type) && add(element, type, events[type]);\n      }\n    } else {\n      var isDel = typeof fn == 'string',\n          types = (isDel ? fn : events).split(' ');\n      fn = isDel ? del(events, delfn, $) : fn;\n      for (var i = types.length; i--;) {\n        addListener(element, types[i], fn, Array.prototype.slice.call(arguments, isDel ? 4 : 3));\n      }\n    }\n    return element;\n  },\n      remove = function remove(element, orgEvents, fn) {\n    var k,\n        m,\n        type,\n        events,\n        i,\n        isString = typeof orgEvents == 'string',\n        names = isString && orgEvents.replace(namespace, ''),\n        names = names && names.split('.'),\n        rm = removeListener,\n        attached = retrieveEvents(element);\n    if (isString && /\\s/.test(orgEvents)) {\n      orgEvents = orgEvents.split(' ');\n      i = orgEvents.length - 1;\n      while (remove(element, orgEvents[i]) && i--) {}\n      return element;\n    }\n    events = isString ? orgEvents.replace(stripName, '') : orgEvents;\n    if (!attached || names || isString && !attached[events]) {\n      for (k in attached) {\n        if (attached.hasOwnProperty(k)) {\n          for (i in attached[k]) {\n            for (m = names.length; m--;) {\n              attached[k].hasOwnProperty(i) && new RegExp('^' + names[m] + '::\\\\d*(\\\\..*)?$').test(i) && rm(element, [k, i].join('.'));\n            }\n          }\n        }\n      }\n      return element;\n    }\n    if (typeof fn == 'function') {\n      rm(element, events, fn);\n    } else if (names) {\n      rm(element, orgEvents);\n    } else {\n      rm = events ? rm : remove;\n      type = isString && events;\n      events = events ? fn || attached[events] || events : attached;\n      for (k in events) {\n        if (events.hasOwnProperty(k)) {\n          rm(element, type || k, events[k]);\n          delete events[k]; // remove unused leaf keys\n        }\n      }\n    }\n    return element;\n  },\n      fire = function fire(element, type, args) {\n    var evt,\n        k,\n        i,\n        m,\n        types = type.split(' ');\n    for (i = types.length; i--;) {\n      type = types[i].replace(stripName, '');\n      var isNative = nativeEvents[type],\n          isNamespace = types[i].replace(namespace, ''),\n          handlers = retrieveEvents(element)[type];\n      if (isNamespace) {\n        isNamespace = isNamespace.split('.');\n        for (k = isNamespace.length; k--;) {\n          for (m in handlers) {\n            handlers.hasOwnProperty(m) && new RegExp('^' + isNamespace[k] + '::\\\\d*(\\\\..*)?$').test(m) && handlers[m].apply(element, [false].concat(args));\n          }\n        }\n      } else if (!args && element[eventSupport]) {\n        fireListener(isNative, type, element);\n      } else {\n        for (k in handlers) {\n          handlers.hasOwnProperty(k) && handlers[k].apply(element, [false].concat(args));\n        }\n      }\n    }\n    return element;\n  },\n      fireListener = W3C_MODEL ? function (isNative, type, element) {\n    evt = document.createEvent(isNative ? \"HTMLEvents\" : \"UIEvents\");\n    evt[isNative ? 'initEvent' : 'initUIEvent'](type, true, true, context, 1);\n    element.dispatchEvent(evt);\n  } : function (isNative, type, element) {\n    isNative ? element.fireEvent('on' + type, document.createEventObject()) : element['_on' + type]++;\n  },\n      clone = function clone(element, from, type) {\n    var events = retrieveEvents(from),\n        obj,\n        k;\n    var uid = retrieveUid(element);\n    obj = type ? events[type] : events;\n    for (k in obj) {\n      obj.hasOwnProperty(k) && (type ? add : clone)(element, type || from, type ? obj[k].__originalFn : k);\n    }\n    return element;\n  },\n      fixEvent = function fixEvent(e) {\n    var result = {};\n    if (!e) {\n      return result;\n    }\n    var type = e.type,\n        target = e.target || e.srcElement;\n    result.preventDefault = fixEvent.preventDefault(e);\n    result.stopPropagation = fixEvent.stopPropagation(e);\n    result.target = target && target.nodeType == 3 ? target.parentNode : target;\n    if (type && type.indexOf('key')) {\n      result.keyCode = e.which || e.keyCode;\n    } else if (/click|mouse|menu/i.test(type)) {\n      result.rightClick = e.which == 3 || e.button == 2;\n      result.pos = { x: 0, y: 0 };\n      if (e.pageX || e.pageY) {\n        result.clientX = e.pageX;\n        result.clientY = e.pageY;\n      } else if (e.clientX || e.clientY) {\n        result.clientX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n        result.clientY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n      }\n      overOut.test(type) && (result.relatedTarget = e.relatedTarget || e[(type == 'mouseover' ? 'from' : 'to') + 'Element']);\n    }\n    for (var k in e) {\n      if (!(k in result)) {\n        result[k] = e[k];\n      }\n    }\n    return result;\n  };\n\n  fixEvent.preventDefault = function (e) {\n    return function () {\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n    };\n  };\n\n  fixEvent.stopPropagation = function (e) {\n    return function () {\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      } else {\n        e.cancelBubble = true;\n      }\n    };\n  };\n\n  var nativeEvents = { click: 1, dblclick: 1, mouseup: 1, mousedown: 1, contextmenu: 1, //mouse buttons\n    mousewheel: 1, DOMMouseScroll: 1, //mouse wheel\n    mouseover: 1, mouseout: 1, mousemove: 1, selectstart: 1, selectend: 1, //mouse movement\n    keydown: 1, keypress: 1, keyup: 1, //keyboard\n    orientationchange: 1, // mobile\n    touchstart: 1, touchmove: 1, touchend: 1, touchcancel: 1, // touch\n    gesturestart: 1, gesturechange: 1, gestureend: 1, // gesture\n    focus: 1, blur: 1, change: 1, reset: 1, select: 1, submit: 1, //form elements\n    load: 1, unload: 1, beforeunload: 1, resize: 1, move: 1, DOMContentLoaded: 1, readystatechange: 1, //window\n    error: 0, abort: 1, scroll: 1 }; //misc\n\n  function check(event) {\n    var related = event.relatedTarget;\n    if (!related) {\n      return related === null;\n    }\n    return related != this && related.prefix != 'xul' && !/document/.test(this.toString()) && !isDescendant(this, related);\n  }\n\n  var customEvents = {\n    mouseenter: { base: 'mouseover', condition: check },\n    mouseleave: { base: 'mouseout', condition: check\n      //    mousewheel: { base: /Firefox/.test(navigator.userAgent) ? 'DOMMouseScroll' : 'mousewheel' }\n    } };\n\n  var bean = { add: add, remove: remove, clone: clone, fire: fire };\n\n  var clean = function clean(el) {\n    var uid = remove(el).__uid;\n    if (uid) {\n      delete collected[uid];\n      delete registry[uid];\n    }\n  };\n\n  if (context[attachEvent]) {\n    add(context, 'unload', function () {\n      for (var k in collected) {\n        collected.hasOwnProperty(k) && clean(collected[k]);\n      }\n      context.CollectGarbage && CollectGarbage();\n    });\n  }\n\n  var oldBean = context.bean;\n  bean.noConflict = function () {\n    context.bean = oldBean;\n    return this;\n  };\n\n  typeof module !== 'undefined' && module.exports ? module.exports = bean : context['bean'] = bean;\n\n  return bean;\n}({});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (bean);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(/*! ./../../shinyGator/node_modules/.registry.npmjs.org/webpack/3.12.0/node_modules/webpack/buildin/harmony-module.js */ 6)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!********************************!*\
  !*** ../gator/js/lib/MASCP.js ***!
  \********************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bean__ = __webpack_require__(/*! ../bean */ 0);\n\n\n/**\n *  @namespace MASCP namespace\n */\nconst MASCP = {};\n\n/**\n *  @fileOverview   Basic classes and defitions for the MASCP services\n */\n\nif (Object.defineProperty && !MASCP.IE8) {\n    (function () {\n        var ready_callbacks = [];\n        var is_ready = false;\n        Object.defineProperty(MASCP, \"ready\", {\n            get: function get() {\n                if (ready_callbacks.length === 0 && !is_ready) {\n                    return false;\n                }\n                return function () {\n                    ready_callbacks.forEach(function (cb) {\n                        cb.call();\n                    });\n                };\n            },\n            set: function set(cb) {\n                if (cb === false || cb === true) {\n                    ready_callbacks = [];\n                    if (cb) {\n                        is_ready = true;\n                    }\n                    return is_ready;\n                } else {\n                    if (is_ready) {\n                        cb.call();\n                        return;\n                    }\n                    ready_callbacks.push(cb);\n                }\n            }\n        });\n    })();\n}\n\n/**\n *  @lends MASCP.Group.prototype\n *  @property   {String}        name                        Name for this group to be used as an identifier\n *  @property   {String}        fullname                    The full (long) name for this group, that can be used in UI widgets for labelling\n *  @property   {String}        color                       Color string to apply to this group\n *  @property   {Boolean}       hide_member_controllers     For controllers for this group, do not show the layer controllers for this group\n *  @property   {Boolean}       hide_group_controller       For controllers for this group do not show the parent group controller\n */\n\n/**\n * Register a group with metadata for all sequence renderers.\n * @static\n * @param {String} groupName    Name to give to this group\n * @param {Hash} options        Options to apply to this group - see MASCP.Group for all the fields\n * @returns New group object\n * @type MASCP.Group\n * @see MASCP.event:groupRegistered\n * @see MASCP.Group\n */\nMASCP.registerGroup = function (groupName, options) {\n    if (!this.groups) {\n        this.groups = {};\n    }\n    if (this.groups[groupName]) {\n        return;\n    }\n\n    var group = new MASCP.Group();\n\n    group.name = groupName;\n\n    options = options || {};\n\n    if (options.hide_member_controllers) {\n        group.hide_member_controllers = true;\n    }\n\n    if (options.hide_group_controller) {\n        group.hide_group_controller = true;\n    }\n\n    if (options.fullname) {\n        group.fullname = options.fullname;\n    }\n\n    if (options.color) {\n        group.color = options.color;\n    }\n\n    if (options.group) {\n        group.group = this.getGroup(options.group);\n        if (!group.group) {\n            throw \"Cannot register this layer with the given group - the group has not been registered yet\";\n        }\n        group.group._layers.push(group);\n    }\n\n    group._layers = [];\n\n    group.group_id = new Date().getMilliseconds();\n\n    this.groups[groupName] = group;\n\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(MASCP, 'groupRegistered', [group]);\n\n    return group;\n};\n\n/**\n *  @lends MASCP.Layer.prototype\n *  @property   {String}        name        Name for this layer to be used as an identifier\n *  @property   {String}        fullname    The full (long) name for this layer, that can be used in UI widgets for labelling\n *  @property   {String}        color       Color string to apply to this layer\n *  @property   {MASCP.Group}   group       Group that this layer is part of. Either a group object, or the name for the group.\n *  @property   {String}        css         CSS block for this layer. Active and inactive layers are children of the .active and .inactive classes respectively. To target a track-based rendering, use the .tracks class first, and to target overlays, use the .overlay class last\n *  @property   {Object}        data        Data for this layer\n */\n\n/**\n * Register a layer with metadata for all sequence renderers.\n * @static\n * @param {String} layerName    Name to give to this layer\n * @param {Hash} options        Options to set field values for this layer - see the fields for MASCP.Layer.\n * @returns New layer object\n * @type MASCP.Layer\n * @see MASCP.Layer\n * @see MASCP.event:layerRegistered\n */\nMASCP.registerLayer = function (layerName, options, renderers) {\n    if (!this.layers) {\n        this.layers = {};\n    }\n    if (!renderers) {\n        renderers = [];\n    }\n    var layer;\n    if (this.layers[layerName]) {\n        if (this.layers[layerName].disabled || renderers.length > 0) {\n            this.layers[layerName].disabled = false;\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(MASCP, 'layerRegistered', [this.layers[layerName]].concat(renderers));\n        }\n        layer = this.layers[layerName];\n    }\n\n    if (layer && options.group) {\n        if (layer.group !== this.getGroup(options.group)) {\n            layer.group = this.getGroup(options.group);\n            layer.group._layers.push(layer);\n        }\n        if (!layer.group) {\n            throw \"Cannot register this layer with the given group - the group has not been registered yet\";\n        }\n    }\n\n    if (layer) {\n        return layer;\n    }\n\n    layer = new MASCP.Layer();\n\n    layer.name = layerName;\n\n    options = options || {};\n\n    if (options.fullname) {\n        layer.fullname = options.fullname;\n    }\n\n    if (options.color) {\n        layer.color = options.color;\n    }\n\n    if (options.data) {\n        layer.data = options.data;\n    }\n\n    if (layer && options.group) {\n        layer.group = this.getGroup(options.group);\n        if (!layer.group) {\n            throw \"Cannot register this layer with the given group - the group has not been registered yet\";\n        }\n        layer.group._layers.push(layer);\n    }\n\n    this.layers[layerName] = layer;\n\n    if (options.css) {\n        console.log(\"options.css is deprecated\");\n    }\n    layer.layer_id = new Date().getMilliseconds();\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(MASCP, 'layerRegistered', [layer].concat(renderers));\n\n    return layer;\n};\n\n/**\n * @class\n * Metadata for a group of layers to be rendered\n */\nMASCP.Group = function () {\n    return;\n};\n\n/**\n * Describe what this method does\n * @private\n * @param {String|Object|Array|Boolean|Number} paramName Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\nMASCP.Group.prototype.size = function () {\n    var counter = 0;\n    for (var i = 0; i < this._layers.length; i++) {\n        if (!this._layers[i].disabled) {\n            counter += 1;\n        }\n    }\n    return counter;\n};\n\nMASCP.Group.prototype.eachLayer = function (func) {\n    for (var i = 0; i < this._layers.length; i++) {\n        if (!this._layers[i].disabled) {\n            func.call(this._layers[i], this._layers[i]);\n        }\n    }\n};\n\n/**\n * @class\n * Metadata for a single layer to be rendered\n */\nMASCP.Layer = function () {\n    this.scales = new Set();\n    return;\n};\n\n/**\n * Retrieve a layer object from the layer registry. If a layer object is passed to this method, the same layer is returned.\n * @param {String} layer    Layer name\n * @returns Layer object\n * @type Object\n * @see MASCP.Layer\n */\nMASCP.getLayer = function (layer) {\n    if (!MASCP.layers) {\n        return;\n    }\n    return typeof layer == 'string' ? MASCP.layers[layer] : layer;\n};\n\n/**\n * Retrieve a group object from the group registry. If a grop object is passed to this method, the same group is returned.\n * @param {String} group    Group name\n * @returns Group object\n * @type Object\n * @see MASCP.Group\n */\nMASCP.getGroup = function (group) {\n    if (typeof group == 'undefined') {\n        return;\n    }\n    if (!MASCP.groups) {\n        return;\n    }\n    if (typeof group == 'string') {\n        return MASCP.groups[group];\n    }\n    return group == MASCP.groups[group.name] ? group : null;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (MASCP);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!**********************************!*\
  !*** ../gator/js/lib/Service.js ***!
  \**********************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bean__ = __webpack_require__(/*! ../bean */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__jsandbox__ = __webpack_require__(/*! ../jsandbox */ 7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n//\"use strict\";\n\n\n\n\n\n\n/** Default constructor for Services\n *  @class      Super-class for all MASCP services to retrieve data from\n *              proteomic databases. Sub-classes of this class override methods\n *              to change how requests are built, and how the data is parsed.\n *  @param      {String}    agi             AGI to retrieve data for\n *  @param      {String}    endpointURL     Endpoint for the service\n */\nconst Service = function Service(agi, endpointURL) {};\n\n/** Build a data retrieval class that uses the given function to extract result data.\n *  @static\n *  @param  {Function}  dataExtractor   Function to extract data from the resultant data (passed as an argument\n *                                      to the function), and then populate the result object. The function is\n *                                      bound to a hash to populate data in to. When no data is passed to the\n *                                      function, the hash should be populated with default values.\n */\n\nlet resultsymb = Symbol('resultclass');\n\nService.buildService = function (dataExtractor) {\n\n    let clazz = class extends Service {\n        constructor(agi, endpointURL) {\n            super();\n            if (typeof endpointURL != 'undefined') {\n                this._endpointURL = endpointURL;\n            } else {\n                this._endpointURL = clazz.SERVICE_URL;\n            }\n            this.agi = agi;\n            return this;\n        }\n\n        toString() {\n            for (var serv in __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */]) {\n                if (this === __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */][serv]) {\n                    return \"MASCP.\" + serv;\n                }\n            }\n        }\n\n        get Result() {\n            return this[resultsymb] || this.constructor.Result;\n        }\n\n        set Result(resultclass) {\n            this[resultsymb] = resultclass;\n        }\n    };\n\n    clazz.Result = class {\n        constructor(data) {\n            dataExtractor.apply(this, [data]);\n            return this;\n        }\n    };\n\n    Object.assign(dataExtractor.apply({}, []), clazz.Result.prototype);\n\n    return clazz;\n};\n\nService.clone = function (service, name) {\n    var new_service = Service.buildService(function () {\n        return this;\n    });\n    new_service.Result = service.Result;\n    new_service.prototype = new service();\n    __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */][name] = new_service;\n    new_service.prototype['__class__'] = new_service;\n    return new_service;\n};\n\n/**\n *  @lends Service.prototype\n *  @property   {String}  agi               AGI to retrieve data for\n *  @property   {Service.Result}  result  Result from the query\n *  @property   {Boolean} async             Flag for using asynchronous requests - defaults to true\n */\nService.prototype = Object.assign({\n    'agi': null,\n    'result': null,\n    'async': true\n}, Service.prototype);\n\n/*\n * Internal callback for new data coming in from a XHR\n * @private\n */\n\nService.prototype._dataReceived = function (data, status) {\n    if (!data) {\n        return false;\n    }\n    var clazz = this.Result;\n    if (data && data.error && data.error != '' && data.error !== null) {\n        __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, 'error', [data.error]);\n        return false;\n    }\n    if (Object.prototype.toString.call(data) === '[object Array]') {\n        for (var i = 0; i < data.length; i++) {\n            arguments.callee.call(this, data[i], status);\n        }\n        if (i === 0) {\n            this.result = new clazz();\n        }\n        this.result._raw_data = { 'data': data };\n    } else if (!this.result) {\n        var result;\n        try {\n            result = new clazz(data);\n        } catch (err2) {\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, 'error', [err2]);\n            return false;\n        }\n        if (!result._raw_data) {\n            result._raw_data = data;\n        }\n        this.result = result;\n    } else {\n        // var new_result = {};\n        try {\n            clazz.call(this.result, data);\n        } catch (err3) {\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, 'error', [err3]);\n            return false;\n        }\n        // for(var field in new_result) {\n        //     if (true && new_result.hasOwnProperty(field)) {\n        //         this.result[field] = new_result[field];\n        //     }\n        // }\n        if (!this.result._raw_data) {\n            this.result._raw_data = data;\n        }\n        // this.result._raw_data = data;\n    }\n\n    if (data && data.retrieved) {\n        this.result.retrieved = data.retrieved;\n        this.result._raw_data.retrieved = data.retrieved;\n    }\n\n    this.result.agi = this.agi;\n\n    return true;\n};\n\nService.prototype.gotResult = function () {\n    var self = this;\n\n    var reader_cache = function reader_cache(thing) {\n        if (!thing.readers) {\n            thing.readers = [];\n        }\n        thing.readers.push(self.toString());\n    };\n\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].add(__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */], 'layerRegistered', reader_cache);\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].add(__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */], 'groupRegistered', reader_cache);\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(self, \"resultReceived\");\n    try {\n        __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */], 'layerRegistered', reader_cache);\n        __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */], 'groupRegistered', reader_cache);\n    } catch (e) {}\n\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(Service, \"resultReceived\");\n};\n\nService.prototype.requestComplete = function () {\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, 'requestComplete');\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(Service, 'requestComplete', [this]);\n};\n\nService.prototype.requestIncomplete = function () {\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, 'requestIncomplete');\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(Service, 'requestIncomplete', [this]);\n};\n\nService.registeredLayers = function (service) {\n    var result = [];\n    for (var layname in __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].layers) {\n        if (__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].layers.hasOwnProperty(layname)) {\n            var layer = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].layers[layname];\n            if (layer.readers && layer.readers.indexOf(service.toString()) >= 0) {\n                result.push(layer);\n            }\n        }\n    }\n    return result;\n};\n\nService.registeredGroups = function (service) {\n    var result = [];\n    for (var nm in __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].groups) {\n        if (__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].groups.hasOwnProperty(nm)) {\n            var group = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].groups[nm];\n            if (group.readers && group.readers.indexOf(service.toString()) >= 0) {\n                result.push(group);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n *  Binds a handler to one or more events. Returns a reference to self, so this method\n *  can be chained.\n *\n *  @param  {String}    type        Event type to bind\n *  @param  {Function}  function    Handler to execute on event\n */\n\nService.prototype.bind = function (type, func) {\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].add(this, type, func);\n    return this;\n};\n\nService.prototype.once = function (type, func) {\n    var self = this;\n    var wrapped_func = function wrapped_func() {\n        __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(self, type, wrapped_func);\n        func.apply(self, [].slice.call(arguments));\n    };\n    self.bind(type, wrapped_func);\n};\n\n/**\n *  Unbinds a handler from one or more events. Returns a reference to self, so this method\n *  can be chained.\n *\n *  @param  {String}    type        Event type to unbind\n *  @param  {Function}  function    Handler to unbind from event\n */\nService.prototype.unbind = function (type, func) {\n    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(this, type, func);\n    return this;\n};\n\n/**\n * @name    Service#resultReceived\n * @event\n * @param   {Object}    e\n */\n\n/**\n * @name    Service#error\n * @event\n * @param   {Object}    e\n */\n\n/**\n *  Asynchronously retrieves data from the remote source. When data is received, a \n *  resultReceived.mascp event is triggered upon this service, while an error.mascp\n *  event is triggered when an error occurs. This method returns a reference to self\n *  so it can be chained.\n */\n(function (base) {\n\n    var make_params = function make_params(params) {\n        var qpoints = [];\n        for (var fieldname in params) {\n            if (params.hasOwnProperty(fieldname)) {\n                qpoints.push(fieldname + '=' + params[fieldname]);\n            }\n        }\n        return qpoints.join('&');\n    };\n\n    var cached_requests = {};\n\n    var do_request = function do_request(request_data) {\n\n        request_data.async = true;\n\n        var datablock = null;\n\n        if (!request_data.url) {\n            request_data.success.call(null, null);\n            return;\n        }\n\n        var request = new XMLHttpRequest();\n\n        if (request_data.type == 'GET' && request_data.data) {\n            var index_of_quest = request_data.url.indexOf('?');\n\n            if (index_of_quest == request_data.url.length - 1) {\n                request_data.url = request_data.url.slice(0, -1);\n                index_of_quest = -1;\n            }\n            var has_question = index_of_quest >= 0 ? '&' : '?';\n            request_data.url = request_data.url.replace(/\\?$/, '') + has_question + make_params(request_data.data);\n        }\n        if (request_data.type == 'GET' && request_data.session_cache) {\n            if (cached_requests[request_data.url]) {\n                cached_requests[request_data.url].then(function (data) {\n                    request_data.success.call(null, data);\n                }).catch(function (error_args) {\n                    request_data.error.apply(null, [null, request, error_args]);\n                });\n                return;\n            } else {\n                var success_callback = request_data.success;\n                var error_callback = request_data.error;\n                cached_requests[request_data.url] = new Promise(function (resolve, reject) {\n                    request_data.success = function (data) {\n                        resolve(data);\n                    };\n                    request_data.error = function (message, req, error_obj) {\n                        reject([message, req, error_obj]);\n                        delete cached_requests[request_data.url];\n                    };\n                });\n                cached_requests[request_data.url].catch(function (error_args) {\n                    error_callback.apply(null, error_args);\n                }).then(function (data) {\n                    success_callback.call(null, data);\n                });\n            }\n        }\n\n        request.open(request_data.type, request_data.url, request_data.async);\n\n        if (request_data.type == 'POST') {\n            request.setRequestHeader(\"Content-Type\", request_data.content ? request_data.content : \"application/x-www-form-urlencoded\");\n            datablock = request_data.content ? request_data.data : make_params(request_data.data);\n        }\n\n        if (request.customUA) {\n            request.setRequestHeader('User-Agent', request.customUA);\n        }\n\n        if (request_data.auth) {\n            request.setRequestHeader('Authorization', 'Bearer ' + request_data.auth);\n        }\n\n        if (request_data.api_key) {\n            request.setRequestHeader('x-api-key', request_data.api_key);\n        }\n\n        var redirect_counts = 5;\n\n        request.onreadystatechange = function (evt) {\n            if (request.readyState == 4) {\n                if (request.status >= 300 && request.status < 400 && redirect_counts > 0) {\n                    var loc = request.getResponseHeader('location').replace(/location:\\s+/, '');\n                    redirect_counts = redirect_counts - 1;\n                    request.open('GET', loc, request_data.async);\n                    request.send();\n                    return;\n                }\n                if (request.status == 503) {\n                    // Let's encode an exponential backoff\n                    request.last_wait = (request_data.last_wait || 500) * 2;\n                    setTimeout(function () {\n                        request.open(request_data.type, request_data.url, request_data.async);\n                        if (request_data.type == 'POST') {\n                            request.setRequestHeader(\"Content-Type\", request_data.content ? request_data.content : \"application/x-www-form-urlencoded\");\n                        }\n                        if (request.customUA) {\n                            request.setRequestHeader('User-Agent', request.customUA);\n                        }\n                        request.send(datablock);\n                    }, request_data.last_wait);\n                    return;\n                }\n                if (request.status == 403) {\n                    // Make sure our S3 buckets expose the Server header cross-origin\n                    var server = request.getResponseHeader('Server');\n                    if (server === 'AmazonS3') {\n                        request_data.success.call(null, { \"error\": \"No data\" }, 403, request);\n                        return;\n                    }\n                }\n                if (request.status >= 200 && request.status < 300) {\n                    var data_block;\n                    if (request_data.dataType == 'xml') {\n                        data_block = typeof document !== 'undefined' ? document.implementation.createDocument(null, \"nodata\", null) : { 'getElementsByTagName': function getElementsByTagName() {\n                                return [];\n                            } };\n                    } else {\n                        data_block = {};\n                    }\n                    try {\n                        var text = request.responseText;\n                        data_block = request_data.dataType == 'xml' ? request.responseXML : request_data.dataType == 'txt' ? request.responseText : JSON.parse(request.responseText);\n                    } catch (e) {\n                        if (e.type == 'unexpected_eos') {\n                            request_data.success.call(null, {}, request.status, request);\n                            return;\n                        } else {\n                            request_data.error.call(null, request.responseText, request, { 'error': e.type || e.message, 'stack': e });\n                            return;\n                        }\n                    }\n                    if (request.status == 202 && data_block.status == \"RUNNING\") {\n                        setTimeout(function () {\n                            request.open(request_data.type, request_data.url, request_data.async);\n                            if (request_data.type == 'POST') {\n                                request.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                            }\n                            if (request.customUA) {\n                                request.setRequestHeader('User-Agent', request.customUA);\n                            }\n                            request.send(datablock);\n                        }, 5000);\n                        return;\n                    }\n                    request_data.success.call(null, data_block, request.status, request);\n                    data_block = null;\n                } else {\n                    request_data.error.call(null, request.responseText, request, request.status);\n                }\n            }\n        };\n        if (__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].NETWORK_FAIL && __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].NETWORK_FAIL.enabled) {\n            setTimeout(function () {\n                console.log(\"Causing network failure\");\n                request = { 'onreadystatechange': request.onreadystatechange };\n                request.readyState = 4;\n                request.status = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].NETWORK_FAIL.status || 500;\n                request.responseText = \"Intercepted by Network Failure simulator\";\n                request.onreadystatechange();\n            }, 1000);\n            return;\n        }\n\n        request.send(datablock);\n    };\n\n    Service.request = function (url, callback, noparse) {\n        var method = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].IE ? do_request_ie : do_request;\n        if (__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].IE && !url.match(/^https?\\:/)) {\n            method = do_request;\n        }\n        var params;\n        if (!url) {\n            callback(null);\n            return;\n        }\n        if (typeof url == 'string') {\n            params = { async: true, url: url, timeout: 5000, type: \"GET\",\n                error: function error(response, req, status) {\n                    callback.call(null, { \"status\": status });\n                },\n                success: function success(data, status, xhr) {\n                    callback.call(null, null, data);\n                }\n            };\n        } else if (url.hasOwnProperty('url')) {\n            params = url;\n            params.success = function (data) {\n                callback.call(null, null, data);\n            };\n            params.error = function (resp, req, status) {\n                callback.call(null, { \"status\": status });\n            };\n        }\n        if (noparse) {\n            params.dataType = 'txt';\n            if (noparse === \"xml\") {\n                params.dataType = 'xml';\n            }\n        }\n        method.call(null, params);\n    };\n\n    /**\n     * Private method for performing a cross-domain request using Internet Explorer 8 and up. Adapts the \n     * parameters passed, and builds an XDR object. There is no support for a locking\n     * synchronous method to do these requests (that is required for Unit testing) so an alert box is used\n     * to provide the locking.\n     * @private\n     * @param {Object} dataHash Hash with the data and settings used to build the query.\n     */\n\n    var do_request_ie = function do_request_ie(dataHash) {\n        // Use XDR\n        var xdr = new XDomainRequest();\n        var loaded = false;\n        var counter = 0;\n        xdr.onerror = function (ev) {\n            dataHash.error(xdr, xdr, { \"message\": \"XDomainRequest error\" });\n        };\n        xdr.onprogress = function () {};\n        xdr.open(\"GET\", dataHash.url + \"?\" + make_params(dataHash.data));\n        xdr.onload = function () {\n            loaded = true;\n            if (dataHash.dataType == 'xml') {\n                var dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n                dom.async = false;\n                dom.loadXML(xdr.responseText);\n                dataHash.success(dom, 'success', xdr);\n            } else if (dataHash.dataType == 'json') {\n                var parsed = null;\n                try {\n                    parsed = JSON.parse(xdr.responseText);\n                } catch (err) {\n                    dataHash.error(xdr, xdr, { \"message\": \"JSON parsing error\" });\n                }\n                if (parsed) {\n                    dataHash.success(parsed, 'success', xdr);\n                }\n            } else {\n                dataHash.success(xdr.responseText, 'success', xdr);\n            }\n        };\n        // We can't set the content-type on the parameters here to url-encoded form data.\n        setTimeout(function () {\n            xdr.send();\n        }, 0);\n        while (!dataHash.async && !loaded && counter < 3) {\n            alert(\"This browser does not support synchronous requests, click OK while we're waiting for data\");\n            counter += 1;\n        }\n        if (!dataHash.async && !loaded) {\n            alert(\"No data\");\n        }\n    };\n\n    let handle_request_success = function handle_request_success(data, status, xhr) {\n        Service._current_reqs -= 1;\n        if (xhr && xhr.status !== null && xhr.status === 0) {\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, \"error\", [{ \"error\": \"Zero return status from request \" }]);\n            this.requestComplete();\n            return;\n        }\n        var received_flag = this._dataReceived(data, status);\n\n        if (received_flag) {\n            this.gotResult();\n        }\n\n        if (received_flag !== null && typeof received_flag !== 'undefined') {\n            this.requestComplete();\n        } else {\n            this.requestIncomplete();\n        }\n    };\n\n    let handle_request_error = function handle_request_error(response, req, status) {\n        Service._current_reqs -= 1;\n        if (typeof status == 'string') {\n            status = { 'error': status, 'request': req };\n        }\n        if (!isNaN(status)) {\n            status = { \"error\": \"Reqeust error\", \"status\": status, 'request': req };\n        }\n        __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, \"error\", [status]);\n        __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(Service, 'requestComplete');\n        this.requestComplete();\n    };\n\n    let perform_request = function perform_request(request_data) {\n\n        if (request_data === false) {\n            return;\n        }\n\n        if (!request_data) {\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(this, \"error\", [\"No request data\"]);\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(Service, \"requestComplete\", [this]);\n            this.requestComplete();\n            return this;\n        }\n\n        var default_params = {\n            async: this.async,\n            url: request_data.url || this._endpointURL,\n            timeout: 5000,\n            error: handle_request_error.bind(this),\n            success: handle_request_success.bind(this)\n        };\n        default_params = Object.assign(request_data, default_params);\n\n        do_request(default_params);\n\n        Service._current_reqs += 1;\n    };\n\n    base.retrieve = function (agi, callback) {\n        var self = this;\n\n        Service._current_reqs = Service._current_reqs || 0;\n        Service._waiting_reqs = Service._waiting_reqs || 0;\n\n        if (Service.MAX_REQUESTS) {\n            var my_func = arguments.callee;\n            if (Service._current_reqs > Service.MAX_REQUESTS) {\n                Service._waiting_reqs += 1;\n                __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].add(Service, 'requestComplete', function () {\n                    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(this, 'requestComplete', arguments.callee);\n                    setTimeout(function () {\n                        Service._waiting_reqs -= 1;\n                        my_func.call(self, agi, callback);\n                    }, 0);\n                });\n                return this;\n            }\n        }\n        if (agi) {\n            this.agi = agi;\n        }\n\n        if (agi && callback) {\n            this.agi = agi;\n\n            this.result = null;\n\n            var done_result = false;\n            var done_func = function done_func(err, obj) {\n                __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(self, \"resultReceived\", done_func);\n                __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(self, \"error\", done_func);\n                __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].remove(self, \"requestComplete\", done_func);\n                if (!done_result) {\n                    if (err) {\n                        callback.call(self, err);\n                    } else {\n                        callback.call(self);\n                    }\n                }\n                done_result = true;\n            };\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].add(self, \"resultReceived\", done_func);\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].add(self, \"error\", done_func);\n            __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].add(self, \"requestComplete\", done_func);\n        }\n        var request_data = this.requestData();\n        Promise.resolve(request_data).then(perform_request.bind(this));\n        return this;\n    };\n})(Service.prototype);\n\n/**\n *  Get the parameters that will be used to build this request. Implementations of services will\n *  override this method, returning the parameters to be used to build the XHR.\n */\n\nService.prototype.requestData = function () {};\n\nService.prototype.toString = function () {\n    for (var clazz in __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */]) {\n        if (this.__class__ == __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */][clazz]) {\n            return \"MASCP.\" + clazz;\n        }\n    }\n};\n\n/**\n * For this service, register a sequence rendering view so that the results can be marked up directly\n * on to a sequence. This method will do nothing if the service does not know how to render the \n * results onto the sequence.\n * @param {MASCP.SequenceRenderer} sequenceRenderer Sequence renderer object to render results upon\n */\nService.prototype.registerSequenceRenderer = function (sequenceRenderer, options) {\n    if (this.setupSequenceRenderer) {\n        this.renderers = this.renderers || [];\n        this.setupSequenceRenderer(sequenceRenderer, options);\n        this.renderers.push(sequenceRenderer);\n    }\n    sequenceRenderer.trigger('readerRegistered', [this]);\n    return this;\n};\n\nService.prototype.resetOnResult = function (sequenceRenderer, rendered, track) {\n    var self = this;\n    var result_func = function result_func() {\n        self.unbind('resultReceived', result_func);\n        sequenceRenderer.bind('resultsRendered', clear_func);\n    };\n\n    var clear_func = function clear_func(reader) {\n        if (reader !== self) {\n            return;\n        }\n        sequenceRenderer.unbind('resultsRendered', clear_func);\n        rendered.forEach(function (obj) {\n            sequenceRenderer.remove(track, obj);\n        });\n    };\n    this.bind('resultReceived', result_func);\n};\n\n/**\n * For this service, set up a sequence renderer so that the events are connected up with receiving data.\n * This method should be overridden to wire up the sequence renderer to the service.\n * @param {MASCP.SequenceRenderer} sequenceRenderer Sequence renderer object to render results upon\n */\nService.prototype.setupSequenceRenderer = function (sequenceRenderer) {\n    return this;\n};\n\n/** Default constructor\n *  @class  Super-class for all results from MASCP services.\n */\nService.Result = function () {};\n\nService.Result.prototype = {\n    agi: null,\n    reader: null\n};\n\nService.Result.prototype.render = function () {};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Service);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ../gator/js/lib/GatorComponent.js ***!
  \*****************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Dragger__ = __webpack_require__(/*! ./Dragger */ 13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__CondensedSequenceRenderer__ = __webpack_require__(/*! ./CondensedSequenceRenderer */ 11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Service__ = __webpack_require__(/*! ./Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n\n\n\n\n\n\nconst component_symbol = Symbol('component');\n\nclass DraggableRenderer extends __WEBPACK_IMPORTED_MODULE_1__CondensedSequenceRenderer__[\"a\" /* default */] {\n  constructor(container, component) {\n    super(container);\n    this[component_symbol] = component;\n  }\n  getVisibleLength() {\n    return this.rightVisibleResidue() - this.leftVisibleResidue();\n  }\n  getTotalLength() {\n    return this.sequence.length;\n  }\n  getLeftPosition() {\n    return this.leftVisibleResidue();\n  }\n  setLeftPosition(pos) {\n    return this.setLeftVisibleResidue(pos);\n  }\n\n  get selecting() {\n    return this[component_symbol].selecting;\n  }\n}\n\nconst tmpl = document.createElement('template');\n\ntmpl.innerHTML = `\n<style>\n  :host {\n    display: block;\n    position: relative;\n  }\n  :host([resizeable]) {\n    resize: both;\n    overflow: auto;\n    padding-right: 5px;\n    padding-bottom: 5px;\n  }\n  #container, .widget_contents {\n    width: 100%;\n    height: 100%;\n  }\n  #container {\n  }\n</style>\n<div class=\"widget_contents\" >\n  <div id=\"container\">\n  </div>\n</div>\n<slot></slot>\n`;\n\nconst interactive_symb = Symbol('interactive');\n\nclass InteractiveState {\n  constructor(component) {\n    this.component = component;\n  }\n  get enabled() {\n    return this.component.interactive && !this.component.selecting;\n  }\n  set enabled(toggle) {\n    this.component.interactive = toggle;\n  }\n}\n\nclass ComponentDragger extends __WEBPACK_IMPORTED_MODULE_0__Dragger__[\"a\" /* default */] {\n  constructor(component) {\n    super();\n    this.component = component;\n  }\n  get enabled() {\n    return this.component.interactive && !this.component.selecting;\n  }\n  set enabled(toggle) {\n    this.component.interactive = toggle;\n  }\n}\n\nfunction WrapHTML() {\n  return Reflect.construct(HTMLElement, [], Object.getPrototypeOf(this).constructor);\n}\nObject.setPrototypeOf(WrapHTML.prototype, HTMLElement.prototype);\nObject.setPrototypeOf(WrapHTML, HTMLElement);\n\nif (window.ShadyCSS) {\n  ShadyCSS.prepareTemplate(tmpl, 'x-protviewer');\n}\n\nlet setup_renderer = function setup_renderer(renderer) {\n  renderer.font_order = 'Helvetica, Arial, sans-serif';\n  renderer.zoom = 0.81;\n  renderer.padding = 10;\n  renderer.trackOrder = [];\n  renderer.reset();\n  renderer.trackGap = 6;\n  renderer.trackHeight = 5;\n  renderer.fixedFontScale = 1;\n};\n\nlet create_renderer = function create_renderer(container) {\n  let renderer = new DraggableRenderer(container, this);\n  setup_renderer(renderer);\n  wire_renderer_sequence_change.call(this, renderer);\n  return renderer;\n};\n\nlet try_import_symbols = (renderer, namespace, url) => {\n  __WEBPACK_IMPORTED_MODULE_2__Service__[\"a\" /* default */].request(url, function (err, doc) {\n    if (doc) {\n      renderer.importIcons(namespace, doc.documentElement, url);\n    }\n  }, \"xml\");\n};\n\nlet zoom_to_fit = renderer => {\n  renderer.fitZoom();\n};\n\nlet make_draggable = function make_draggable(renderer, dragger) {\n  dragger.applyToElement(renderer._canvas);\n  dragger.addTouchZoomControls(renderer, renderer._canvas, this[interactive_symb]);\n  renderer._canvas.addEventListener('panned', () => {\n    let evObj = new Event('pandone', { bubbles: true, cancelable: true });\n    this.dispatchEvent(evObj);\n  });\n  __WEBPACK_IMPORTED_MODULE_0__Dragger__[\"a\" /* default */].addScrollZoomControls.call(this[interactive_symb], renderer, renderer._canvas, 0.1);\n};\n\nlet wire_renderer_sequence_change = function wire_renderer_sequence_change(renderer) {\n  var dragger = new ComponentDragger(this);\n  let seq_change_func = () => {\n    try_import_symbols(renderer, \"ui\", \"https://glycodomain.glycomics.ku.dk/icons.svg\");\n    try_import_symbols(renderer, \"sugar\", \"https://glycodomain.glycomics.ku.dk/sugars.svg\");\n    zoom_to_fit(renderer);\n    make_draggable.call(this, renderer, dragger);\n    populate_tracks.call(this);\n    setup_renderer(renderer);\n    renderer.navigation.show();\n    renderer.refresh();\n  };\n  renderer.bind('sequenceChange', seq_change_func);\n};\n\nlet populate_tracks = function populate_tracks() {\n  for (let track of this.querySelectorAll('x-gatortrack')) {\n    this.createTrack(track);\n  }\n};\n\nlet wire_selection_change = function wire_selection_change(renderer) {\n  renderer.bind('selection', selections => {\n    let positions = selections.get(renderer);\n    if (!positions[0] && !positions[1]) {\n      this.removeAttribute('selected');\n    } else {\n      this.setAttribute('selected', `${positions[0]}:${positions[1]}`);\n    }\n    for (let track of this.querySelectorAll('x-gatortrack')) {\n      let positions = selections.get(track.layer);\n      if (!positions[0] && !positions[1]) {\n        track.removeAttribute('selected');\n      } else {\n        track.setAttribute('selected', `${positions[0]}:${positions[1]}`);\n      }\n    }\n  });\n};\n\nclass GatorComponent extends WrapHTML {\n\n  static get observedAttributes() {\n    return [];\n  }\n\n  constructor() {\n    super();\n  }\n\n  attributeChangedCallback(name) {}\n\n  connectedCallback() {\n    if (window.ShadyCSS) {\n      ShadyCSS.styleElement(this);\n    }\n    let shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(tmpl.content.cloneNode(true));\n    this[interactive_symb] = new InteractiveState(this);\n    this.renderer = create_renderer.call(this, shadowRoot.getElementById('container'));\n    this.renderer.grow_container = true;\n    if (window.getComputedStyle(this).height && window.getComputedStyle(this).height !== '0px' && window.getComputedStyle(this).height !== 'auto') {\n      this.renderer.grow_container = false;\n      if (window.getComputedStyle(this).getPropertyValue('--fill-viewer')) {\n        this.renderer.fixed_size = true;\n      }\n    }\n    wire_selection_change.call(this, this.renderer);\n  }\n\n  fitToZoom() {\n    zoom_to_fit(this.renderer);\n  }\n\n  createTrack(track) {\n    __WEBPACK_IMPORTED_MODULE_3__MASCP__[\"a\" /* default */].registerLayer(track.name, {}, [this.renderer]);\n    this.renderer.trackOrder = this.renderer.trackOrder.concat([track.name]);\n    this.renderer.showLayer(track.name);\n    this.renderer.refresh();\n  }\n\n  refreshTracks() {\n    populate_tracks.call(this);\n  }\n\n  get selecting() {\n    return this.hasAttribute('selecting');\n  }\n\n  set selecting(toggle) {\n    if (toggle) {\n      this.setAttribute('selecting', '');\n    } else {\n      this.removeAttribute('selecting');\n    }\n  }\n\n  get interactive() {\n    return this.hasAttribute('interactive');\n  }\n\n  set interactive(toggle) {\n    if (toggle) {\n      this.setAttribute('interactive', '');\n    } else {\n      this.removeAttribute('interactive');\n    }\n  }\n}\n\ncustomElements.define('x-protviewer', GatorComponent);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GatorComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9nYXRvci9qcy9saWIvR2F0b3JDb21wb25lbnQuanM/MGM1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBEcmFnZ2VyIGZyb20gJy4vRHJhZ2dlcic7XG5pbXBvcnQgQ29uZGVuc2VkU2VxdWVuY2VSZW5kZXJlciBmcm9tICcuL0NvbmRlbnNlZFNlcXVlbmNlUmVuZGVyZXInO1xuaW1wb3J0IFNlcnZpY2UgZnJvbSAnLi9TZXJ2aWNlJztcbmltcG9ydCBNQVNDUCBmcm9tICcuL01BU0NQJztcblxuY29uc3QgY29tcG9uZW50X3N5bWJvbCA9IFN5bWJvbCgnY29tcG9uZW50Jyk7XG5cbmNsYXNzIERyYWdnYWJsZVJlbmRlcmVyIGV4dGVuZHMgQ29uZGVuc2VkU2VxdWVuY2VSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcixjb21wb25lbnQpIHtcbiAgICBzdXBlcihjb250YWluZXIpO1xuICAgIHRoaXNbY29tcG9uZW50X3N5bWJvbF0gPSBjb21wb25lbnQ7XG4gIH1cbiAgZ2V0VmlzaWJsZUxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5yaWdodFZpc2libGVSZXNpZHVlKCkgLSB0aGlzLmxlZnRWaXNpYmxlUmVzaWR1ZSgpO1xuICB9XG4gIGdldFRvdGFsTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLnNlcXVlbmNlLmxlbmd0aDtcbiAgfVxuICBnZXRMZWZ0UG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubGVmdFZpc2libGVSZXNpZHVlKCk7XG4gIH1cbiAgc2V0TGVmdFBvc2l0aW9uKHBvcykge1xuICAgIHJldHVybiB0aGlzLnNldExlZnRWaXNpYmxlUmVzaWR1ZShwb3MpO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGluZygpIHtcbiAgICByZXR1cm4gdGhpc1tjb21wb25lbnRfc3ltYm9sXS5zZWxlY3Rpbmc7XG4gIH1cbn1cblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cbnRtcGwuaW5uZXJIVE1MID0gYFxuPHN0eWxlPlxuICA6aG9zdCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG4gIDpob3N0KFtyZXNpemVhYmxlXSkge1xuICAgIHJlc2l6ZTogYm90aDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7XG4gICAgcGFkZGluZy1ib3R0b206IDVweDtcbiAgfVxuICAjY29udGFpbmVyLCAud2lkZ2V0X2NvbnRlbnRzIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbiAgI2NvbnRhaW5lciB7XG4gIH1cbjwvc3R5bGU+XG48ZGl2IGNsYXNzPVwid2lkZ2V0X2NvbnRlbnRzXCIgPlxuICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+XG4gIDwvZGl2PlxuPC9kaXY+XG48c2xvdD48L3Nsb3Q+XG5gO1xuXG5jb25zdCBpbnRlcmFjdGl2ZV9zeW1iID0gU3ltYm9sKCdpbnRlcmFjdGl2ZScpO1xuXG5jbGFzcyBJbnRlcmFjdGl2ZVN0YXRlIHtcbiAgY29uc3RydWN0b3IoY29tcG9uZW50KSB7XG4gICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gIH1cbiAgZ2V0IGVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmludGVyYWN0aXZlICYmICEgdGhpcy5jb21wb25lbnQuc2VsZWN0aW5nO1xuICB9XG4gIHNldCBlbmFibGVkKHRvZ2dsZSkge1xuICAgIHRoaXMuY29tcG9uZW50LmludGVyYWN0aXZlID0gdG9nZ2xlO1xuICB9XG59XG5cbmNsYXNzIENvbXBvbmVudERyYWdnZXIgZXh0ZW5kcyBEcmFnZ2VyIHtcbiAgY29uc3RydWN0b3IoY29tcG9uZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgfVxuICBnZXQgZW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaW50ZXJhY3RpdmUgJiYgISB0aGlzLmNvbXBvbmVudC5zZWxlY3Rpbmc7XG4gIH1cbiAgc2V0IGVuYWJsZWQodG9nZ2xlKSB7XG4gICAgdGhpcy5jb21wb25lbnQuaW50ZXJhY3RpdmUgPSB0b2dnbGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gV3JhcEhUTUwoKSB7IHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdChIVE1MRWxlbWVudCwgW10sIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH1cbk9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwSFRNTC5wcm90b3R5cGUsIEhUTUxFbGVtZW50LnByb3RvdHlwZSk7XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoV3JhcEhUTUwsIEhUTUxFbGVtZW50KTtcblxuaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGUodG1wbCwgJ3gtcHJvdHZpZXdlcicpO1xufVxuXG5sZXQgc2V0dXBfcmVuZGVyZXIgPSBmdW5jdGlvbihyZW5kZXJlcikge1xuICByZW5kZXJlci5mb250X29yZGVyID0gJ0hlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYnO1xuICByZW5kZXJlci56b29tID0gMC44MTtcbiAgcmVuZGVyZXIucGFkZGluZyA9IDEwO1xuICByZW5kZXJlci50cmFja09yZGVyID0gW107XG4gIHJlbmRlcmVyLnJlc2V0KCk7XG4gIHJlbmRlcmVyLnRyYWNrR2FwID0gNjtcbiAgcmVuZGVyZXIudHJhY2tIZWlnaHQgPSA1O1xuICByZW5kZXJlci5maXhlZEZvbnRTY2FsZSA9IDE7XG59O1xuXG5sZXQgY3JlYXRlX3JlbmRlcmVyID0gZnVuY3Rpb24oY29udGFpbmVyKXtcbiAgbGV0IHJlbmRlcmVyID0gbmV3IERyYWdnYWJsZVJlbmRlcmVyKGNvbnRhaW5lcix0aGlzKTtcbiAgc2V0dXBfcmVuZGVyZXIocmVuZGVyZXIpO1xuICB3aXJlX3JlbmRlcmVyX3NlcXVlbmNlX2NoYW5nZS5jYWxsKHRoaXMscmVuZGVyZXIpO1xuICByZXR1cm4gcmVuZGVyZXI7XG59O1xuXG5sZXQgdHJ5X2ltcG9ydF9zeW1ib2xzID0gKHJlbmRlcmVyLG5hbWVzcGFjZSx1cmwpID0+IHtcbiAgU2VydmljZS5yZXF1ZXN0KHVybCxmdW5jdGlvbihlcnIsZG9jKSB7XG4gICAgaWYgKGRvYykge1xuICAgICAgcmVuZGVyZXIuaW1wb3J0SWNvbnMobmFtZXNwYWNlLGRvYy5kb2N1bWVudEVsZW1lbnQsdXJsKTtcbiAgICB9XG4gIH0sXCJ4bWxcIik7XG59O1xuXG5sZXQgem9vbV90b19maXQgPSAocmVuZGVyZXIpID0+IHtcbiAgcmVuZGVyZXIuZml0Wm9vbSgpO1xufTtcblxubGV0IG1ha2VfZHJhZ2dhYmxlID0gZnVuY3Rpb24ocmVuZGVyZXIsZHJhZ2dlcikge1xuICBkcmFnZ2VyLmFwcGx5VG9FbGVtZW50KHJlbmRlcmVyLl9jYW52YXMpO1xuICBkcmFnZ2VyLmFkZFRvdWNoWm9vbUNvbnRyb2xzKHJlbmRlcmVyLCByZW5kZXJlci5fY2FudmFzLHRoaXNbaW50ZXJhY3RpdmVfc3ltYl0pO1xuICByZW5kZXJlci5fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhbm5lZCcsICgpID0+IHtcbiAgICBsZXQgZXZPYmogPSBuZXcgRXZlbnQoJ3BhbmRvbmUnLCB7YnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZX0pO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldk9iaik7XG4gIH0pO1xuICBEcmFnZ2VyLmFkZFNjcm9sbFpvb21Db250cm9scy5jYWxsKHRoaXNbaW50ZXJhY3RpdmVfc3ltYl0scmVuZGVyZXIsIHJlbmRlcmVyLl9jYW52YXMsMC4xKTtcbn07XG5cbmxldCB3aXJlX3JlbmRlcmVyX3NlcXVlbmNlX2NoYW5nZSA9IGZ1bmN0aW9uKHJlbmRlcmVyKSB7XG4gIHZhciBkcmFnZ2VyID0gbmV3IENvbXBvbmVudERyYWdnZXIodGhpcyk7XG4gIGxldCBzZXFfY2hhbmdlX2Z1bmMgPSAoKSA9PiB7XG4gICAgdHJ5X2ltcG9ydF9zeW1ib2xzKHJlbmRlcmVyLCBcInVpXCIsIFwiaHR0cHM6Ly9nbHljb2RvbWFpbi5nbHljb21pY3Mua3UuZGsvaWNvbnMuc3ZnXCIpO1xuICAgIHRyeV9pbXBvcnRfc3ltYm9scyhyZW5kZXJlciwgXCJzdWdhclwiLCBcImh0dHBzOi8vZ2x5Y29kb21haW4uZ2x5Y29taWNzLmt1LmRrL3N1Z2Fycy5zdmdcIik7XG4gICAgem9vbV90b19maXQocmVuZGVyZXIpO1xuICAgIG1ha2VfZHJhZ2dhYmxlLmNhbGwodGhpcyxyZW5kZXJlcixkcmFnZ2VyKTtcbiAgICBwb3B1bGF0ZV90cmFja3MuY2FsbCh0aGlzKTtcbiAgICBzZXR1cF9yZW5kZXJlcihyZW5kZXJlcik7XG4gICAgcmVuZGVyZXIubmF2aWdhdGlvbi5zaG93KCk7XG4gICAgcmVuZGVyZXIucmVmcmVzaCgpO1xuICB9O1xuICByZW5kZXJlci5iaW5kKCdzZXF1ZW5jZUNoYW5nZScsIHNlcV9jaGFuZ2VfZnVuYyk7XG59O1xuXG5sZXQgcG9wdWxhdGVfdHJhY2tzID0gZnVuY3Rpb24oKSB7XG4gIGZvciAobGV0IHRyYWNrIG9mIHRoaXMucXVlcnlTZWxlY3RvckFsbCgneC1nYXRvcnRyYWNrJykpIHtcbiAgICB0aGlzLmNyZWF0ZVRyYWNrKHRyYWNrKTtcbiAgfVxufVxuXG5sZXQgd2lyZV9zZWxlY3Rpb25fY2hhbmdlID0gZnVuY3Rpb24ocmVuZGVyZXIpIHtcbiAgcmVuZGVyZXIuYmluZCgnc2VsZWN0aW9uJywgKHNlbGVjdGlvbnMpID0+IHtcbiAgICBsZXQgcG9zaXRpb25zID0gc2VsZWN0aW9ucy5nZXQocmVuZGVyZXIpO1xuICAgIGlmICggISBwb3NpdGlvbnNbMF0gJiYgISBwb3NpdGlvbnNbMV0gKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLGAke3Bvc2l0aW9uc1swXX06JHtwb3NpdGlvbnNbMV19YCk7XG4gICAgfVxuICAgIGZvciAobGV0IHRyYWNrIG9mIHRoaXMucXVlcnlTZWxlY3RvckFsbCgneC1nYXRvcnRyYWNrJykpIHtcbiAgICAgIGxldCBwb3NpdGlvbnMgPSBzZWxlY3Rpb25zLmdldCh0cmFjay5sYXllcik7XG4gICAgICBpZiAoICEgcG9zaXRpb25zWzBdICYmICEgcG9zaXRpb25zWzFdICkge1xuICAgICAgICB0cmFjay5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYWNrLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLGAke3Bvc2l0aW9uc1swXX06JHtwb3NpdGlvbnNbMV19YCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuXG5jbGFzcyBHYXRvckNvbXBvbmVudCBleHRlbmRzIFdyYXBIVE1MIHtcblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cblxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSkge1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICAgICAgU2hhZHlDU1Muc3R5bGVFbGVtZW50KHRoaXMpO1xuICAgIH1cbiAgICBsZXQgc2hhZG93Um9vdCA9IHRoaXMuYXR0YWNoU2hhZG93KHttb2RlOiAnb3Blbid9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIHRoaXNbaW50ZXJhY3RpdmVfc3ltYl0gPSBuZXcgSW50ZXJhY3RpdmVTdGF0ZSh0aGlzKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gY3JlYXRlX3JlbmRlcmVyLmNhbGwodGhpcyxzaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKSk7XG4gICAgdGhpcy5yZW5kZXJlci5ncm93X2NvbnRhaW5lciA9IHRydWU7XG4gICAgaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS5oZWlnaHQgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcykuaGVpZ2h0ICE9PSAnMHB4JyAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS5oZWlnaHQgIT09ICdhdXRvJyApIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuZ3Jvd19jb250YWluZXIgPSBmYWxzZTtcbiAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS5nZXRQcm9wZXJ0eVZhbHVlKCctLWZpbGwtdmlld2VyJykpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5maXhlZF9zaXplID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2lyZV9zZWxlY3Rpb25fY2hhbmdlLmNhbGwodGhpcyx0aGlzLnJlbmRlcmVyKTtcbiAgfVxuXG4gIGZpdFRvWm9vbSgpIHtcbiAgICB6b29tX3RvX2ZpdCh0aGlzLnJlbmRlcmVyKTtcbiAgfVxuXG4gIGNyZWF0ZVRyYWNrKHRyYWNrKSB7XG4gICAgTUFTQ1AucmVnaXN0ZXJMYXllcih0cmFjay5uYW1lLHt9LFt0aGlzLnJlbmRlcmVyXSk7XG4gICAgdGhpcy5yZW5kZXJlci50cmFja09yZGVyID0gdGhpcy5yZW5kZXJlci50cmFja09yZGVyLmNvbmNhdChbdHJhY2submFtZV0pO1xuICAgIHRoaXMucmVuZGVyZXIuc2hvd0xheWVyKHRyYWNrLm5hbWUpO1xuICAgIHRoaXMucmVuZGVyZXIucmVmcmVzaCgpO1xuICB9XG5cbiAgcmVmcmVzaFRyYWNrcygpIHtcbiAgICBwb3B1bGF0ZV90cmFja3MuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIGdldCBzZWxlY3RpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdzZWxlY3RpbmcnKTtcbiAgfVxuXG4gIHNldCBzZWxlY3RpbmcodG9nZ2xlKSB7XG4gICAgaWYgKHRvZ2dsZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGluZycsJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0aW5nJyk7XG4gICAgfVxuICB9XG5cblxuICBnZXQgaW50ZXJhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdpbnRlcmFjdGl2ZScpO1xuICB9XG5cbiAgc2V0IGludGVyYWN0aXZlKHRvZ2dsZSkge1xuICAgIGlmICh0b2dnbGUpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdpbnRlcmFjdGl2ZScsJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnaW50ZXJhY3RpdmUnKTtcbiAgICB9XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCd4LXByb3R2aWV3ZXInLEdhdG9yQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgR2F0b3JDb21wb25lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2dhdG9yL2pzL2xpYi9HYXRvckNvbXBvbmVudC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXBCQTtBQUNBO0FBc0JBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQXlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBQ0E7QUFZQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdEVBO0FBQ0E7QUF3RUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!****************************!*\
  !*** ../gator/js/index.js ***!
  \****************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_ClustalRunner__ = __webpack_require__(/*! ./lib/ClustalRunner */ 5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_UniprotReader__ = __webpack_require__(/*! ./lib/UniprotReader */ 8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_UserdataReader__ = __webpack_require__(/*! ./lib/UserdataReader */ 9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_GenomeReader__ = __webpack_require__(/*! ./lib/GenomeReader */ 10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__lib_GatorDataReader__ = __webpack_require__(/*! ./lib/GatorDataReader */ 18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_Service__ = __webpack_require__(/*! ./lib/Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__lib_MASCP__ = __webpack_require__(/*! ./lib/MASCP */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__lib_CondensedSequenceRenderer__ = __webpack_require__(/*! ./lib/CondensedSequenceRenderer */ 11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__lib_Dragger__ = __webpack_require__(/*! ./lib/Dragger */ 13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__lib_GatorComponent__ = __webpack_require__(/*! ./lib/GatorComponent */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__lib_GeneComponent__ = __webpack_require__(/*! ./lib/GeneComponent */ 23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__lib_TrackRendererComponent__ = __webpack_require__(/*! ./lib/TrackRendererComponent */ 24);\n\n\n\n\n\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].ClustalRunner = __WEBPACK_IMPORTED_MODULE_0__lib_ClustalRunner__[\"a\" /* default */];\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].UniprotReader = __WEBPACK_IMPORTED_MODULE_1__lib_UniprotReader__[\"a\" /* default */];\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].UserdataReader = __WEBPACK_IMPORTED_MODULE_2__lib_UserdataReader__[\"a\" /* default */];\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].GenomeReader = __WEBPACK_IMPORTED_MODULE_3__lib_GenomeReader__[\"a\" /* default */];\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].GatorDataReader = __WEBPACK_IMPORTED_MODULE_4__lib_GatorDataReader__[\"a\" /* default */];\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].GatorComponent = __WEBPACK_IMPORTED_MODULE_9__lib_GatorComponent__[\"a\" /* default */];\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].GeneComponent = __WEBPACK_IMPORTED_MODULE_10__lib_GeneComponent__[\"a\" /* default */];\n__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */].TrackComponent = __WEBPACK_IMPORTED_MODULE_11__lib_TrackRendererComponent__[\"a\" /* default */];\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_6__lib_MASCP__[\"a\" /* default */]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9nYXRvci9qcy9pbmRleC5qcz8xOWU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbHVzdGFsUnVubmVyIGZyb20gJy4vbGliL0NsdXN0YWxSdW5uZXInO1xuaW1wb3J0IFVuaXByb3RSZWFkZXIgZnJvbSAnLi9saWIvVW5pcHJvdFJlYWRlcic7XG5pbXBvcnQgVXNlcmRhdGFSZWFkZXIgZnJvbSAnLi9saWIvVXNlcmRhdGFSZWFkZXInO1xuaW1wb3J0IEdlbm9tZVJlYWRlciBmcm9tICcuL2xpYi9HZW5vbWVSZWFkZXInO1xuaW1wb3J0IEdhdG9yRGF0YVJlYWRlciBmcm9tICcuL2xpYi9HYXRvckRhdGFSZWFkZXInO1xuaW1wb3J0IFNlcnZpY2UgZnJvbSAnLi9saWIvU2VydmljZSc7XG5cblxuaW1wb3J0IE1BU0NQIGZyb20gJy4vbGliL01BU0NQJztcbmltcG9ydCBDb25kZW5zZWRTZXF1ZW5jZVJlbmRlcmVyIGZyb20gJy4vbGliL0NvbmRlbnNlZFNlcXVlbmNlUmVuZGVyZXInO1xuXG5cbmltcG9ydCBEcmFnZ2VyIGZyb20gJy4vbGliL0RyYWdnZXInO1xuXG5NQVNDUC5DbHVzdGFsUnVubmVyID0gQ2x1c3RhbFJ1bm5lcjtcbk1BU0NQLlVuaXByb3RSZWFkZXIgPSBVbmlwcm90UmVhZGVyO1xuTUFTQ1AuVXNlcmRhdGFSZWFkZXIgID0gVXNlcmRhdGFSZWFkZXIgO1xuTUFTQ1AuR2Vub21lUmVhZGVyID0gR2Vub21lUmVhZGVyO1xuTUFTQ1AuR2F0b3JEYXRhUmVhZGVyID0gR2F0b3JEYXRhUmVhZGVyO1xuXG5pbXBvcnQgR2F0b3JDb21wb25lbnQgZnJvbSAnLi9saWIvR2F0b3JDb21wb25lbnQnO1xuXG5pbXBvcnQgR2VuZUNvbXBvbmVudCBmcm9tICcuL2xpYi9HZW5lQ29tcG9uZW50JztcblxuaW1wb3J0IFRyYWNrQ29tcG9uZW50IGZyb20gJy4vbGliL1RyYWNrUmVuZGVyZXJDb21wb25lbnQnO1xuXG5NQVNDUC5HYXRvckNvbXBvbmVudCA9IEdhdG9yQ29tcG9uZW50O1xuTUFTQ1AuR2VuZUNvbXBvbmVudCA9IEdlbmVDb21wb25lbnQ7XG5NQVNDUC5UcmFja0NvbXBvbmVudCA9IFRyYWNrQ29tcG9uZW50O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1BU0NQO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9nYXRvci9qcy9pbmRleC5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!****************************************!*\
  !*** ../gator/js/lib/ClustalRunner.js ***!
  \****************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Service__ = __webpack_require__(/*! ./Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bean__ = __webpack_require__(/*! ../bean */ 0);\n/** @fileOverview   Classes for reading data from the Clustal tool\n */\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Clustal for given sequences\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst ClustalRunner = __WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */].buildService(function (data) {\n    this._raw_data = data;\n    if (data && typeof data == 'string') {\n        this._raw_data = { 'data': { 'sequences': this.getSequences(), 'alignment': this.getAlignment() } };\n    }\n    return this;\n});\n\nClustalRunner.SERVICE_URL = 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/run/';\n\nClustalRunner.hash = function (str) {\n    var hash = 0;\n    for (i = 0; i < str.length; i++) {\n        char = str.charCodeAt(i);\n        hash = char + (hash << 6) + (hash << 16) - hash;\n    }\n    return hash;\n};\n\nClustalRunner.prototype.requestData = function () {\n    var sequences = [].concat(this.sequences || []);\n    var self = this;\n    this.agi = ClustalRunner.hash(this.sequences.join(',')) + '';\n    if (!ClustalRunner.SERVICE_URL.match(/ebi/)) {\n        return {\n            type: \"POST\",\n            dataType: \"json\",\n            api_key: MASCP.GATOR_CLIENT_ID,\n            data: {\n                'sequences': sequences.join(\",\")\n            }\n        };\n    }\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(self, 'running');\n    if (this.job_id) {\n        return {\n            type: \"GET\",\n            dataType: \"txt\",\n            url: 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/status/' + this.job_id\n        };\n    }\n    if (this.result_id) {\n        return {\n            type: \"GET\",\n            dataType: \"txt\",\n            url: 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/result/' + this.result_id + '/aln-clustalw'\n        };\n    }\n\n    for (var i = 0; i < sequences.length; i++) {\n        sequences[i] = \">seq\" + i + \"\\n\" + sequences[i];\n    }\n    return {\n        type: \"POST\",\n        dataType: \"txt\",\n        data: { 'sequence': escape(sequences.join(\"\\n\") + \"\\n\"),\n            'email': 'joshi%40sund.ku.dk'\n        }\n    };\n};\n\n(function (serv) {\n    var defaultDataReceived = serv.prototype._dataReceived;\n\n    serv.prototype._dataReceived = function (data, status) {\n        if (data === null) {\n            return defaultDataReceived.call(this, null, status);\n        }\n        if (typeof data == \"object\") {\n            if (data.status && data.status == \"RUNNING\") {\n                var self = this;\n                __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(self, \"running\");\n                setTimeout(function () {\n                    self.retrieve(self.agi);\n                }, 5000);\n                console.log(\"Got back running status\");\n                return;\n            }\n            return defaultDataReceived.call(this, data, status);\n        }\n\n        if (typeof data == \"string\" && data.match(/^clustalw/)) {\n            this.job_id = data;\n            this.retrieve(this.agi);\n            return;\n        }\n        if (data.match(/FINISHED/)) {\n            this.result_id = this.job_id;\n            this.job_id = null;\n            var self = this;\n            setTimeout(function () {\n                self.retrieve(self.agi);\n            }, 500);\n            return;\n        }\n        if (data.match(/RUNNING/)) {\n            var self = this;\n            setTimeout(function () {\n                self.retrieve(self.agi);\n            }, 500);\n            return;\n        }\n\n        return defaultDataReceived.call(this, data, status);\n    };\n})(ClustalRunner);\n\n(function () {\n    var normalise_insertions = function normalise_insertions(inserts) {\n        var pos;\n        var positions = [];\n        var result_data = {};\n        for (pos in inserts) {\n            if (inserts.hasOwnProperty(pos) && parseInt(pos) >= -1) {\n                positions.push(parseInt(pos));\n            }\n        }\n        positions = positions.sort(function sortfunction(a, b) {\n            return a - b;\n        });\n\n        // From highest to lowest position, loop through and\n        // subtract the lengths of previous subtratctions from\n        // the final position value.\n\n        for (var i = positions.length - 1; i >= 0; i--) {\n            var j = i - 1;\n            pos = parseInt(positions[i]);\n            var value = inserts[pos];\n            while (j >= 0) {\n                pos -= inserts[positions[j]].length;\n                j--;\n            }\n            if (!value.match(/^\\s+$/)) {\n                result_data[pos + 1] = value + (result_data[pos + 1] || '');\n            }\n        }\n        //    delete result_data[0];\n        return result_data;\n    };\n\n    var splice_char = function splice_char(seqs, index, insertions) {\n        for (var i = 0; i < seqs.length; i++) {\n            var seq = seqs[i].toString();\n            if (seq.charAt(index) != '-') {\n                if (!insertions[i]) {\n                    insertions[i] = {};\n                    insertions[i][-1] = '';\n                }\n                insertions[i][index - 1] = seq.charAt(index);\n                if (insertions[i][index] && insertions[i][index].match(/\\w/)) {\n                    insertions[i][index - 1] += insertions[i][index];\n                    delete insertions[i][index];\n                }\n            } else {\n                if (insertions[i]) {\n                    insertions[i][index - 1] = ' ';\n                    if ((insertions[i][index] || '').match(/^\\s+$/)) {\n                        insertions[i][index - 1] += insertions[i][index];\n                        delete insertions[i][index];\n                    }\n                }\n            }\n            seqs[i] = seq.slice(0, index) + seq.slice(index + 1);\n        }\n    };\n\n    ClustalRunner.Result.prototype.alignToSequence = function (seq_index) {\n        if (!this._orig_raw_data) {\n            this._orig_raw_data = JSON.stringify(this._raw_data);\n        } else {\n            this._raw_data = JSON.parse(this._orig_raw_data);\n        }\n        var seqs = this._raw_data.data.sequences.concat([this._raw_data.data.alignment]);\n        var insertions = [];\n        var aligning_seq = seqs[seq_index],\n            i = aligning_seq.length - 1;\n        for (i; i >= 0; i--) {\n            if (aligning_seq.charAt(i) == '-') {\n                splice_char(seqs, i, insertions);\n            }\n        }\n        for (i = 0; i < seqs.length; i++) {\n            if (insertions[i] && i != seq_index) {\n                insertions[i] = normalise_insertions(insertions[i]);\n                var seq = seqs[i];\n                seqs[i] = { 'sequence': seq, 'insertions': insertions[i] };\n                seqs[i].toString = function () {\n                    return this.sequence;\n                };\n            }\n        }\n        this._raw_data.data.alignment = seqs.pop();\n        this._raw_data.data.sequences = seqs;\n    };\n\n    /*\n    \n    Test suite for calculating positions\n    \n    var aligner = 0;\n    foo = new ClustalRunner.Result();\n    foo._raw_data = {\"data\" : { \"alignment\" : \"****************\" , \"sequences\" : [ \"----12345678----\", \"XXXXXXXXXXXXXXXX\", \"ABCDABC---ABCDAB\" ] }};\n    foo.alignToSequence(aligner);\n    console.log(foo.getSequences());\n    console.log(foo.calculatePositionForSequence(0,1));\n    console.log(foo.calculatePositionForSequence(0,2));\n    console.log(foo.calculatePositionForSequence(0,3));\n    console.log(foo.calculatePositionForSequence(0,4));\n    console.log(foo.calculatePositionForSequence(0,5));\n    console.log(foo.calculatePositionForSequence(0,6));\n    console.log(foo.calculatePositionForSequence(0,7));\n    console.log(foo.calculatePositionForSequence(0,8));\n    \n    */\n    ClustalRunner.Result.prototype.calculatePositionForSequence = function (idx, pos) {\n        var inserts = this._raw_data.data.sequences[idx].insertions || {};\n        var result = pos;\n        var actual_position = 0;\n        var seq = this._raw_data.data.sequences[idx].toString();\n        for (var i = 0; i < seq.length; i++) {\n            if (inserts[i]) {\n                actual_position += inserts[i].length;\n            }\n            actual_position += 1;\n            if (seq.charAt(i) == '-') {\n                actual_position -= 1;\n            }\n            if (pos <= actual_position) {\n                if (pos == actual_position) {\n                    return i + 1;\n                } else {\n                    if (i == 0) {\n                        i = 1;\n                    }\n                    return -1 * i;\n                }\n            }\n        }\n        return -1 * seq.length;\n    };\n\n    ClustalRunner.Result.prototype.calculateSequencePositionFromPosition = function (idx, pos) {\n        var inserts = this._raw_data.data.sequences[idx].insertions || {};\n        var result = pos;\n        var actual_position = 0;\n        var seq = this._raw_data.data.sequences[idx].toString();\n        for (var i = 0; i < pos; i++) {\n            if (inserts[i]) {\n                actual_position += inserts[i].length;\n            }\n            actual_position += 1;\n            if (seq.charAt(i) == '-') {\n                actual_position -= 1;\n            }\n        }\n        if (actual_position == 0) {\n            actual_position += 1;\n        }\n        return actual_position;\n    };\n})();\n//1265 (P)\n\nClustalRunner.prototype.setupSequenceRenderer = function (renderer) {\n    var self = this;\n\n    renderer.sequences = self.sequences;\n    renderer.addAxisScale('clustal', function (pos, layer, inverse) {\n        let idx = null;\n        let seq_identifiers = self.sequences.map(function (seq) {\n            return seq.agi;\n        });\n        while (seq_identifiers.length > 0) {\n            idx = idx || 0;\n            let acc = seq_identifiers.shift();\n            if (layer.scales.has(acc)) {\n                break;\n            }\n            idx++;\n            if (seq_identifiers.length === 0) {\n                idx = null;\n            }\n        }\n        if (layer.name === 'primarySequence') {\n            idx = self.result.aligned_idx;\n        }\n        if (idx === null) {\n            return pos;\n        }\n        if (inverse) {\n            return self.result.calculateSequencePositionFromPosition(idx, pos);\n        }\n\n        return self.result.calculatePositionForSequence(idx, pos);\n    });\n\n    var rendered_bits = [];\n    var controller_name = 'isoforms';\n    var group_name = 'isoforms';\n\n    var draw_discontinuity = function draw_discontinuity(canvas, size) {\n        var top = -3;\n        var left = -2;\n        var group = canvas.group();\n        var line;\n        line = canvas.line(left + 1, top + 4, left + 3, top + 1);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        line = canvas.line(left + 1, top + 6, left + 3, top + 3);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        line = canvas.line(left + 1, top + 4, left + 3, top + 3);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '5');\n        group.push(line);\n        line = canvas.line(left + 1, top + 5.3, left + 1, top + 5.8);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        line = canvas.line(left + 1, top + 5.9, left + 1.5, top + 5.9);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        var circle = canvas.circle(left + 2.8, top + 1.75, 1);\n        circle.setAttribute('fill', '#fff');\n        circle.setAttribute('stroke', '#ccc');\n        circle.setAttribute('stroke-width', '10');\n        group.push(circle);\n        var minus = canvas.text(left + 2.25, top + 2.25, (size || '÷') + \"\");\n        minus.setAttribute('fill', '#ccc');\n        minus.setAttribute('font-size', 75);\n        group.push(minus);\n        canvas.firstChild.nextSibling.appendChild(group);\n        return group;\n    };\n\n    var check_values = function check_values(seq, idx, seqs) {\n        var positives = 0;\n        var aa = seq.toString().charAt(idx);\n        for (var i = 1; i < seqs.length; i++) {\n            if (seqs[i].toString().charAt(idx) == aa) {\n                positives += 1;\n            }\n        }\n        return positives / (seqs.length - 1);\n    };\n\n    var redraw_alignments = function redraw_alignments(sequence_index) {\n        var result = self.result;\n\n        while (rendered_bits.length > 0) {\n            var bit = rendered_bits.shift();\n            renderer.remove(bit.layer, bit);\n        }\n        result.alignToSequence(sequence_index || 0);\n\n        var aligned = result.getSequences();\n\n        if (!renderer.sequence) {\n            renderer.setSequence(aligned[sequence_index])(function () {\n                renderer.sequences = self.sequences;\n                MASCP.registerGroup(group_name, 'Aligned');\n                MASCP.registerLayer(controller_name, { 'fullname': 'Conservation', 'color': '#000000' });\n                if (renderer.trackOrder.indexOf(controller_name) < 0) {\n                    renderer.trackOrder = renderer.trackOrder.concat([controller_name]);\n                }\n                renderer.showLayer(controller_name);\n                renderer.createGroupController(controller_name, group_name);\n                redraw_alignments(sequence_index);\n            });\n            return;\n        } else {\n            renderer.sequence = aligned[sequence_index];\n            renderer.redrawAxis();\n        }\n        var alignments = result.getAlignment().split('');\n        rendered_bits = rendered_bits.concat(renderer.renderTextTrack(controller_name, result.getAlignment().replace(/ /g, ' ')));\n        rendered_bits.slice(-1)[0].setAttribute('data-spaces', 'true');\n        rendered_bits.slice(-1)[0].layer = controller_name;\n        var idxs = [\"*\", \":\", \".\", \" \"].reverse();\n        for (var i = 0; i < alignments.length; i++) {\n            rendered_bits.push(renderer.getAA(i + 1, controller_name).addBoxOverlay(controller_name, 1, idxs.indexOf(alignments[i]) / 4, { \"merge\": true }));\n            rendered_bits.slice(-1)[0].layer = controller_name;\n        }\n        for (var i = 0; i < aligned.length; i++) {\n            var layname = self.sequences[i].agi.toUpperCase() || \"missing\" + i;\n            var lay = MASCP.registerLayer(layname, { 'fullname': self.sequences[i].name || layname.toUpperCase(), 'group': group_name, 'color': '#ff0000', 'accession': self.sequences[i].agi });\n            lay.scales.clear();\n            lay.scales.add(self.sequences[i].agi);\n\n            lay.fullname = self.sequences[i].name || layname.toUpperCase();\n            var text_array = renderer.renderTextTrack(layname, aligned[i].toString());\n            rendered_bits = rendered_bits.concat(text_array);\n            rendered_bits.slice(-1)[0].layer = layname;\n            if (renderer.trackOrder.indexOf(layname.toUpperCase()) < 0) {\n                renderer.trackOrder = renderer.trackOrder.concat([group_name]);\n            }\n            var name = \"Isoform \" + (i + 1);\n            if (aligned[i].insertions) {\n                for (var insert in aligned[i].insertions) {\n                    var insertions = aligned[i].insertions;\n                    if (insert == 0 && insertions[insert] == \"\") {\n                        continue;\n                    }\n                    if (insertions[insert].length < 1) {\n                        continue;\n                    }\n                    var size = insertions[insert].length;\n                    if (insert == 0) {\n                        insert = 1;\n                    }\n                    var content = draw_discontinuity(renderer._canvas, size);\n                    content.setAttribute('fill', '#ffff00');\n                    var an_anno = renderer.getAA(insert, controller_name).addToLayer(layname, { 'content': content, //'+'+insertions[insert].length,\n                        'bare_element': true,\n                        'height': 10,\n                        'offset': -5,\n                        'no_tracer': true\n                    })[1];\n                    an_anno.container.setAttribute('height', '300');\n                    an_anno.container.setAttribute('viewBox', '-50 -100 200 300');\n                    rendered_bits.push(an_anno);\n                    rendered_bits.slice(-1)[0].layer = layname;\n                }\n            }\n        }\n        renderer.zoom = 1;\n        renderer.showGroup(group_name);\n        renderer.refresh();\n    };\n\n    this.bind('resultReceived', function () {\n        var self = this;\n        redraw_alignments(0);\n        self.result.aligned_idx = 0;\n        var accs = [];\n        self.sequences.forEach(function (seq) {\n            accs.push(seq.agi.toUpperCase());\n        });\n        var current_order = [];\n        renderer.bind('orderChanged', function (order) {\n            if (self.result) {\n                var new_order = order.slice(order.indexOf(controller_name) + 1, order.length).filter(function (track) {\n                    return accs.indexOf(track) >= 0;\n                });\n                if (new_order.join(',') == current_order.join(',')) {\n                    return;\n                }\n                current_order = new_order;\n                self.result.aligned_idx = accs.indexOf(current_order[0]);\n\n                redraw_alignments(self.result.aligned_idx);\n                renderer.refreshScale();\n            }\n        });\n    });\n};\n\nClustalRunner.Result.prototype.getSequences = function () {\n    if (this._raw_data && this._raw_data.data && this._raw_data.data.sequences) {\n        return [].concat(this._raw_data.data.sequences);\n    }\n    var bits = this._raw_data.match(/seq\\d+(.*)/g);\n    var results = [];\n    for (var i = 0; i < bits.length; i++) {\n        var seqbits = bits[i].match(/seq(\\d+)\\s+(.*)/);\n        if (!results[seqbits[1]]) {\n            results[seqbits[1]] = '';\n        }\n        results[seqbits[1]] += seqbits[2];\n    }\n    return results;\n};\n\nClustalRunner.Result.prototype.getAlignment = function () {\n    if (this._raw_data && this._raw_data.data && this._raw_data.data.alignment) {\n        return this._raw_data.data.alignment.toString();\n    }\n    this._text_data = this._raw_data;\n    var re = / {16}(.*)/g;\n    var result = \"\";\n    var match = re.exec(this._raw_data);\n    while (match !== null) {\n        result += match[1];\n        match = re.exec(this._raw_data);\n    }\n\n    return result;\n};\n\nlet onlyUnique = (val, idx, arr) => arr.indexOf(val) === idx;\n\nlet clustal_emulator = sequences => {\n    if (sequences.length == 0) {\n        return { data: { sequences: [], alignment: \"\" } };\n    }\n    let all_aas = sequences.map(seq => seq.split(''));\n    let alignment = all_aas[0].map((aa, pos) => all_aas.map(aas => aas[pos]).filter(onlyUnique).length == 1 ? '*' : ':').join('');\n    return { data: { sequences: sequences, alignment: alignment } };\n};\n\nClustalRunner.EmulatedClustalRunner = function (renderer) {\n    let runner = new ClustalRunner();\n    runner.retrieve = function () {\n        let datablock = clustal_emulator(this.sequences || []);\n        this._dataReceived(datablock);\n        this.sequences = this.sequences.map((seq, idx) => {\n            return { agi: 'seq' + idx, toString: () => seq };\n        });\n        this.gotResult();\n        this.requestComplete();\n    };\n    if (renderer) {\n        runner.registerSequenceRenderer(renderer);\n    }\n    return runner;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ClustalRunner);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = function (originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub2RlX21vZHVsZXMvLnJlZ2lzdHJ5Lm5wbWpzLm9yZy93ZWJwYWNrLzMuMTIuMC9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzPzIwOTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIG5vZGVfbW9kdWxlcy8ucmVnaXN0cnkubnBtanMub3JnL3dlYnBhY2svMy4xMi4wL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*******************************!*\
  !*** ../gator/js/jsandbox.js ***!
  \*******************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/*\n * JSandbox JavaScript Library v0.2.3\n *\n * With modifications to create a worker function inline so that\n * we can just include this single file\n *\n * 2009-01-25\n * By Elijah Grey, http://eligrey.com\n * Licensed under the X11/MIT License\n *   See LICENSE.md\n */\n\n/*global self */\n\n/*jslint undef: true, nomen: true, eqeqeq: true, bitwise: true, regexp: true,\nnewcap: true, immed: true, maxerr: 1000, strict: true */\n\n/*! @source http://purl.eligrey.com/github/jsandbox/blob/master/src/jsandbox.js*/\n\n\n\nvar JSandbox = function (self) {\n\tvar undef_type = \"undefined\",\n\t    doc = self.document,\n\t    Worker = self.Worker;\n\n\tif (typeof Worker === undef_type) {\n\t\treturn;\n\t}\n\n\tvar\n\t// repeatedly used properties/strings (for minification)\n\t$eval = \"eval\",\n\t    $exec = \"exec\",\n\t    $load = \"load\",\n\t    $requests = \"requests\",\n\t    $input = \"input\",\n\t    $terminate = \"terminate\",\n\t    $data = \"data\",\n\t    $callback = \"callback\",\n\t    $onerror = \"onerror\",\n\t    $worker = \"worker\",\n\t    $onresponse = \"onresponse\",\n\t    $prototype = \"prototype\",\n\t    $call = \"call\",\n\t    str_type = \"string\",\n\t    fun_type = \"function\",\n\t    Sandbox = function Sandbox() {\n\t\tvar sandbox = this;\n\n\t\tif (!(sandbox instanceof Sandbox)) {\n\t\t\treturn new Sandbox();\n\t\t}\n\t\ttry {\n\t\t\tsandbox[$worker] = new Worker(Sandbox.url);\n\t\t} catch (exception) {\n\t\t\t// Internet Explorer closes the BLOB before we can use it\n\t\t\tif (exception.name === \"SecurityError\") {\n\t\t\t\tsandbox[$worker] = new Worker(window.URL.createObjectURL(new Blob(['(' + default_worker_function.toString() + '(self,eval))'], { 'type': 'text/javascript' })));\n\t\t\t}\n\t\t}\n\t\tsandbox[$requests] = {};\n\n\t\tsandbox[$worker].onmessage = function (event) {\n\t\t\tvar data = event[$data],\n\t\t\t    request;\n\t\t\tif (typeof data !== \"object\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (data.id == \"log\") {\n\t\t\t\tconsole.log(data.message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trequest = sandbox[$requests][data.id];\n\t\t\tif (request) {\n\t\t\t\tif (data.error) {\n\t\t\t\t\tif (typeof sandbox[$onerror] === fun_type) {\n\t\t\t\t\t\tsandbox[$onerror](data, request);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof request[$onerror] === fun_type) {\n\t\t\t\t\t\trequest[$onerror][$call](sandbox, data.error);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof sandbox[$onresponse] === fun_type) {\n\t\t\t\t\t\tsandbox[$onresponse](data, request);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof request[$callback] === fun_type) {\n\t\t\t\t\t\trequest[$callback][$call](sandbox, data.results);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelete sandbox[$requests][data.id];\n\t\t\t}\n\t\t};\n\t},\n\t    proto = Sandbox[$prototype],\n\t    createRequestMethod = function createRequestMethod(method) {\n\t\tproto[method] = function (options, callback, input, onerror) {\n\t\t\tif (typeof options === str_type || Object[$prototype].toString[$call](options) === \"[object Array]\" || arguments.length > 1) {\n\t\t\t\t// called in (data, callback, input, onerror) style\n\t\t\t\toptions = {\n\t\t\t\t\tdata: options,\n\t\t\t\t\tinput: input,\n\t\t\t\t\tcallback: callback,\n\t\t\t\t\tonerror: onerror\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (method === $load && typeof options[$data] === str_type) {\n\t\t\t\toptions[$data] = [options[$data]];\n\t\t\t}\n\n\t\t\tvar data = options[$data],\n\t\t\t    id = this.createRequestID();\n\n\t\t\tinput = options[$input];\n\n\t\t\tdelete options[$data];\n\t\t\tdelete options[$input];\n\n\t\t\tthis[$requests][id] = options;\n\n\t\t\tthis[$worker].postMessage({\n\t\t\t\tid: id,\n\t\t\t\tmethod: method,\n\t\t\t\tdata: data,\n\t\t\t\tinput: input\n\t\t\t});\n\n\t\t\treturn id;\n\t\t};\n\t\tSandbox[method] = function () {\n\t\t\tvar sandbox = new Sandbox();\n\n\t\t\tsandbox[$onresponse] = sandbox[$onerror] = function () {\n\t\t\t\tsandbox[$terminate]();\n\t\t\t\tsandbox = null;\n\t\t\t};\n\n\t\t\tSandbox[$prototype][method].apply(sandbox, Array[$prototype].slice[$call](arguments));\n\t\t\treturn Sandbox;\n\t\t};\n\t},\n\t    methods = [$eval, $load, $exec],\n\t    i = 3; // methods.length\n\n\twhile (i--) {\n\t\tcreateRequestMethod(methods[i]);\n\t}\n\n\tproto[$terminate] = function () {\n\t\tthis[$requests] = {};\n\t\tthis[$worker].onmessage = null;\n\t\tthis[$worker][$terminate]();\n\t};\n\n\tproto.abort = function (id) {\n\t\tdelete this[$requests][id];\n\t};\n\n\tproto.createRequestID = function () {\n\t\tvar id = Math.random().toString();\n\t\tif (id in this[$requests]) {\n\t\t\treturn this.createRequestID();\n\t\t}\n\t\treturn id;\n\t};\n\n\tif (typeof doc !== undef_type) {\n\t\tvar linkElems = doc.getElementsByTagName(\"link\");\n\t\ti = linkElems.length;\n\t\twhile (i--) {\n\t\t\tif (linkElems[i].getAttribute(\"rel\") === \"jsandbox\") {\n\t\t\t\tSandbox.url = linkElems[i].getAttribute(\"href\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar default_worker_function = function default_worker_function(self, globalEval) {\n\t\t\"use strict\";\n\n\t\tvar postMessage = self.postMessage,\n\t\t    importScripts = self.importScripts,\n\t\t    messageEventType = \"message\",\n\t\t    messageHandler = function messageHandler(event) {\n\t\t\tvar request = event.data,\n\t\t\t    response = {};\n\n\t\t\tresponse.id = request.id;\n\n\t\t\tvar data = request.data;\n\t\t\tself.input = request.input || {};\n\n\t\t\ttry {\n\t\t\t\tswitch (request.method) {\n\n\t\t\t\t\tcase \"eval\":\n\t\t\t\t\t\t// JSLint has something against indenting cases\n\t\t\t\t\t\tresponse.results = globalEval(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"exec\":\n\t\t\t\t\t\timportScripts(\"data:application/javascript,\" + encodeURIComponent(data));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"load\":\n\t\t\t\t\t\timportScripts.apply(self, data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tresponse.code = e.message;\n\t\t\t\tresponse.error = e.stack;\n\t\t\t\tresponse.line = e.lineNumber;\n\t\t\t\tresponse.fileName = e.fileName;\n\t\t\t}\n\n\t\t\tdelete self.input;\n\t\t\ttry {\n\t\t\t\tdelete self.onmessage; // in case the code defined it\n\t\t\t} catch (e) {}\n\n\t\t\tpostMessage(response);\n\t\t};\n\n\t\tif (self.addEventListener) {\n\t\t\tself.addEventListener(messageEventType, messageHandler, false);\n\t\t} else if (self.attachEvent) {\n\t\t\t// for future compatibility with IE\n\t\t\tself.attachEvent(\"on\" + messageEventType, messageHandler);\n\t\t}\n\n\t\tself.window = self; // provide a window object for scripts\n\t\tself.console = { log: function log(message) {\n\t\t\t\tpostMessage({ \"id\": \"log\", \"message\": message });\n\t\t\t} };\n\n\t\t// dereference unsafe functions\n\t\t// some might not be dereferenced: https://bugzilla.mozilla.org/show_bug.cgi?id=512464\n\t\tself.Worker = self.addEventListener = self.removeEventListener = self.importScripts = self.XMLHttpRequest = self.postMessage =\n\t\t//self.dispatchEvent       =\n\t\t// in case IE implements web workers\n\t\tself.attachEvent = self.detachEvent = self.ActiveXObject = undefined;\n\t};\n\n\tif (!Sandbox.url) {\n\t\tSandbox.url = window.URL.createObjectURL(new Blob(['(' + default_worker_function.toString() + '(self,eval))'], { 'type': 'text/javascript' }));\n\t}\n\treturn Sandbox;\n}(self),\n    Sandbox = JSandbox;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (JSandbox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!****************************************!*\
  !*** ../gator/js/lib/UniprotReader.js ***!
  \****************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Service__ = __webpack_require__(/*! ./Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__UserdataReader__ = __webpack_require__(/*! ./UserdataReader */ 9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bean__ = __webpack_require__(/*! ../bean */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n/**\n * @fileOverview    Classes for reading data from Uniprot database\n */\n\n\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Uniprot for a given AGI.\n *  @param      {String} agi            Agi to look up\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst UniprotReader = __WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */].buildService(function (data) {\n    if (data && typeof data === 'string') {\n        var dats = UniprotReader.parseFasta(data);\n        var key;\n        for (key in dats) {\n            if (dats.hasOwnProperty(key)) {\n                data = { 'data': dats[key] };\n                this._raw_data = data;\n            }\n        }\n    }\n    this._data = data || {};\n    if (!this._data.data) {\n        this._data = { 'data': ['', ''] };\n    }\n    return this;\n});\n\nUniprotReader.SERVICE_URL = null;\n\nUniprotReader.prototype.requestData = function () {\n    var self = this;\n    if (!UniprotReader.SERVICE_URL) {\n        throw new Error('No service URL for UniprotReader');\n    }\n    return {\n        type: \"GET\",\n        dataType: \"json\",\n        'auth': __WEBPACK_IMPORTED_MODULE_3__MASCP__[\"a\" /* default */].GATOR_AUTH_TOKEN,\n        'api_key': __WEBPACK_IMPORTED_MODULE_3__MASCP__[\"a\" /* default */].GATOR_CLIENT_ID,\n        'url': UniprotReader.SERVICE_URL + '/' + this.agi.toUpperCase()\n    };\n};\n\nUniprotReader.Result.prototype.getDescription = function () {\n    return this._data.data[1];\n};\n\nUniprotReader.Result.prototype.getSequence = function () {\n    return this._data.data[0];\n};\n\nUniprotReader.parseFasta = function (datablock) {\n    var chunks = datablock.split('>');\n    var datas = {};\n    chunks.forEach(function (entry) {\n        var lines = entry.split(/\\n/);\n        if (lines.length <= 1) {\n            return;\n        }\n        var header = lines.shift();\n        var seq = lines.join(\"\");\n        var header_data = header.split('|');\n        var acc = header_data[1];\n        var desc = header_data[2];\n        datas[acc] = [seq, desc];\n    });\n    return datas;\n};\n\nUniprotReader.readFastaFile = function (datablock, callback) {\n\n    var datas = UniprotReader.parseFasta(datablock);\n\n    var writer = new __WEBPACK_IMPORTED_MODULE_1__UserdataReader__[\"a\" /* default */]();\n    writer.toString = function () {\n        return \"UniprotReader\";\n    };\n    writer.map = function (dat) {\n        return dat.data;\n    };\n    writer.datasetname = \"UniprotReader\";\n    callback(writer);\n    setTimeout(function () {\n        writer.avoid_database = true;\n        writer.setData(\"UniprotReader\", { \"data\": datas });\n    }, 0);\n    return writer;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (UniprotReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9nYXRvci9qcy9saWIvVW5pcHJvdFJlYWRlci5qcz8zZmY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVPdmVydmlldyAgICBDbGFzc2VzIGZvciByZWFkaW5nIGRhdGEgZnJvbSBVbmlwcm90IGRhdGFiYXNlXG4gKi9cblxuaW1wb3J0IFNlcnZpY2UgZnJvbSAnLi9TZXJ2aWNlJztcbmltcG9ydCBVc2VyZGF0YVJlYWRlciBmcm9tICcuL1VzZXJkYXRhUmVhZGVyJztcbmltcG9ydCBiZWFuIGZyb20gJy4uL2JlYW4nO1xuaW1wb3J0IE1BU0NQIGZyb20gJy4vTUFTQ1AnO1xuXG5cbi8qKiBEZWZhdWx0IGNsYXNzIGNvbnN0cnVjdG9yXG4gKiAgQGNsYXNzICAgICAgU2VydmljZSBjbGFzcyB0aGF0IHdpbGwgcmV0cmlldmUgZGF0YSBmcm9tIFVuaXByb3QgZm9yIGEgZ2l2ZW4gQUdJLlxuICogIEBwYXJhbSAgICAgIHtTdHJpbmd9IGFnaSAgICAgICAgICAgIEFnaSB0byBsb29rIHVwXG4gKiAgQHBhcmFtICAgICAge1N0cmluZ30gZW5kcG9pbnRVUkwgICAgRW5kcG9pbnQgVVJMIGZvciB0aGlzIHNlcnZpY2VcbiAqICBAZXh0ZW5kcyAgICBNQVNDUC5TZXJ2aWNlXG4gKi9cbmNvbnN0IFVuaXByb3RSZWFkZXIgPSBTZXJ2aWNlLmJ1aWxkU2VydmljZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRhdGEgJiYgdHlwZW9mKGRhdGEpID09PSAnc3RyaW5nJyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0cyA9IFVuaXByb3RSZWFkZXIucGFyc2VGYXN0YShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGRhdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsgJ2RhdGEnIDogZGF0c1trZXldIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYXdfZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gZGF0YSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISB0aGlzLl9kYXRhLmRhdGEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHsgJ2RhdGEnIDogWycnLCcnXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG5Vbmlwcm90UmVhZGVyLlNFUlZJQ0VfVVJMID0gbnVsbDtcblxuVW5pcHJvdFJlYWRlci5wcm90b3R5cGUucmVxdWVzdERhdGEgPSBmdW5jdGlvbigpXG57XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICggISBVbmlwcm90UmVhZGVyLlNFUlZJQ0VfVVJMKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc2VydmljZSBVUkwgZm9yIFVuaXByb3RSZWFkZXInKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAnYXV0aCcgOiBNQVNDUC5HQVRPUl9BVVRIX1RPS0VOLFxuICAgICAgICAnYXBpX2tleScgOiBNQVNDUC5HQVRPUl9DTElFTlRfSUQsXG4gICAgICAgICd1cmwnICAgOiBVbmlwcm90UmVhZGVyLlNFUlZJQ0VfVVJMKycvJysodGhpcy5hZ2kpLnRvVXBwZXJDYXNlKClcbiAgICB9O1xufTtcblxuVW5pcHJvdFJlYWRlci5SZXN1bHQucHJvdG90eXBlLmdldERlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuZGF0YVsxXTtcbn07XG5cblVuaXByb3RSZWFkZXIuUmVzdWx0LnByb3RvdHlwZS5nZXRTZXF1ZW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmRhdGFbMF07XG59O1xuXG5Vbmlwcm90UmVhZGVyLnBhcnNlRmFzdGEgPSBmdW5jdGlvbihkYXRhYmxvY2spIHtcbiAgICB2YXIgY2h1bmtzID0gKGRhdGFibG9jay5zcGxpdCgnPicpKTtcbiAgICB2YXIgZGF0YXMgPSB7fTtcbiAgICBjaHVua3MuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICB2YXIgbGluZXMgPSBlbnRyeS5zcGxpdCgvXFxuLyk7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZWFkZXIgPSBsaW5lcy5zaGlmdCgpO1xuICAgICAgICB2YXIgc2VxID0gbGluZXMuam9pbihcIlwiKTtcbiAgICAgICAgdmFyIGhlYWRlcl9kYXRhID0gaGVhZGVyLnNwbGl0KCd8Jyk7XG4gICAgICAgIHZhciBhY2MgPSBoZWFkZXJfZGF0YVsxXTtcbiAgICAgICAgdmFyIGRlc2MgPSBoZWFkZXJfZGF0YVsyXTtcbiAgICAgICAgZGF0YXNbYWNjXSA9IFtzZXEsZGVzY107XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFzO1xufVxuXG5Vbmlwcm90UmVhZGVyLnJlYWRGYXN0YUZpbGUgPSBmdW5jdGlvbihkYXRhYmxvY2ssY2FsbGJhY2spIHtcblxuICAgIHZhciBkYXRhcyA9IFVuaXByb3RSZWFkZXIucGFyc2VGYXN0YShkYXRhYmxvY2spO1xuXG4gICAgdmFyIHdyaXRlciA9IG5ldyBVc2VyZGF0YVJlYWRlcigpO1xuICAgIHdyaXRlci50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJVbmlwcm90UmVhZGVyXCI7XG4gICAgfTtcbiAgICB3cml0ZXIubWFwID0gZnVuY3Rpb24oZGF0KSB7XG4gICAgICAgIHJldHVybiBkYXQuZGF0YTtcbiAgICB9O1xuICAgIHdyaXRlci5kYXRhc2V0bmFtZSA9IFwiVW5pcHJvdFJlYWRlclwiO1xuICAgIGNhbGxiYWNrKHdyaXRlcik7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgd3JpdGVyLmF2b2lkX2RhdGFiYXNlID0gdHJ1ZTtcbiAgICAgICAgd3JpdGVyLnNldERhdGEoXCJVbmlwcm90UmVhZGVyXCIse1wiZGF0YVwiIDogZGF0YXN9KTtcbiAgICB9LDApO1xuICAgIHJldHVybiB3cml0ZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVbmlwcm90UmVhZGVyO1xuXG5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2dhdG9yL2pzL2xpYi9Vbmlwcm90UmVhZGVyLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!*****************************************!*\
  !*** ../gator/js/lib/UserdataReader.js ***!
  \*****************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Service__ = __webpack_require__(/*! ./Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ServiceCaching__ = __webpack_require__(/*! ./ServiceCaching */ 17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__bean__ = __webpack_require__(/*! ../bean */ 0);\n/**\n * @fileOverview    Classes for getting arbitrary user data onto the GATOR\n */\n\n\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve sequence data for a given AGI from a given ecotype\n *  @param      {String} agi            Agi to look up\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst UserdataReader = __WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */].buildService(function (data) {\n    if (!data) {\n        return this;\n    }\n    this._raw_data = data;\n    return this;\n});\n\nUserdataReader.prototype.toString = function () {\n    return 'UserdataReader.' + this.datasetname;\n};\n\nUserdataReader.prototype.requestData = function () {\n    var agi = this.agi.toUpperCase();\n    return {\n        type: \"GET\",\n        dataType: \"json\",\n        data: { 'agi': agi,\n            'service': this.datasetname\n        }\n    };\n};\n\nUserdataReader.prototype.setupSequenceRenderer = function (renderer) {\n    // We don't have any default rendering for the UserDataReader\n    // since it's all going to be custom stuff anyway\n};\n\nvar apply_map = function apply_map(data_block) {\n    var map = this.map;\n    var databits = data_block.data;\n    var headers = databits.shift();\n    var dataset = {};\n    var id_col = headers.indexOf(map.id);\n    var cols_to_add = [];\n    for (var col in map) {\n        if (col == \"id\") {\n            continue;\n        }\n        if (map.hasOwnProperty(col)) {\n            cols_to_add.push({ \"name\": col, \"index\": headers.indexOf(map[col]) });\n        }\n    }\n    while (databits.length > 0) {\n        var row = databits.shift();\n        var id = row[id_col].toLowerCase();\n        if (!dataset[id]) {\n            dataset[id] = { \"data\": {} };\n        }\n        var obj = dataset[id];\n        var i;\n        for (i = cols_to_add.length - 1; i >= 0; i--) {\n            if (!obj.data[cols_to_add[i].name]) {\n                obj.data[cols_to_add[i].name] = [];\n            }\n            obj.data[cols_to_add[i].name] = obj.data[cols_to_add[i].name].concat((row[cols_to_add[i].index] || '').split(','));\n        }\n        obj.retrieved = data_block.retrieved;\n        obj.title = data_block.title;\n        if (data_block.etag) {\n            obj.etag = data_block.etag;\n        }\n    }\n    return dataset;\n};\n\nUserdataReader.prototype.setData = function (name, data) {\n\n    if (!data) {\n        return;\n    }\n\n    var self = this;\n\n    // Call CacheService on this object/class\n    // just to make sure that it has access\n    // to the cache retrieval mechanisms\n\n    __WEBPACK_IMPORTED_MODULE_1__ServiceCaching__[\"a\" /* default */].CacheService(this);\n\n    this.datasetname = name;\n\n    if (!data.retrieved) {\n        data.retrieved = new Date();\n    }\n    if (!data.title) {\n        data.title = name;\n    }\n\n    self.title = data.title;\n\n    var dataset = {}; // Format is { \"accession\" : { \"data\" : {}, \"retrieved\" : \"\" , \"title\" : \"\"  } };\n\n    if (typeof this.map == 'object') {\n        dataset = apply_map.call(this, data);\n    }\n    if (typeof this.map == 'function') {\n\n        if (this.map.callback) {\n            var self_func = arguments.callee;\n            this.map(data, function (parsed) {\n                self.map = function (d) {\n                    return d;\n                };\n                self_func.call(self, name, parsed);\n            });\n            return;\n        }\n        dataset = this.map(data);\n    }\n\n    if (!this.map) {\n        return;\n    }\n    this.data = dataset;\n\n    var inserter = new UserdataReader();\n\n    inserter.toString = function () {\n        return self.toString();\n    };\n\n    inserter.data = dataset;\n\n    inserter.retrieve = function (an_acc, cback) {\n        this.agi = an_acc;\n        // this._dataReceived(dataset[this.agi]);\n        cback.call(this);\n    };\n\n    __WEBPACK_IMPORTED_MODULE_1__ServiceCaching__[\"a\" /* default */].CacheService(inserter);\n\n    var accs = [];\n    var acc;\n    for (acc in dataset) {\n        if (dataset.hasOwnProperty(acc)) {\n            if (acc.match(/[A-Z]/)) {\n                dataset[acc.toLowerCase()] = dataset[acc];\n                delete dataset[acc];\n                acc = acc.toLowerCase();\n            }\n            accs.push(acc);\n        }\n    }\n    var total = accs.length;\n\n    var retrieve = this.retrieve;\n\n    this.retrieve = function (id, cback) {\n        console.log(\"Data not ready! Waiting for ready state\");\n        var self = this;\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(self, 'ready', function () {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(self, 'ready', arguments.callee);\n            self.retrieve(id, cback);\n        });\n    };\n    if (accs.length < 1) {\n        setTimeout(function () {\n            self.retrieve = retrieve;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self, 'ready', [data]);\n        }, 0);\n        return;\n    }\n    __WEBPACK_IMPORTED_MODULE_1__ServiceCaching__[\"a\" /* default */].BulkOperation(function (err) {\n        if (err) {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self, 'error', [err]);\n            return;\n        }\n        var trans = this.transaction;\n        inserter.avoid_database = true;\n        inserter.retrieve(accs[0], function () {\n            while (accs.length > 0) {\n                var acc = accs.shift();\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self, 'progress', [100 * ((total - accs.length) / total), total - accs.length, total]);\n                inserter.agi = acc;\n                inserter._dataReceived(dataset[acc]);\n                if (accs.length === 0) {\n                    self.retrieve = retrieve;\n                    trans(function (err) {\n                        if (!err) {\n                            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self, 'ready', [data]);\n                        } else {\n                            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self, 'error');\n                        }\n                    });\n                    return;\n                }\n            }\n        });\n    });\n};\n\nUserdataReader.datasets = function (cback, done) {\n    __WEBPACK_IMPORTED_MODULE_1__ServiceCaching__[\"a\" /* default */].FindCachedService(this, function (services) {\n        var result = [];\n        for (var i = 0, len = services.length; i < len; i++) {\n            result.push(services[i].replace(/UserdataReader./, ''));\n        }\n        if (result.forEach) {\n            result.forEach(cback);\n        }\n        if (done) {\n            done();\n        }\n    });\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (UserdataReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!***************************************!*\
  !*** ../gator/js/lib/GenomeReader.js ***!
  \***************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Service__ = __webpack_require__(/*! ./Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bean__ = __webpack_require__(/*! ../bean */ 0);\n/** @fileOverview   Classes for reading data from MyGene.info */\n\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Mygene.info for given sequences\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst GenomeReader = __WEBPACK_IMPORTED_MODULE_1__Service__[\"a\" /* default */].buildService(function (data) {\n    this._raw_data = data;\n    return this;\n});\n\nGenomeReader.SERVICE_URL = 'http://mygene.info/v2/query';\nGenomeReader.prototype.requestData = function () {\n    this.acc = this.agi;\n\n    if (!this.geneid) {\n        return {\n            type: \"GET\",\n            dataType: \"json\",\n            url: 'https://mygene.info/v2/query',\n            data: { 'q': 'uniprot:' + this.acc.toUpperCase(),\n                'fields': 'entrezgene',\n                'email': 'joshi%40sund.ku.dk'\n            }\n        };\n    } else if (!this.acc) {\n        this.acc = this.agi = \"\" + this.geneid;\n    }\n\n    if (!this.exons) {\n        return {\n            type: \"GET\",\n            url: 'https://mygene.info/v3/gene/' + this.geneid,\n            dataType: \"json\",\n            data: {\n                'fields': 'exons_hg19,uniprot.Swiss-Prot'\n            }\n        };\n    }\n\n    if (this.tried_isoform) {\n        return __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].GatorDataReader.authenticate().then(url_base => {\n            this.tried_bare = true;\n            return {\n                type: \"GET\",\n                dataType: \"json\",\n                auth: __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].GATOR_AUTH_TOKEN,\n                api_key: __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].GATOR_CLIENT_ID,\n                url: url_base + '/data/latest/combined/' + this.swissprot.toUpperCase()\n            };\n        });\n    }\n\n    return __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].GatorDataReader.authenticate().then(url_base => {\n        this.tried_isoform = true;\n        return {\n            type: \"GET\",\n            dataType: \"json\",\n            auth: __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].GATOR_AUTH_TOKEN,\n            api_key: __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].GATOR_CLIENT_ID,\n            url: url_base + '/data/latest/combined/' + this.swissprot.toUpperCase() + '-1'\n        };\n    });\n\n    return {\n        type: \"GET\",\n        dataType: \"txt\",\n        url: \"https://www.uniprot.org/mapping/\",\n        data: {\n            \"from\": \"REFSEQ_NT_ID\",\n            \"to\": \"ACC\",\n            \"format\": \"tab\",\n            \"query\": Object.keys(this.exons).join(' ')\n        }\n    };\n};\n\nlet update_structure = data => {\n    let result = {};\n    for (let transcript of data) {\n        result[transcript.transcript] = transcript;\n        transcript.exons = transcript.position;\n        delete transcript.position;\n    }\n    return result;\n};\n\n(function (serv) {\n    var defaultDataReceived = serv.prototype._dataReceived;\n\n    serv.prototype._dataReceived = function (data, status) {\n        var self = this;\n        if (data.data && status === \"db\") {\n            self.sequences = [{ \"agi\": \"genome\" }];\n            Object.keys(data.data).forEach(function (uniprot) {\n                self.sequences.push({ \"agi\": uniprot.toLowerCase() });\n            });\n            return defaultDataReceived.call(this, data, status);\n        }\n        if (status < 200 || status >= 400) {\n            return defaultDataReceived.call(this, null, status);\n        }\n\n        if (!this.geneid) {\n            this.geneid = data.hits[0].entrezgene;\n            this.retrieve(this.acc || this.agi);\n            return;\n        }\n        if (!this.exons) {\n            this.exons = update_structure(data.exons_hg19 || data.exons);\n            this.swissprot = (data.uniprot || {})['Swiss-Prot'].toLowerCase();\n            if (!this.nt_mapping) {\n                this.retrieve(this.acc || this.agi);\n                return;\n            }\n            data = this.nt_mapping.map(function (map) {\n                return map.join('\\t');\n            }).join('\\n');\n        }\n        data = data.data.filter(dat => dat.dataset == 'uniprot_refseqnt');\n\n        if (data.length > 0) {\n            data = data[0].data.map(mapping => [mapping.refseqnt.replace(/\\..*/, ''), mapping.uniprot].join('\\t')).join('\\n');\n        } else {\n            if (this.tried_isoform && !this.tried_bare) {\n                this.retrieve(this.acc || this.agi);\n                return;\n            }\n            data = \"\";\n        }\n\n        var mapped = {};\n        self.sequences = [{ \"agi\": \"genome\" }];\n        (data || \"\").split('\\n').forEach(function (row) {\n            var bits = row.split('\\t');\n            if (!bits[1]) {\n                return;\n            }\n            var uniprot = bits[1].toLowerCase().replace(/-\\d+/, '');\n            var nuc = bits[0];\n            nuc = nuc.replace(/\\..*$/, '');\n            if (!self.exons[nuc]) {\n                return;\n            }\n            if (!self.agi || !self.acc) {\n                self.acc = uniprot;\n                self.agi = uniprot;\n            }\n\n            if (!mapped[uniprot]) {\n                mapped[uniprot] = [];\n            }\n            self.exons[nuc]._id = nuc;\n            mapped[uniprot].push(self.exons[nuc]);\n            self.sequences.push({ \"agi\": uniprot.toLowerCase() });\n        });\n        return defaultDataReceived.call(this, { \"data\": mapped }, status);\n    };\n})(GenomeReader);\n\nGenomeReader.Result.prototype.getSequences = function () {\n    var results = [];\n    var cds_data = this._raw_data.data;\n    var uniprots = Object.keys(cds_data);\n    let min, max;\n    min = max = null;\n    uniprots.forEach(function (uniprot) {\n        var ends = cds_data[uniprot].map(function (cd) {\n            if (Array.isArray(cd)) {\n                cd = cd.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n            }\n            return [cd.txstart, cd.txend];\n        });\n        ends.forEach(function (cd) {\n            if (!min || cd[0] < min) {\n                min = cd[0];\n            }\n            if (!max || cd[1] > max) {\n                max = cd[1];\n            }\n        });\n    });\n    results = [Array(Math.floor((max - min) / 3)).join('.')];\n    this.min = min;\n    this.max = max;\n    return results;\n};\n\nGenomeReader.Result.prototype.getIntrons = function (margin) {\n    var self = this;\n    var results = [];\n    var uprots = Object.keys(self._raw_data.data);\n    uprots.forEach(function (up) {\n        var cds = self._raw_data.data[up];\n        cds.forEach(function (target_cds) {\n            if (Array.isArray(target_cds)) {\n                target_cds = target_cds.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n                if (!target_cds) {\n                    return null;\n                }\n            }\n\n            var exons = target_cds.exons;\n            var target_position;\n\n            for (var i = 0; i < exons.length; i++) {\n                if (i == 0) {\n                    results.push([self.min, exons[i][0] - margin]);\n                } else {\n                    results.push([exons[i - 1][1] + margin, exons[i][0] - margin]);\n                }\n                if (i == exons.length - 1) {\n                    results.push([exons[i][1] + margin, self.max]);\n                }\n                if (results.slice(-1)[0][0] > results.slice(-1)[0][1]) {\n                    results.splice(results.length - 1, 1);\n                }\n            }\n        });\n    });\n    return results;\n};\n\nGenomeReader.prototype.proteinLength = function (target_cds) {\n    var exons = target_cds.exons;\n    var total = 0;\n    for (var i = 0; i < exons.length; i++) {\n        if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n            continue;\n        }\n        if (target_cds.cdsend < exons[i][0]) {\n            continue;\n        }\n\n        var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n        var end = target_cds.cdsend < exons[i][1] ? target_cds.cdsend : exons[i][1];\n        total += end - start;\n    }\n    return Math.floor(total / 3) - 1;\n};\n\nGenomeReader.prototype.calculateSequencePositionFromProteinPosition = function (idx, pos) {\n    var self = this;\n    var wanted_identifier = idx;\n    var cds = self.result._raw_data.data[wanted_identifier.toLowerCase()];\n    if (!cds) {\n        return -1;\n    }\n\n    if (!cds.txstart) {\n        cds = cds.map(function (cd) {\n            if (Array.isArray(cd)) {\n                cd = cd.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n                if (!cd) {\n                    return null;\n                }\n            }\n            return cd;\n        });\n    }\n\n    var target_cds = cds[0] || {};\n    var exons = target_cds.exons || [];\n\n    var position_genome = Math.floor(pos / 3);\n\n    var target_position = 0;\n\n    if (pos < target_cds.cdsstart) {\n        target_position = 6;\n        if (target_cds.strand == -1) {\n            target_position = 3;\n        }\n    }\n\n    if (pos > target_cds.cdsend) {\n        target_position = self.proteinLength(target_cds) * 3;\n        if (target_cds.strand == 1) {\n            target_position += 3;\n        }\n    }\n    if (target_position == 0) {\n        for (var i = 0; i < exons.length; i++) {\n            if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n                continue;\n            }\n            var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n            var end = target_cds.cdsend < exons[i][1] ? target_cds.cdsend : exons[i][1];\n\n            if (pos < start) {\n                break;\n            }\n\n            if (pos <= end && pos >= start) {\n                target_position += pos - start;\n                break;\n            } else {\n                target_position += end - start;\n            }\n        }\n    }\n    target_position = Math.floor(target_position / 3) - 1;\n\n    if (target_cds.strand == -1) {\n        target_position = self.proteinLength(target_cds) - target_position;\n    }\n\n    return target_position;\n};\n\nGenomeReader.prototype.calculateProteinPositionForSequence = function (idx, pos) {\n    var self = this;\n    var wanted_identifier = idx;\n    var cds = self.result._raw_data.data[wanted_identifier.toLowerCase()];\n    if (!cds) {\n        return -1;\n    }\n\n    if (!cds.txstart) {\n        cds = cds.map(function (cd) {\n            if (Array.isArray(cd)) {\n                cd = cd.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n                if (!cd) {\n                    return null;\n                }\n            }\n            return cd;\n        });\n    }\n\n    var target_cds = cds[0] || {};\n    var exons = target_cds.exons || [];\n\n    if (target_cds.strand == -1) {\n        pos = self.proteinLength(target_cds) - pos;\n    }\n    var position_genome = pos * 3;\n\n    var target_position;\n\n    for (var i = 0; i < exons.length; i++) {\n        if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n            continue;\n        }\n        var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n        var bases = exons[i][1] - start;\n        if (bases >= position_genome) {\n            target_position = start + position_genome;\n            break;\n        } else {\n            position_genome -= bases;\n        }\n    }\n    return target_position;\n};\n\nGenomeReader.prototype.calculatePositionForSequence = function (idx, pos) {\n    var self = this;\n    var wanted_identifier = self.sequences[idx].agi;\n    var empty_regions = [];\n    var calculated_pos = pos;\n\n    if (wanted_identifier == 'genome') {\n        // Don't change the genome identifier\n    } else {\n        calculated_pos = self.calculateProteinPositionForSequence(idx, pos);\n    }\n\n    for (var i = 0; i < empty_regions.length; i++) {\n        if (pos > empty_regions[i][1]) {\n            calculated_pos -= empty_regions[i][1] - empty_regions[i][0];\n        }\n        if (pos < empty_regions[i][1] && pos > empty_regions[i][0]) {\n            calculated_pos = -1;\n        }\n    }\n\n    return calculated_pos;\n};\n\n(function (serv) {\n    var get_exon_boxes = function get_exon_boxes(result, uniprot) {\n        var cds_data = result._raw_data.data;\n        if (uniprot) {\n            console.log('Filtering exons so we only show', uniprot);\n        }\n        var uniprots = Object.keys(cds_data);\n        var max = result.max;\n        var min = result.min;\n        var return_data = [];\n        var base_offset = 0;\n        uniprots.filter(up => uniprot ? up === (uniprot || '').toLowerCase() : true).forEach(function (uniprot) {\n            var ends = cds_data[uniprot].map(function (cd, idx) {\n                if (Array.isArray(cd)) {\n                    cd = cd.filter(function (c) {\n                        return c.chr.match(/^[\\dXx]+$/);\n                    })[0];\n                    if (!cd) {\n                        return;\n                    }\n                }\n\n                var exons = cd.exons;\n                var color = idx == 0 ? '#999' : '#f99';\n                exons.forEach(function (exon) {\n                    return_data.push({ \"aa\": 1 + exon[0], \"type\": \"box\", \"width\": exon[1] - exon[0], \"options\": { \"offset\": base_offset, \"height_scale\": 1, \"fill\": color, \"merge\": false } });\n                    if (cd.strand > 0) {\n                        return_data.push({ \"aa\": exon[1] - 1, \"type\": \"marker\", \"options\": { \"height\": 4, \"content\": { \"type\": \"right_triangle\", \"fill\": '#aaa' }, \"offset\": base_offset + 2, \"bare_element\": true } });\n                    } else {\n                        return_data.push({ \"aa\": exon[0] + 1, \"type\": \"marker\", \"options\": { \"height\": 4, \"content\": { \"type\": \"left_triangle\", \"fill\": '#aaa' }, \"offset\": base_offset + 2, \"bare_element\": true } });\n                    }\n                });\n                return_data.push({ \"aa\": cd.cdsstart, \"type\": \"box\", \"width\": 1, \"options\": { \"fill\": \"#0000ff\", \"height_scale\": 2, \"offset\": base_offset - 2, \"merge\": false } });\n                return_data.push({ \"aa\": cd.cdsend, \"type\": \"box\", \"width\": 1, \"options\": { \"fill\": \"#0000ff\", \"height_scale\": 2, \"offset\": base_offset - 2, \"merge\": false } });\n                base_offset += 1;\n            });\n            base_offset += 2;\n        });\n        return return_data;\n    };\n\n    var get_removed_labels = function get_removed_labels(result) {\n        var removed = result.removed_regions || [];\n        var results = [];\n        var max = result.max;\n        var min = result.min;\n        var cds_data = result._raw_data.data;\n        var uniprots = Object.keys(cds_data);\n        var total = uniprots.reduce(function (prev, up) {\n            return prev + cds_data[up].length;\n        }, 0);\n        removed.forEach(function (vals) {\n            var start = vals[0];\n            var end = vals[1];\n            var start_txt = Math.floor(start % 1e6 / 1000) + \"kb\";\n            var end_txt = Math.floor(end % 1e6 / 1000) + \"kb\";\n            results.push({ \"aa\": start - 1, \"type\": \"box\", width: end - start + 3, \"options\": { \"fill\": \"#999\", \"height_scale\": total * 3, \"offset\": -1 * total } });\n            results.push({ \"aa\": start - 3, \"type\": \"text\", \"options\": { \"txt\": start_txt, \"fill\": \"#000\", \"height\": 4, \"offset\": -4, \"align\": \"right\" } });\n            results.push({ \"aa\": end + 3, \"type\": \"text\", \"options\": { \"txt\": end_txt, \"fill\": \"#000\", \"height\": 4, \"offset\": 4, \"align\": \"left\" } });\n        });\n        return results;\n    };\n\n    var calculate_removed_regions = function calculate_removed_regions(result, margin) {\n        var introns = result.getIntrons(margin);\n\n        var intervals = [{ \"index\": result.min - 2, \"start\": true, \"idx\": -1 }, { \"index\": result.min, \"start\": false, \"idx\": -1 }];\n        introns.forEach(function (intron, idx) {\n            intervals.push({ \"index\": intron[0], \"start\": true, \"idx\": idx });\n            intervals.push({ \"index\": intron[1], \"start\": false, \"idx\": idx });\n        });\n\n        intervals.sort(function (a, b) {\n            if (a.index < b.index) {\n                return -1;\n            }\n            if (a.index > b.index) {\n                return 1;\n            }\n            if (a.index == b.index) {\n                return a.start ? -1 : 1;\n            }\n        });\n        var results = [];\n        intervals.forEach(function (intr, idx) {\n            if (intr.start && intervals[idx + 1] && intervals[idx + 1].start == false) {\n                if (intr.index != intervals[idx + 1].index && intervals[idx + 1].index != result.min) {\n                    results.push([intr.index, intervals[idx + 1].index]);\n                }\n            }\n        });\n        result.removed_regions = results;\n    };\n    var generate_scaler_function = function generate_scaler_function(reader) {\n        return function (in_pos, layer, inverse) {\n            var pos = in_pos;\n\n            if (!reader.result) {\n                return inverse ? pos * 3 : Math.floor(pos / 3);\n            }\n\n            var introns = reader.result.removed_regions || [];\n\n            if (inverse) {\n                pos = in_pos * 3;\n                calculated_pos = pos;\n                for (var i = 0; i < introns.length && pos > 0; i++) {\n                    var left_exon = i > 0 ? introns[i - 1] : [null, reader.result.min];\n                    var right_exon = introns[i] || [reader.result.max, null];\n                    pos -= right_exon[0] - left_exon[1];\n                    if (pos > 0) {\n                        calculated_pos += introns[i][1] - introns[i][0];\n                    }\n                }\n                return calculated_pos + reader.result.min;\n            }\n\n            var calculated_pos = pos - reader.result.min;\n            for (var i = 0; i < introns.length; i++) {\n                if (pos > introns[i][1]) {\n                    calculated_pos -= introns[i][1] - introns[i][0];\n                }\n                if (pos < introns[i][1] && pos > introns[i][0]) {\n                    calculated_pos = introns[i][1] - reader.result.min;\n                }\n            }\n            if (calculated_pos < 3) {\n                calculated_pos = 3;\n            }\n            return Math.floor(calculated_pos / 3);\n        };\n    };\n    Object.defineProperty(serv.prototype, 'exon_margin', {\n        set: function set(val) {\n            this._exon_margin = val;\n            if (this.result) {\n                calculate_removed_regions(this.result, val);\n                this.redrawIntrons();\n            }\n        },\n        get: function get() {\n            return this._exon_margin;\n        }\n    });\n\n    var redrawIntrons = function redrawIntrons(renderer, controller_name, scaler_function) {\n        var labs = [];\n        var zoomCheck = function zoomCheck() {\n            if (labs.length < 1 || !labs[0].parentNode) {\n                return;\n            }\n            var hidden = false;\n            for (var i = 0; !hidden && i < labs.length - 3; i += 3) {\n                if (labs[i].hasAttribute('display')) {\n                    hidden = true;\n                    continue;\n                }\n                if (labs[i].getBoundingClientRect().right > labs[i + 3].getBoundingClientRect().left) {\n                    hidden = true;\n                }\n            }\n            labs.forEach(function (lab) {\n                if (lab.nodeName == 'rect') {\n                    return;\n                }if (hidden) {\n                    lab.setAttribute('display', 'none');\n                } else {\n                    lab.removeAttribute('display');\n                }\n            });\n        };\n        renderer.bind('zoomChange', zoomCheck);\n\n        return function () {\n            var result = this.result;\n            renderer.sequence = Array(scaler_function(result.max)).join('.');\n\n            if (labs.length > 0) {\n                labs.forEach(function (lab) {\n                    renderer.remove(controller_name, lab);\n                });\n                labs = [];\n            }\n            var proxy_reader = {\n                agi: controller_name,\n                gotResult: function gotResult() {\n                    labs = renderer.renderObjects(controller_name, get_removed_labels(result));\n                    renderer.refresh();\n                    zoomCheck();\n                }\n            };\n            __WEBPACK_IMPORTED_MODULE_1__Service__[\"a\" /* default */].prototype.registerSequenceRenderer.call(proxy_reader, renderer);\n            proxy_reader.gotResult();\n        };\n    };\n\n    serv.prototype.setupSequenceRenderer = function (renderer) {\n        var self = this;\n        renderer.addAxisScale('genome', function (pos, layer, inverse) {\n            if (layer && layer.scales.has('genomic')) {\n                return pos;\n            }\n            let all_scales = Object.keys(self.result._raw_data.data);\n            let identifier = layer.name;\n            for (let scale of all_scales) {\n                if (layer.scales.has(scale.toUpperCase()) || layer.scales.has(scale.toLowerCase())) {\n                    identifier = scale;\n                }\n            }\n            if (inverse) {\n                return self.calculateSequencePositionFromProteinPosition(identifier, pos);\n            }\n            return self.calculateProteinPositionForSequence(identifier, pos);\n        });\n        var controller_name = 'cds';\n        var redraw_alignments = function redraw_alignments(sequence_index) {\n            if (!sequence_index) {\n                sequence_index = 0;\n            }\n            __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].registerLayer(controller_name, { 'fullname': 'Exons', 'color': '#000000' });\n            __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(controller_name).scales.add('genomic');\n\n            if (renderer.trackOrder.indexOf(controller_name) < 0) {\n                renderer.trackOrder.push(controller_name);\n            }\n            renderer.showLayer(controller_name);\n\n            var result = this.result;\n\n            var aligned = result.getSequences();\n            var scaler_function = generate_scaler_function(self);\n\n            renderer.addAxisScale('removeIntrons', scaler_function);\n\n            calculate_removed_regions(self.result, self.exon_margin || 300);\n\n            if (!renderer.sequence) {\n                // Not sure what to do with this bit here\n\n                renderer.setSequence(Array(scaler_function(result.max)).join('.'))(function () {\n                    redraw_alignments(sequence_index);\n                });\n                return;\n            } else {\n                renderer.sequence = Array(scaler_function(result.max)).join('.');\n                renderer.redrawAxis();\n            }\n            var proxy_reader = {\n                agi: controller_name,\n                gotResult: function gotResult() {\n                    renderer.renderObjects(controller_name, get_exon_boxes(result, self.reviewed ? self.swissprot : self.uniprot));\n                }\n            };\n            __WEBPACK_IMPORTED_MODULE_1__Service__[\"a\" /* default */].prototype.registerSequenceRenderer.call(proxy_reader, renderer);\n            proxy_reader.gotResult();\n\n            self.redrawIntrons = redrawIntrons(renderer, controller_name, scaler_function);\n            self.redrawIntrons();\n        };\n\n        this.bind('resultReceived', redraw_alignments);\n    };\n})(GenomeReader);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GenomeReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!****************************************************!*\
  !*** ../gator/js/lib/CondensedSequenceRenderer.js ***!
  \****************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SequenceRenderer__ = __webpack_require__(/*! ./SequenceRenderer */ 19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__CondensedSequenceRendererNavigation__ = __webpack_require__(/*! ./CondensedSequenceRendererNavigation */ 20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__bean__ = __webpack_require__(/*! ../bean */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__SVGCanvas__ = __webpack_require__(/*! ./SVGCanvas */ 12);\n/**\n *  @fileOverview   Basic classes and definitions for an SVG-based sequence renderer\n */\n\n\n\n\n\n\n\nconst svgns = 'http://www.w3.org/2000/svg';\n\n/** Default class constructor\n *  @class      Renders a sequence using a condensed track-based display\n *  @param      {Element} sequenceContainer Container element that the sequence currently is found in, and also \n *              the container that data will be re-inserted into.\n *  @extends    MASCP.SequenceRenderer\n */\nconst CondensedSequenceRenderer = function CondensedSequenceRenderer(sequenceContainer) {\n    this._RS = 50;\n    __WEBPACK_IMPORTED_MODULE_1__SequenceRenderer__[\"a\" /* default */].apply(this, arguments);\n    var self = this;\n\n    // Create a common layer for the primary sequence\n    __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].registerLayer('primarySequence', { 'fullname': 'Primary Sequence' });\n\n    CondensedSequenceRenderer.Zoom(self);\n    var resizeTimeout;\n    var resize_callback = function resize_callback() {\n        sequenceContainer.cached_width = sequenceContainer.getBoundingClientRect().width;\n    };\n    window.addEventListener('resize', function () {\n        clearTimeout(resizeTimeout);\n        if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(resize_callback);\n        } else {\n            resizeTimeout = setTimeout(resize_callback, 100);\n        }\n    }, true);\n    sequenceContainer.cached_width = sequenceContainer.getBoundingClientRect().width;\n\n    // We want to unbind the default handler for sequence change that we get from\n    // inheriting from CondensedSequenceRenderer\n    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this, 'sequenceChange');\n\n    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this, 'sequenceChange', function () {\n        for (var layername in __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers) {\n            if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers.hasOwnProperty(layername)) {\n                __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers[layername].disabled = true;\n            }\n        }\n        self.zoom = self.zoom;\n    });\n\n    return this;\n};\n\nCondensedSequenceRenderer.prototype = new __WEBPACK_IMPORTED_MODULE_1__SequenceRenderer__[\"a\" /* default */]();\n\n(function (clazz) {\n    var createCanvasObject = function createCanvasObject() {\n        var renderer = this;\n\n        if (this._object) {\n            if (typeof svgweb != 'undefined') {\n                svgweb.removeChild(this._object, this._object.parentNode);\n            } else {\n                this._object.parentNode.removeChild(this._object);\n            }\n            this._canvas = null;\n            this._object = null;\n        }\n        var canvas;\n        if (document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\")) {\n            var native_canvas = this.win().document.createElementNS(svgns, 'svg');\n            native_canvas.setAttribute('width', '100%');\n            native_canvas.setAttribute('height', '100%');\n            this._container.appendChild(native_canvas);\n            this._canvas = native_canvas;\n            canvas = {\n                'addEventListener': function addEventListener(name, load_func) {\n                    native_canvas.contentDocument = { 'rootElement': native_canvas };\n                    load_func.call(native_canvas);\n                }\n            };\n        }\n\n        canvas.addEventListener('load', function () {\n            var container_canv = this;\n            Object(__WEBPACK_IMPORTED_MODULE_4__SVGCanvas__[\"a\" /* default */])(container_canv);\n            if (renderer.font_order) {\n                container_canv.font_order = renderer.font_order;\n            }\n            var group = container_canv.makeEl('g');\n\n            var canv = container_canv.makeEl('svg');\n            canv.RS = renderer._RS;\n            Object(__WEBPACK_IMPORTED_MODULE_4__SVGCanvas__[\"a\" /* default */])(canv);\n            if (renderer.font_order) {\n                canv.font_order = renderer.font_order;\n            }\n            group.appendChild(canv);\n            container_canv.appendChild(group);\n\n            var supports_events = true;\n\n            try {\n                var noop = canv.addEventListener;\n            } catch (err) {\n                supports_events = false;\n            }\n\n            var canvas_rect = canv.makeEl('rect', { 'x': '-10%',\n                'y': '-10%',\n                'width': '120%',\n                'height': '120%',\n                'style': 'fill: #ffffff;' });\n\n            var left_fade = container_canv.makeEl('rect', { 'x': '0',\n                'y': '0',\n                'width': '50',\n                'height': '100%',\n                'style': 'fill: url(#left_fade);' });\n\n            var right_fade = container_canv.makeEl('rect', { 'x': '100%',\n                'y': '0',\n                'width': '25',\n                'height': '100%',\n                'transform': 'translate(-15,0)',\n                'style': 'fill: url(#right_fade);' });\n\n            container_canv.appendChild(left_fade);\n            container_canv.appendChild(right_fade);\n\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canv, 'pan', function () {\n                if (canv.currentTranslateCache.x >= 0) {\n                    left_fade.setAttribute('visibility', 'hidden');\n                } else {\n                    left_fade.setAttribute('visibility', 'visible');\n                }\n                if (renderer.rightVisibleResidue() < renderer.sequence.length) {\n                    right_fade.setAttribute('visibility', 'visible');\n                } else {\n                    right_fade.setAttribute('visibility', 'hidden');\n                }\n            });\n\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canv, '_anim_begin', function () {\n                left_fade.setAttribute('visibility', 'hidden');\n                right_fade.setAttribute('visibility', 'hidden');\n            });\n\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canv, '_anim_end', function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(canv, 'pan');\n            });\n\n            canv.currentTranslateCache = { x: 0, y: 0 };\n\n            if (canv.currentTranslateCache.x >= 0) {\n                left_fade.setAttribute('visibility', 'hidden');\n            }\n            right_fade.setAttribute('visibility', 'hidden');\n\n            var nav_group = container_canv.makeEl('g');\n            container_canv.appendChild(nav_group);\n            var nav_canvas = container_canv.makeEl('svg');\n            nav_group.appendChild(nav_canvas);\n\n            group.style.willChange = 'transform';\n\n            canv.setScale = function (scale) {\n                var curr_transform = (group._cached_transform || '').replace(/scale\\([^\\)]+\\)/, '');\n                if (scale !== null) {\n                    curr_transform = (' scale(' + scale + ') ' + curr_transform).replace(/\\s+/g, ' ');\n                }\n                group._cached_transform = curr_transform;\n                group.style.transform = curr_transform;\n            };\n\n            nav_canvas.setScale = function (scale) {\n                var curr_transform = (nav_group._cached_transform || '').replace(/scale\\([^\\)]+\\)/, '');\n                if (scale !== null) {\n                    curr_transform = (curr_transform + ' scale(' + scale + ') ').replace(/\\s+/g, ' ');\n                }\n                nav_group._cached_transform = curr_transform;\n                nav_group.style.transform = curr_transform;\n            };\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canv, 'zoomChange', () => {\n                if (!renderer.fixed_size) {\n                    return;\n                }\n                canv.setScale(1);\n                nav_canvas.setScale(1);\n                requestAnimationFrame(() => {\n                    let container_height = container_canv.getBoundingClientRect().height;\n                    let canv_height = canv.getBoundingClientRect().height;\n                    let current_scale = (group._cached_transform || 'scale(1)').match(/scale\\(([\\d\\.]+)\\)/) || '1';\n                    canv.setScale((1 * container_height / canv_height).toFixed(2));\n                    nav_canvas.setScale((1 * container_height / canv_height).toFixed(2));\n                });\n            });\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canv, 'panend', () => {\n                let evObj = new Event('panned', { bubbles: true, cancelable: true });\n                canv.dispatchEvent(evObj);\n            });\n\n            var ua = window.navigator.userAgent;\n            var is_explorer = false;\n            if (ua.indexOf('Edge/') >= 0) {\n                is_explorer = true;\n            }\n\n            canv.setCurrentTranslateXY = function (x, y) {\n                var curr_transform = group._cached_transform || '';\n                curr_transform = (curr_transform.replace(/translate\\([^\\)]+\\)/, '') + ' translate(' + x + 'px, ' + y + 'px) ').replace(/\\s+/g, ' ');\n                group._cached_transform = curr_transform;\n                if (!is_explorer) {\n                    group.style.transform = curr_transform;\n                } else {\n                    group.setAttribute('transform', curr_transform.replace(/px/g, ''));\n                }\n\n                this.currentTranslateCache.x = x;\n                this.currentTranslateCache.y = y;\n            };\n            canv.setCurrentTranslateXY(0, 0);\n\n            nav_canvas.setCurrentTranslateXY = function (x, y) {\n                var curr_transform = (nav_group.getAttribute('transform') || '').replace(/translate\\([^\\)]+\\)/, '');\n                curr_transform = curr_transform + ' translate(' + x + ', ' + y + ') ';\n                nav_group.setAttribute('transform', curr_transform);\n                this.currentTranslate.x = x;\n                this.currentTranslate.y = y;\n            };\n            nav_canvas.setCurrentTranslateXY(0, 0);\n\n            addNav.call(renderer, nav_canvas);\n\n            var nav = renderer.navigation;\n            var old_show = nav.show,\n                old_hide = nav.hide;\n            nav.show = function () {\n                old_show.apply(nav, arguments);\n                canv.style.GomapScrollLeftMargin = 100 * renderer._RS / renderer.zoom;\n            };\n\n            nav.hide = function () {\n                old_hide.apply(nav, arguments);\n                canv.style.GomapScrollLeftMargin = 1000;\n            };\n\n            renderer._container_canvas = container_canv;\n            container_canv.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n            container_canv.setAttribute('width', '100%');\n            container_canv.setAttribute('height', '100%');\n            canv.appendChild(canv.makeEl('rect', { 'x': 0, 'y': 0, 'opacity': 0, 'width': '100%', 'height': '100%', 'stroke-width': '0', 'fill': '#ffffff' }));\n            renderer._object = this;\n            renderer._canvas = canv;\n            renderer._canvas._canvas_height = 0;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(renderer, 'svgready');\n        }, false);\n\n        return canvas;\n    };\n\n    var wheel_fn = function wheel_fn(e) {\n        e.stopPropagation();\n        return true;\n    };\n\n    var addNav = function addNav(nav_canvas) {\n        this.navigation = new CondensedSequenceRenderer.Navigation(nav_canvas, this);\n        var nav = this.navigation;\n        var self = this;\n\n        var hide_chrome = function hide_chrome() {\n            nav.demote();\n        };\n\n        var show_chrome = function show_chrome() {\n            nav.promote();\n            nav.refresh();\n        };\n\n        if (!__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].IE) {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._canvas, 'panstart', hide_chrome);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._canvas, 'panend', show_chrome);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._canvas, '_anim_begin', hide_chrome);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._canvas, '_anim_end', show_chrome);\n            nav_canvas.addEventListener('DOMMouseScroll', wheel_fn, false);\n            nav_canvas.addEventListener('wheel', wheel_fn, false);\n            nav_canvas.onmousewheel = wheel_fn;\n        }\n    };\n    var drawAminoAcids = function drawAminoAcids() {\n        var renderer = this;\n        var aas = renderer.addTextTrack(this.sequence, this._canvas.set());\n        aas.attr({ 'y': 0.5 * renderer._axis_height * renderer._RS });\n        renderer.select = function () {\n            var vals = Array.prototype.slice.call(arguments);\n            var from = vals[0];\n            var to = vals[1];\n            this.moveHighlight.apply(this, vals);\n        };\n        var zoomchange = function zoomchange() {\n            aas.attr({ 'y': 0.5 * renderer._axis_height * renderer._RS });\n        };\n        var canvas = renderer._canvas;\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canvas, 'zoomChange', zoomchange);\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(aas, 'removed', function () {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(canvas, 'zoomChange', zoomchange);\n        });\n        return aas;\n    };\n    var mainDrawAxis;\n    var drawAxis = mainDrawAxis = function mainDrawAxis(canvas, lineLength) {\n        var RS = this._RS;\n        var self = this;\n        var x = 0,\n            i = 0;\n\n        var axis = canvas.set();\n\n        var axis_back = canvas.rect(0, 0, lineLength, 1.5);\n        axis_back.setAttribute('fill', \"url('#\" + self.axis_pattern_id + \"')\");\n        axis_back.removeAttribute('stroke');\n        axis_back.removeAttribute('stroke-width');\n        axis_back.setAttribute('id', 'axis_back');\n\n        var base_axis_height = 30;\n\n        var all_labels = canvas.set();\n        var major_mark_labels = canvas.set();\n        var minor_mark_labels = canvas.set();\n        var thousand_mark_labels = canvas.set();\n        var minor_mark = 10;\n        var major_mark = 20;\n\n        if (this.sequence.length > 5000) {\n            minor_mark = 100;\n            major_mark = 200;\n        }\n        if (this.sequence.length > 1000) {\n            minor_mark = 20;\n            major_mark = 40;\n        }\n        for (i = 0; i < lineLength / 5; i++) {\n\n            var a_text = canvas.text(x - 0.5, 0, \"\" + x);\n            all_labels.push(a_text);\n\n            if (x % major_mark === 0 && x !== 0) {\n                major_mark_labels.push(a_text);\n            } else if (x % minor_mark === 0 && x !== 0) {\n                minor_mark_labels.push(a_text);\n            }\n            if (x % (250 * parseInt(this.sequence.length / 500)) === 0 && x !== 0) {\n                thousand_mark_labels.push(a_text);\n            }\n            x += 5;\n        }\n\n        for (i = 0; i < all_labels.length; i++) {\n            all_labels[i].style.textAnchor = 'middle';\n            all_labels[i].firstChild.setAttribute('dy', '1.5ex');\n        }\n\n        all_labels.attr({ 'pointer-events': 'none', 'text-anchor': 'middle', 'font-size': 7 * RS + 'pt' });\n        all_labels.hide();\n\n        self._axis_height = parseInt(base_axis_height / self.zoom);\n\n        var zoom_status = null;\n        var zoomchange = function zoomchange() {\n            var renderer = self;\n            renderer._axis_height = parseInt(base_axis_height / renderer.zoom);\n            var pattern = renderer._canvas.ownerSVGElement.getElementById(renderer.axis_pattern_id);\n\n            thousand_mark_labels.forEach(function (label) {\n                label.setAttribute('visibility', 'hidden');\n            });\n\n            if (this.zoom > 3.6) {\n                axis_back.setAttribute('transform', 'translate(-5,' + 0.3 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.25 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 10 * RS);\n                pattern.firstChild.setAttribute('x', 9.5 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n\n                minor_mark_labels.show();\n                major_mark_labels.show();\n                var text_scale = 0.15 * self._axis_height;\n                if (text_scale < 1) {\n                    text_scale = 1;\n                }\n                minor_mark_labels.attr({ 'font-size': text_scale * RS + 'pt', 'text-anchor': 'end' });\n                major_mark_labels.attr({ 'font-size': text_scale * RS + 'pt', 'text-anchor': 'end' });\n                if (this._visibleTracers && this._visibleTracers()) {\n                    this._visibleTracers().show();\n                }\n            } else if (this.zoom > 1.8) {\n\n                minor_mark_labels.hide();\n                major_mark_labels.show();\n                major_mark_labels.attr({ 'font-size': 0.5 * RS * self._axis_height + 'pt', 'text-anchor': 'middle' });\n                axis_back.setAttribute('transform', 'translate(-25,' + 0.5 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.3 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 20 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n                pattern.firstChild.setAttribute('x', '0');\n                if (this.tracers) {\n                    this.tracers.hide();\n                }\n            } else if (this.zoom > 0.2) {\n\n                if (this.tracers) {\n                    this.tracers.hide();\n                }\n                minor_mark_labels.hide();\n                major_mark_labels.show();\n                major_mark_labels.attr({ 'font-size': 0.5 * RS * self._axis_height + 'pt', 'text-anchor': 'middle' });\n                axis_back.setAttribute('transform', 'translate(-25,' + 0.5 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.3 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 50 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n\n                var last_right = -10000;\n                var changed = false;\n                major_mark_labels.forEach(function (label) {\n                    if (!label.cached_bbox) {\n                        label.cached_bbox = label.getBBox();\n                    }\n                    if (label.cached_bbox.x <= last_right + RS * 10 || parseInt(label.textContent) % 50 != 0) {\n                        label.setAttribute('visibility', 'hidden');\n                        changed = true;\n                    } else {\n                        label.setAttribute('visibility', 'visible');\n                        last_right = label.cached_bbox.x + label.cached_bbox.width;\n                    }\n                });\n                if (changed) {\n                    major_mark_labels[0].setAttribute('visibility', 'hidden');\n                }\n            } else {\n                if (this.tracers) {\n                    this.tracers.hide();\n                }\n                minor_mark_labels.hide();\n                major_mark_labels.hide();\n                thousand_mark_labels.show();\n                thousand_mark_labels.attr({ 'font-size': 0.5 * RS * self._axis_height + 'pt', 'text-anchor': 'middle' });\n\n                axis_back.setAttribute('transform', 'translate(-50,' + 0.85 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.1 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 250 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n\n                var last_right = -10000;\n                var changed = false;\n                thousand_mark_labels.forEach(function (label) {\n                    if (!label.cached_bbox) {\n                        label.cached_bbox = label.getBBox();\n                    }\n                    if (label.cached_bbox.x <= last_right + RS * 10 || parseInt(label.textContent) % 250 != 0) {\n                        label.setAttribute('visibility', 'hidden');\n                    } else {\n                        label.setAttribute('visibility', 'visible');\n                        last_right = label.cached_bbox.x + label.cached_bbox.width;\n                    }\n                });\n                if (changed) {\n                    thousand_mark_labels[0].setAttribute('visibility', 'hidden');\n                }\n            }\n        };\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canvas, 'zoomChange', zoomchange);\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(axis, 'removed', function () {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(canvas, 'zoomChange', zoomchange);\n            var remover = function remover(el) {\n                if (el.parentNode) {\n                    el.parentNode.removeChild(el);\n                }\n            };\n            axis_back.parentNode.removeChild(axis_back);\n            all_labels.forEach(remover);\n        });\n        return axis;\n    };\n\n    clazz.prototype.panTo = function (end, callback) {\n        var renderer = this;\n        var pos = renderer.leftVisibleResidue();\n        var delta = 1;\n        if (pos == end) {\n            if (callback) {\n                callback.call(null);\n            }\n            return;\n        }\n        if (pos > end) {\n            delta = -1;\n        }\n        requestAnimationFrame(function () {\n            renderer.setLeftVisibleResidue(pos);\n            pos += delta;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(renderer._canvas, 'panend');\n            if (pos !== end) {\n                requestAnimationFrame(arguments.callee);\n            } else {\n                if (callback) {\n                    callback.call(null);\n                }\n            }\n        });\n    };\n\n    clazz.prototype.zoomTo = function (zoom, residue, callback) {\n        var renderer = this;\n        var curr = renderer.zoom;\n        var delta = (zoom - curr) / 50;\n        let zoomchange = function zoomchange() {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(renderer, 'zoomChange', zoomchange);\n            delete renderer.zoomCenter;\n            if (callback) {\n                callback.call(null);\n            }\n        };\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(renderer, 'zoomChange', zoomchange);\n        if (residue) {\n            renderer.zoomCenter = residue == 'center' ? residue : { 'x': renderer._RS * residue };\n        } else {\n            renderer.zoom = zoom;\n            return;\n        }\n        let zoomer = () => {\n            renderer.zoom = curr;\n            curr += delta;\n            if (Math.abs(curr - zoom) > 0.01) {\n                requestAnimationFrame(zoomer);\n            }\n        };\n        requestAnimationFrame(zoomer);\n    };\n\n    clazz.prototype.showResidues = function (start, end) {\n        let residues_per_zoom_unit = this._container.clientWidth / this._RS;\n        let container_width = this._container.clientWidth;\n        let min_zoom_level = container_width / (2 * this.sequence.length);\n\n        if (!this.sequence) {\n            return;\n        }\n\n        let delta = end - start;\n        let target_zoom_level = min_zoom_level / (delta / this.sequence.length);\n        if (target_zoom_level === this.zoom) {\n            this.setLeftVisibleResidue(start);\n            return Promise.resolve();\n        }\n        this.zoomCenter = { x: Math.floor(0.5 * (end + start)) };\n        let zoomed = new Promise(resolve => {\n            let zoomchange = () => {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this, 'zoomChange', zoomchange);\n                delete this.zoomCenter;\n                this.setLeftVisibleResidue(start);\n                resolve();\n            };\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this, 'zoomChange', zoomchange);\n        });\n        this.zoom = target_zoom_level;\n\n        return zoomed;\n    };\n\n    clazz.prototype.setLeftVisibleResidue = function (val) {\n        var self = this;\n        self._canvas.setCurrentTranslateXY(self._canvas.width.baseVal.value * (1 - val / (self.sequence.length + self.padding + 2)) - self._canvas.width.baseVal.value, 0);\n    };\n\n    clazz.prototype.leftVisibleResidue = function () {\n        var self = this;\n        var val = Math.floor((self.sequence.length + self.padding + 2) * (1 - (self._canvas.width.baseVal.value + self._canvas.currentTranslateCache.x) / self._canvas.width.baseVal.value)) - 1;\n        if (val < 0) {\n            val = 0;\n        }\n        return val;\n    };\n\n    clazz.prototype.rightVisibleResidue = function () {\n        var self = this;\n        var container_width = self._container_canvas.parentNode.cached_width;\n        if (!container_width) {\n            container_width = self._container_canvas.parentNode.getBoundingClientRect().width;\n        }\n        var val = Math.floor(self.leftVisibleResidue() + (self.sequence.length + self.padding + 2) * (container_width / self._canvas.width.baseVal.value));\n        if (val > self.sequence.length) {\n            val = self.sequence.length;\n        }\n        return val;\n    };\n\n    clazz.prototype.addAxisScale = function (identifier, scaler) {\n        if (!this._scalers) {\n            this._scalers = [];\n        }\n        let scalers = this._scalers.filter(scale => scale.identifier !== identifier);\n        scalers.push(scaler);\n        this._scalers = scalers;\n        scaler.identifier = identifier;\n        return scaler;\n    };\n\n    clazz.prototype.refreshScale = function () {\n        var self = this;\n        var lays = Object.keys(this._layer_containers);\n        lays.forEach(function (lay) {\n            self._layer_containers[lay].forEach(function (el) {\n                if (el.move && el.aa) {\n                    var aa = self.scalePosition(el.aa, lay);\n                    var aa_width = self.scalePosition(el.aa + el.aa_width, lay);\n                    if (aa < 0) {\n                        aa *= -1;\n                    }\n                    if (aa_width < 0) {\n                        aa_width *= -1;\n                    }\n                    el.move(aa - 1, aa_width - aa);\n                }\n            });\n        });\n    };\n\n    clazz.prototype.scalePosition = function (aa, layer, inverse) {\n        var layer_obj = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(layer);\n        if (!layer_obj) {\n            console.log('Missing layer object for layer identifier', layer, 'making dummy layer scaled with identifier', layer);\n            layer_obj = { 'name': layer, 'scales': new Set() };\n            layer_obj.scales.add(layer);\n        }\n        let scaler_funcs = (this._scalers || []).concat([]);\n        var new_aa = (inverse ? scaler_funcs.reverse() : scaler_funcs).reduce((val, fn) => {\n            return fn(val, layer_obj, inverse);\n        }, aa);\n        return new_aa;\n    };\n\n    clazz.prototype.getAA = function (aa, layer, scale_name) {\n        return this.getAminoAcidsByPosition([aa], layer, scale_name).shift();\n    };\n\n    clazz.prototype.getAminoAcidsByPosition = function (aas, layer) {\n        var self = this;\n        var new_aas = aas.map(function (aa) {\n            return Math.abs(self.scalePosition(aa, layer));\n        });\n        var results = __WEBPACK_IMPORTED_MODULE_1__SequenceRenderer__[\"a\" /* default */].prototype.getAminoAcidsByPosition.call(this, new_aas);\n\n        for (var i = 0; i < new_aas.length; i++) {\n            if (results[i]) {\n                results[i].original_index = aas[i];\n            }\n        }\n        return results;\n    };\n\n    clazz.prototype.getAminoAcidsByPeptide = function (peptide, layer) {\n        layer = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(layer);\n        var self = this;\n        var positions = [];\n        var self_seq;\n        var identifier = layer.accession;\n        if (self.sequences) {\n            self_seq = self.sequences[self.sequences.map(function (seq) {\n                return (seq.agi || seq.acc || \"\").toLowerCase();\n            }).indexOf(identifier.toLowerCase())].toString();\n        } else {\n            self_seq = self.sequence;\n        }\n        var start = self_seq.indexOf(peptide);\n        for (var i = 0; i < peptide.length; i++) {\n            positions.push(start + i);\n        }\n        var results = self.getAminoAcidsByPosition(positions, layer);\n        if (results.length) {\n            results.addToLayer = function (layername, fraction, options) {\n                return results[0].addBoxOverlay(layername, results.length, fraction, options);\n            };\n        } else {\n            results.addToLayer = function () {};\n        }\n        return results;\n    };\n\n    clazz.prototype.win = function () {\n        if (this._container && this._container.ownerDocument && this._container.ownerDocument.defaultView) {\n            var return_val = this._container.ownerDocument.defaultView;\n            if (typeof return_val === 'object' && return_val.constructor !== Window) {\n                return_val = return_val[Object.keys(return_val)[0]];\n            }\n            return return_val;\n        }\n        return null;\n    };\n\n    clazz.prototype.setSequence = function (sequence) {\n        var new_sequence = this._cleanSequence(sequence);\n        if (new_sequence == this.sequence && new_sequence !== null) {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(this, 'sequenceChange');\n            return;\n        }\n\n        if (!new_sequence) {\n            return;\n        }\n\n        this.sequence = new_sequence;\n\n        delete this.sequences;\n\n        var seq_chars = this.sequence.split('');\n        var line_length = seq_chars.length;\n\n        if (line_length === 0) {\n            return;\n        }\n\n        var renderer = this;\n\n        var build_sequence_els = function build_sequence_els() {\n            var seq_els = [];\n            renderer.sequence.split('').forEach(function (aa, i) {\n                var el = {};\n                el._index = i;\n                el._renderer = renderer;\n                renderer._extendElement(el);\n                el.amino_acid = aa;\n                seq_els.push(el);\n            });\n            renderer._sequence_els = seq_els;\n        };\n\n        build_sequence_els();\n\n        var RS = this._RS;\n\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this, 'svgready');\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this, 'svgready', function (cnv) {\n            var canv = renderer._canvas;\n            canv.RS = RS;\n            canv.setAttribute('background', '#000000');\n            canv.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n\n            var defs = canv.makeEl('defs');\n            renderer._container_canvas.appendChild(defs);\n\n            defs.appendChild(canv.make_gradient('track_shine', '0%', '100%', ['#111111', '#aaaaaa', '#111111'], [0.5, 0.5, 0.5]));\n            defs.appendChild(canv.make_gradient('simple_gradient', '0%', '100%', ['#aaaaaa', '#888888'], [1, 1]));\n            defs.appendChild(canv.make_gradient('left_fade', '100%', '0%', ['#ffffff', '#ffffff'], [1, 0]));\n            defs.appendChild(canv.make_gradient('right_fade', '100%', '0%', ['#ffffff', '#ffffff'], [0, 1]));\n            defs.appendChild(canv.make_gradient('red_3d', '0%', '100%', ['#CF0000', '#540000'], [1, 1]));\n\n            renderer.gradients = [];\n            renderer.add3dGradient = function (color) {\n                defs.appendChild(canv.make_gradient('grad_' + color, '0%', '100%', [color, '#ffffff', color], [1, 1, 1]));\n                renderer.gradients.push(color);\n            };\n\n            var shadow = canv.makeEl('filter', {\n                'id': 'drop_shadow',\n                'filterUnits': 'objectBoundingBox',\n                'x': '-50%',\n                'y': '-50%',\n                'width': '200%',\n                'height': '200%'\n            });\n\n            shadow.appendChild(canv.makeEl('feGaussianBlur', { 'in': 'SourceGraphic', 'stdDeviation': '4', 'result': 'blur_out' }));\n            shadow.appendChild(canv.makeEl('feOffset', { 'in': 'blur_out', 'result': 'the_shadow', 'dx': '3', 'dy': '1' }));\n            shadow.appendChild(canv.makeEl('feBlend', { 'in': 'SourceGraphic', 'in2': 'the_shadow', 'mode': 'normal' }));\n\n            defs.appendChild(shadow);\n            var link_icon = canv.makeEl('svg', {\n                'width': '100%',\n                'height': '100%',\n                'id': 'new_link_icon',\n                'viewBox': '0 0 100 100',\n                'preserveAspectRatio': 'xMinYMin meet'\n            });\n\n            defs.appendChild(link_icon);\n\n            link_icon.appendChild(canv.makeEl('rect', {\n                'x': '12.5',\n                'y': '37.5',\n                'stroke-width': '3',\n                'width': '50',\n                'height': '50',\n                'stroke': '#ffffff',\n                'fill': 'none'\n            }));\n            link_icon.appendChild(canv.makeEl('path', {\n                'd': 'M 50.0,16.7 L 83.3,16.7 L 83.3,50.0 L 79.2,56.2 L 68.8,39.6 L 43.8,66.7 L 33.3,56.2 L 60.4,31.2 L 43.8,20.8 L 50.0,16.7 z',\n                'stroke-width': '3',\n                'stroke': '#999999',\n                'fill': '#ffffff'\n            }));\n\n            var plus_icon = canv.makeEl('svg', {\n                'width': '100%',\n                'height': '100%',\n                'id': 'plus_icon',\n                'viewBox': '0 0 100 100',\n                'preserveAspectRatio': 'xMinYMin meet'\n            });\n            plus_icon.appendChild(canv.plus(0, 0, 100 / canv.RS));\n\n            defs.appendChild(plus_icon);\n\n            var minus_icon = canv.makeEl('svg', {\n                'width': '100%',\n                'height': '100%',\n                'id': 'minus_icon',\n                'viewBox': '0 0 100 100',\n                'preserveAspectRatio': 'xMinYMin meet'\n            });\n            minus_icon.appendChild(canv.minus(0, 0, 100 / canv.RS));\n\n            defs.appendChild(minus_icon);\n            var axis_pattern_id = 'axis_pattern_' + new Date().getTime();\n            var pattern = canv.makeEl('pattern', {\n                'patternUnits': 'userSpaceOnUse',\n                'x': '0',\n                'y': '0',\n                'width': 10 * canv.RS,\n                'height': 2 * canv.RS,\n                'id': axis_pattern_id\n            });\n            renderer.axis_pattern_id = axis_pattern_id;\n\n            var line = canv.makeEl('rect', {\n                'x': '0',\n                'y': '0',\n                'width': '10%',\n                'height': '1000%',\n                'fill': '#000',\n                'stroke': '0'\n            });\n            pattern.appendChild(line);\n\n            defs.appendChild(pattern);\n\n            var self = this;\n            renderer._axis_height = 10;\n            var aas = drawAminoAcids.call(self, canv);\n            renderer.hideAxis = function () {\n                drawAxis = function drawAxis(canv) {\n                    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canv, 'zoomChange', function () {\n                        self._axis_height = 10 / self.zoom;\n                    });\n                    return {};\n                };\n                self._axis_height = 10 / self.zoom;\n                this.redrawAxis();\n            };\n            renderer.showAxis = function () {\n                drawAxis = mainDrawAxis;\n                this.redrawAxis();\n            };\n\n            var axis = drawAxis.call(self, canv, line_length);\n            renderer.redrawAxis = function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(axis, 'removed');\n                aas.forEach(function (aa) {\n                    if (aa.parentNode) {\n                        aa.parentNode.removeChild(aa);\n                    }\n                });\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(aas, 'removed');\n                axis = drawAxis.call(self, canv, renderer.sequence.length);\n                aas = drawAminoAcids.call(self, canv);\n\n                build_sequence_els();\n                renderer.refresh();\n            };\n            if (!renderer.hide_axis) {\n                this.showAxis();\n            } else {\n                this.hideAxis();\n            }\n\n            renderer._layer_containers = {};\n            renderer.enablePrintResizing();\n            renderer.enableScaling();\n            renderer.enableSelection();\n\n            // When we have a layer registered with the global MASCP object\n            // add a track within this renderer.\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */], 'layerRegistered', function (layer, rend) {\n                if (!rend || rend === renderer) {\n                    renderer.addTrack(layer);\n                }\n            });\n\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(renderer, 'sequenceChange');\n        });\n        var canvas = createCanvasObject.call(this);\n        if (!this._canvas) {\n            if (typeof svgweb != 'undefined') {\n                svgweb.appendChild(canvas, this._container);\n            } else {\n                this._container.appendChild(canvas);\n            }\n        }\n\n        var rend = this;\n        this.EnableHighlights();\n\n        var seq_change_func = function seq_change_func(other_func) {\n            if (!rend._canvas) {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(rend, 'sequenceChange', function () {\n                    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(rend, 'sequenceChange', arguments.callee);\n                    other_func.apply();\n                });\n            } else {\n                other_func.apply();\n            }\n        };\n\n        seq_change_func.ready = function (other_func) {\n            this.call(this, other_func);\n        };\n\n        return seq_change_func;\n    };\n})(CondensedSequenceRenderer);\n\n(function () {\n    var svgns = 'http://www.w3.org/2000/svg';\n    var add_import = function add_import(ownerdoc) {\n        if (!ownerdoc.ELEMENT_NODE) {\n            ownerdoc.ELEMENT_NODE = 1;\n            ownerdoc.ATTRIBUTE_NODE = 2;\n            ownerdoc.TEXT_NODE = 3;\n            ownerdoc.CDATA_SECTION_NODE = 4;\n            ownerdoc.ENTITY_REFERENCE_NODE = 5;\n            ownerdoc.ENTITY_NODE = 6;\n            ownerdoc.PROCESSING_INSTRUCTION_NODE = 7;\n            ownerdoc.COMMENT_NODE = 8;\n            ownerdoc.DOCUMENT_NODE = 9;\n            ownerdoc.DOCUMENT_TYPE_NODE = 10;\n            ownerdoc.DOCUMENT_FRAGMENT_NODE = 11;\n            ownerdoc.NOTATION_NODE = 12;\n        }\n\n        ownerdoc._importNode = function (node, allChildren) {\n            switch (node.nodeType) {\n                case ownerdoc.ELEMENT_NODE:\n                    var newNode = ownerdoc.createElementNS(svgns, node.nodeName);\n                    /* does the node have any attributes to add? */\n                    if (node.attributes && node.attributes.length > 0) for (var i = 0, il = node.attributes.length; i < il;) {\n                        if (!/^on/.test(node.attributes[i].nodeName)) {\n                            newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));\n                        }\n                    }\n                    /* are we going after children too, and does the node have any? */\n                    if (allChildren && node.childNodes && node.childNodes.length > 0) for (var i = 0, il = node.childNodes.length; i < il;) {\n                        if (node.childNodes[i].nodeName !== 'USE' && node.childNodes[i].nodeName.toUpperCase() !== 'SCRIPT') {\n                            newNode.appendChild(ownerdoc._importNode(node.childNodes[i++], allChildren));\n                        }\n                    }\n                    return newNode;\n                    break;\n                case ownerdoc.TEXT_NODE:\n                case ownerdoc.CDATA_SECTION_NODE:\n                case ownerdoc.COMMENT_NODE:\n                    return ownerdoc.createTextNode(node.nodeValue);\n                    break;\n            }\n        };\n    };\n\n    var fix_child_links = function fix_child_links(node, prefix) {\n        if (node.childNodes && node.childNodes.length > 0) {\n            for (var i = 0, il = node.childNodes.length; i < il;) {\n                if (node.childNodes[i].nodeName.toUpperCase() === 'USE') {\n                    var linkval = node.childNodes[i].getAttribute('xlink:href');\n                    node.childNodes[i].setAttribute('xlink:href', linkval.replace(/^#/, '#' + prefix + '_'));\n                }\n                i++;\n            }\n        }\n    };\n\n    CondensedSequenceRenderer.prototype.importIcons = function (namespace, doc, alt_url) {\n        var new_owner = this._container_canvas.ownerDocument;\n        if (this._container_canvas.getElementById('defs_' + namespace)) {\n            return;\n        }\n        this._container_canvas.appendChild(new_owner.createElement('defs'));\n        this._container_canvas.lastChild.setAttribute('id', 'defs_' + namespace);\n        var defs_block = this._container_canvas.lastChild;\n\n        if (!new_owner._importNode) {\n            add_import(new_owner);\n        }\n        var ua = window.navigator.userAgent;\n        if (ua.indexOf('Edge/') >= 0) {\n            this.icons_failed = this.icons_failed || {};\n            this.icons_failed[namespace] = alt_url;\n            return;\n        }\n        var new_nodes = new_owner._importNode(doc, true);\n        if (typeof XPathResult !== 'undefined') {\n            var iterator = new_owner.evaluate('//svg:defs/*', new_nodes, function (ns) {\n                return svgns;\n            }, XPathResult.ANY_TYPE, null);\n            var el = iterator.iterateNext();\n            var to_append = [];\n            while (el) {\n                to_append.push(el);\n                el = iterator.iterateNext();\n            }\n            if (to_append.length === 0) {\n                this.icons_failed = this.icons_failed || {};\n                this.icons_failed[namespace] = alt_url;\n            }\n            to_append.forEach(function (el) {\n                el.setAttribute('id', namespace + '_' + el.getAttribute('id'));\n                fix_child_links(el, namespace);\n                defs_block.appendChild(el);\n            });\n        } else {\n            var els = new_nodes.querySelectorAll('defs > *');\n            for (var i = 0; i < els.length; i++) {\n                els[i].setAttribute('id', namespace + '_' + els[i].getAttribute('id'));\n                fix_child_links(el, namespace);\n                defs_block.appendChild(els[i]);\n            }\n        }\n    };\n})();\n\nCondensedSequenceRenderer.prototype.addValuesToLayer = function (layerName, values, options) {\n    var RS = this._RS;\n\n    var canvas = this._canvas;\n\n    if (!canvas) {\n        var orig_func = arguments.callee;\n        var self = this;\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._renderer, 'sequencechange', function () {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this._renderer, 'sequencechange', arguments.callee);\n            orig_func.call(self, layerName, values);\n        });\n        log(\"Delaying rendering, waiting for sequence change\");\n        return;\n    }\n\n    var max_value;\n    var min_value;\n    var height_scale = 1;\n\n    options = options || {};\n\n    if (options.height) {\n        height_scale = options.height / this._layer_containers[layerName].track_height;\n    }\n\n    var offset_scale = 0;\n    if (options.offset) {\n        offset_scale = options.offset / this._layer_containers[layerName].track_height;\n    }\n    var recalculate_plot = function recalculate_plot(scale) {\n        var plot_path = ' m' + -0.5 * RS + ' 0';\n        var last_value = null;\n        values.forEach(function (value) {\n            if (typeof last_value == 'undefined') {} else {\n                plot_path += ' l' + RS + ' ' + -1 * RS * scale * height_scale * (value - last_value);\n            }\n            last_value = value;\n            if (isNaN(max_value) || value > max_value) {\n                max_value = value;\n            }\n            if (isNaN(min_value) || value < min_value) {\n                min_value = value;\n            }\n        });\n        return plot_path;\n    };\n    var plot = this._canvas.path('M0 0 M0 0 m0 ' + (max_value || 0) * RS + ' ' + recalculate_plot(1));\n    var abs_min_val = min_value;\n    var abs_max_val = max_value;\n    plot.setAttribute('stroke', options.color || '#ff0000');\n    plot.setAttribute('stroke-width', (options.thickness || 0.35) * RS);\n    plot.setAttribute('fill', 'none');\n    plot.setAttribute('visibility', 'hidden');\n    plot.setAttribute('pointer-events', 'none');\n    this._layer_containers[layerName].push(plot);\n    plot.setAttribute('transform', 'translate(1,10) scale(1,1)');\n    if (!options.hide_axis) {\n        var axis = this._canvas.path('M0 0 m0 ' + RS * ((max_value || 0) - (min_value || 0)) + ' l' + this._sequence_els.length * RS + ' 0');\n        axis.setAttribute('stroke-width', 0.2 * RS);\n        axis.setAttribute('visibility', 'hidden');\n        axis.setAttribute('transform', 'translate(1,0)');\n        axis.setAttribute('pointer-events', 'none');\n        axis.setHeight = function (height) {\n            if (abs_min_val < 0 && abs_max_val > 0) {\n                axis.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * height * height_scale + ' l' + renderer._sequence_els.length * RS + ' 0');\n            } else {\n                axis.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * (1 - abs_min_val) * height * height_scale + ' l' + renderer._sequence_els.length * RS + ' 0');\n            }\n            axis.setAttribute('stroke-width', 0.2 * RS / renderer.zoom);\n        };\n        this._layer_containers[layerName].push(axis);\n    }\n    var renderer = this;\n\n    if (options.label) {\n        var text = this._canvas.text(0, 0, options.label.max || options.label.min);\n        text.setAttribute('transform', 'translate(0,0)');\n        text.setAttribute('font-size', 4 * RS + 'pt');\n        text.setHeight = function (height) {\n            text.setAttribute('y', height * offset_scale);\n            text.setAttribute('font-size', 4 * RS / renderer.zoom + 'pt');\n        };\n        this._layer_containers[layerName].push(text);\n    }\n\n    plot.setHeight = function (height) {\n        var path_vals = recalculate_plot(0.5 * height / RS);\n        plot.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * height * height_scale + ' ' + path_vals);\n        plot.setAttribute('stroke-width', (options.thickness || 0.35) * RS / renderer.zoom);\n    };\n    return plot;\n};\n\n(function () {\n    var addElementToLayer = function addElementToLayer(layerName, opts) {\n        var canvas = this._renderer._canvas;\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._renderer, 'sequencechange', function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var tracer = null;\n        var tracer_marker = null;\n        var renderer = this._renderer;\n\n        if (!opts) {\n            opts = {};\n        }\n\n        var scale = 1;\n        if (opts.height) {\n            opts.height = parseFloat(opts.height);\n            if (typeof opts.height !== 'undefined' && opts.bare_element) {\n                opts.height *= 2;\n            }\n            scale = opts.height / this._renderer._layer_containers[layerName].track_height;\n            if (typeof opts.offset !== 'undefined') {\n                opts.offset = -1.25 - 1.25 + opts.offset / opts.height * 5; // ( -250/4 + (x / height) * 250 ) where 250 is growing marker height\n            }\n        }\n\n        var tracer_marker = canvas.growingMarker(0, 0, opts.content || layerName.charAt(0).toUpperCase(), opts);\n        tracer_marker.setAttribute('transform', 'translate(' + (this._index + 0.5) * this._renderer._RS + ',0.01) scale(' + scale + ')');\n        tracer_marker.setAttribute('height', '250');\n        tracer_marker.firstChild.setAttribute('transform', 'translate(-100,0) rotate(0,100,0.001)');\n        if (opts.break_viewbox) {\n            tracer_marker.container.removeAttribute('viewBox');\n            tracer_marker.container.setAttribute('width', '100%');\n            tracer_marker.container.setAttribute('height', '100%');\n        }\n        if (!opts.no_tracer) {\n\n            var bobble = canvas.circle(this._index + 0.5, 10, 0.25);\n            bobble.setAttribute('visibility', 'hidden');\n            bobble.style.opacity = '0.4';\n            tracer = canvas.rect(this._index + 0.5, 10, 0.05, 0);\n            tracer._index = this._index;\n            tracer.style.strokeWidth = '0';\n            tracer.style.fill = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers[layerName].color;\n            tracer.setAttribute('visibility', 'hidden');\n            canvas.insertBefore(tracer, canvas.firstChild.nextSibling);\n            var renderer = this._renderer;\n\n            if (!this._renderer._layer_containers[layerName].tracers) {\n                this._renderer._layer_containers[layerName].tracers = canvas.set();\n            }\n            if (!canvas.tracers) {\n                canvas.tracers = canvas.set();\n                canvas._visibleTracers = function () {\n                    return renderer._visibleTracers();\n                };\n            }\n            tracer.setHeight = function (height) {\n                if (tracer.getAttribute('visibility') == 'hidden') {\n                    return;\n                }\n\n                var transform_attr = tracer_marker.getAttribute('transform');\n                var matches = /translate\\(.*[,\\s](.*)\\) scale\\((.*)\\)/.exec(transform_attr);\n                if (matches[1] && matches[2]) {\n                    var scale = parseFloat(matches[2]);\n                    var y = parseFloat(matches[1]);\n                    var new_height = y + scale * ((tracer_marker.offset || 0) * 50 + 125) - parseInt(this.getAttribute('y'));\n                    this.setAttribute('height', new_height < 0 ? 0 : new_height);\n                } else {\n                    this.setAttribute('height', height);\n                }\n            };\n            this._renderer._layer_containers[layerName].tracers.push(tracer);\n            this._renderer._layer_containers[layerName].tracers.push(bobble);\n            tracer.setAttribute('pointer-events', 'none');\n            bobble.setAttribute('pointer-events', 'none');\n            canvas.tracers.push(tracer);\n        }\n        if (typeof opts.offset == 'undefined' || opts.offset === null) {\n            // tracer_marker.offset = 2.5*this._renderer._layer_containers[layerName].track_height;\n        } else {\n            tracer_marker.offset = opts.offset;\n        }\n\n        // tracer_marker.setAttribute('transform','scale(0.5)');\n        // tracer_marker.zoom_level = 'text';\n        tracer_marker.setAttribute('visibility', 'hidden');\n\n        this._renderer._layer_containers[layerName].push(tracer_marker);\n        var result = [tracer, tracer_marker, bobble];\n        tracer_marker.setAttribute('class', layerName);\n        result.move = function (x, width) {\n            var transform_attr = tracer_marker.getAttribute('transform');\n            var matches = /translate\\(.*[,\\s](.*)\\) scale\\((.*)\\)/.exec(transform_attr);\n            if (matches[1] && matches[2]) {\n                tracer_marker.setAttribute('transform', 'translate(' + (x + 0.5) * renderer._RS + ',' + matches[1] + ') scale(' + matches[2] + ')');\n            }\n            if (tracer) {\n                tracer.move(x + 0.5, 0.05);\n                bobble.move(x + 0.5);\n            }\n        };\n        if (tracer) {\n            tracer_marker.tracer = tracer;\n            tracer_marker.bobble = bobble;\n        }\n        this._renderer._layer_containers[layerName].push(result);\n        return result;\n    };\n\n    var addBoxOverlayToElement = function addBoxOverlayToElement(layerName, width, fraction, opts) {\n\n        var canvas = this._renderer._canvas;\n        var renderer = this._renderer;\n        if (!opts) {\n            opts = {};\n        }\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._renderer, 'sequencechange', function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var rect = canvas.rect(-0.25 + this._index, 60, width || 1, opts.height || 4, opts);\n        var rect_x = parseFloat(rect.getAttribute('x'));\n        var rect_max_x = rect_x + parseFloat(rect.getAttribute('width'));\n        var container = this._renderer._layer_containers[layerName];\n        if (typeof opts.merge !== 'undefined' && opts.merge) {\n            for (var i = 0; i < container.length; i++) {\n                if (container[i].value != fraction) {\n                    continue;\n                }\n                var el_x = parseFloat(container[i].getAttribute('x'));\n                var el_max_x = el_x + parseFloat(container[i].getAttribute('width'));\n                if (el_x <= rect_x && rect_x <= el_max_x || rect_x <= el_x && el_x <= rect_max_x) {\n                    container[i].setAttribute('x', \"\" + Math.min(el_x, rect_x));\n                    container[i].setAttribute('width', \"\" + (Math.max(el_max_x, rect_max_x) - Math.min(el_x, rect_x)));\n                    rect.parentNode.removeChild(rect);\n                    return container[i];\n                }\n            }\n        }\n        this._renderer._layer_containers[layerName].push(rect);\n        rect.setAttribute('class', layerName);\n        rect.setAttribute('visibility', 'hidden');\n        rect.setAttribute('stroke-width', '0px');\n        if (typeof fraction !== 'undefined') {\n            rect.setAttribute('opacity', fraction);\n            rect.value = fraction;\n        }\n        rect.setAttribute('fill', opts.fill || __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers[layerName].color);\n        rect.position_start = this._index;\n        rect.position_end = this._index + width;\n        if (typeof opts.offset !== \"undefined\" || opts.height_scale) {\n            var offset_val = opts.offset;\n            rect.setHeight = function (hght) {\n                var height_val = opts.height ? opts.height * renderer._RS / renderer.zoom : hght * (opts.height_scale || 1);\n                if (opts.align == 'bottom') {\n                    this.setAttribute('y', offset_val * renderer._RS / renderer.zoom - hght * (opts.height_scale || 1));\n                    this.setAttribute('height', height_val);\n                } else {\n                    this.setAttribute('y', offset_val * renderer._RS / renderer.zoom);\n                    this.setAttribute('height', height_val);\n                }\n            };\n        }\n        return rect;\n    };\n\n    var addTextToElement = function addTextToElement(layerName, width, opts) {\n        var canvas = this._renderer._canvas;\n        var renderer = this._renderer;\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._renderer, 'sequencechange', function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n        if (!opts) {\n            opts = {};\n        }\n        if (opts.height) {\n            opts.height = opts.height * this._renderer._RS;\n        }\n        var height = opts.height || this._renderer._layer_containers[layerName].trackHeight || 4;\n        var position = this._index;\n        if (width > 1) {\n            position = position + Math.floor(0.5 * width);\n        }\n        var text_scale = 4 / 3;\n        var text = canvas.text(position, 0, opts.txt || opts.content || \"Text\");\n        text.setAttribute('font-size', text_scale * height);\n        text.cached_width = text.getComputedTextLength() / height;\n        text.setAttribute('font-weight', 'bolder');\n        text.setAttribute('fill', opts.fill || '#ffffff');\n        text.setAttribute('stroke', '#000000');\n        if (!(\"stroke_width\" in opts)) {\n            opts.stroke_width = 5;\n        }\n        text.setAttribute('stroke-width', opts.stroke_width + '');\n        text.setAttribute('style', 'font-family: ' + canvas.font_order);\n        text.firstChild.setAttribute('dy', '1.3ex');\n        text.setAttribute('text-anchor', 'middle');\n        if (opts.align) {\n            if (opts.align == \"left\") {\n                text.setAttribute('text-anchor', 'start');\n            }\n            if (opts.align == 'right') {\n                text.setAttribute('text-anchor', 'end');\n            }\n        }\n        if (width > 1) {\n            var clip = canvas.clipPath();\n            var mask = canvas.rect(-0.5 * width, opts.offset || 0, width, height);\n            clip.push(mask);\n            mask.removeAttribute('y');\n            var mask_id = 'id' + new Date().getTime() + \"_\" + clip.parentNode.childNodes.length;\n            clip.setAttribute('id', mask_id);\n            text.setAttribute('clip-path', 'url(#' + mask_id + ')');\n        }\n        if (typeof opts.offset !== 'undefined') {\n            text.setAttribute('transform', 'translate(' + text.getAttribute('x') + ',' + text.getAttribute('y') + ')');\n            text.offset = opts.offset;\n            text.setHeight = function (height) {\n                var top_offset = this.offset;\n                this.setAttribute('x', 0);\n                this.setAttribute('y', top_offset * renderer._RS / renderer.zoom);\n                if (mask) mask.setAttribute('y', this.getAttribute('y'));\n                this.setAttribute('stroke-width', 5 / renderer.zoom);\n                if (opts.height) {\n                    this.setAttribute('font-size', text_scale * opts.height / renderer.zoom);\n                    if (mask) mask.setAttribute('height', opts.height / renderer.zoom);\n                } else {\n                    this.setAttribute('font-size', text_scale * height);\n                    if (mask) mask.setAttribute('height', height);\n                }\n                // If we have a mask, we want to move the text to the left.\n                if (mask) {\n                    if (this.cached_width * height > width * 50) {\n                        this.setAttribute('x', -0.5 * width * 50);\n                        this.setAttribute('text-anchor', 'start');\n                    } else {\n                        this.setAttribute('x', '0');\n                        this.setAttribute('text-anchor', 'middle');\n                    }\n                } else {\n                    this.setAttribute('x', '0');\n                    this.setAttribute('text-anchor', 'middle');\n                }\n            };\n        } else {\n            text.setHeight = function (height) {\n                text.setAttribute('stroke-width', 5 / renderer.zoom);\n                if (opts.height) {\n                    text.setAttribute('font-size', text_scale * opts.height / renderer.zoom);\n                    if (mask) mask.setAttribute('height', opts.height / renderer.zoom);\n                } else {\n                    text.setAttribute('font-size', text_scale * height);\n                    if (mask) mask.setAttribute('height', height);\n                }\n            };\n        }\n        if (width > 1) {\n            text.move = function (new_x, new_width) {\n                if (mask) mask.setAttribute('x', -1 * new_width * renderer._RS * 0.5);\n                if (mask) mask.setAttribute('width', new_width * renderer._RS);\n                text.setAttribute('x', (new_x + parseInt(0.5 * new_width)) * renderer._RS);\n            };\n        }\n        this._renderer._layer_containers[layerName].push(text);\n        return text;\n    };\n\n    var addShapeToElement = function addShapeToElement(layerName, width, opts) {\n        var canvas = this._renderer._canvas;\n        var renderer = this._renderer;\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._renderer, 'sequencechange', function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var methods = {\n            \"pentagon\": canvas.pentagon,\n            \"hexagon\": canvas.hexagon,\n            \"rectangle\": canvas.rect,\n            \"ellipse\": canvas.ellipticalRect,\n            \"roundrect\": function roundrect(x, y, width, height) {\n                return canvas.roundRect(x, y, width, height, 0.25 * height);\n            }\n        };\n        if (!opts.rotate) {\n            opts.rotate = 0;\n        }\n        var shape = null;\n        var shape_name = (opts.shape.split('-') || '')[0];\n        if (shape_name in methods) {\n            var is_rotated = opts.shape.split('-')[1];\n            if (is_rotated == 'left' && !opts.rotate) {\n                opts.rotate = 90;\n            }\n            if (is_rotated == 'right' && !opts.rotate) {\n                opts.rotate = 270;\n            }\n            if (is_rotated == 'flip' && !opts.rotate) {\n                opts.rotate = 180;\n            }\n            shape = methods[shape_name].call(canvas, this._index, 60, width || 1, opts.height || 4, opts.rotate);\n        } else {\n            return;\n        }\n        if (typeof opts.offset !== 'undefined') {\n            var x_pos = shape.getAttribute('x');\n            var y_pos = shape.getAttribute('y');\n            shape.setAttribute('transform', 'translate(' + x_pos + ',' + y_pos + ')');\n            shape.setAttribute('x', '0');\n            var offset_val = opts.offset || 0;\n            var orig_height = opts.height || 4;\n            shape.setAttribute('y', offset_val * this._renderer._RS);\n            shape.setHeight = function (height) {\n                if (!this._orig_stroke_width) {\n                    this._orig_stroke_width = parseInt(this.getAttribute('stroke-width'));\n                }\n                shape.setAttribute('y', offset_val * renderer._RS / renderer.zoom);\n                shape.setAttribute('height', orig_height * renderer._RS / renderer.zoom);\n                shape.setAttribute('stroke-width', this._orig_stroke_width / renderer.zoom);\n                if (opts.shape == 'ellipse') {\n                    shape.setAttribute('ry', 0.5 * (orig_height * renderer._RS) / renderer.zoom);\n                }\n                if (opts.shape == 'roundrect') {\n                    shape.setAttribute('rx', 0.25 * (orig_height * renderer._RS) / renderer.zoom);\n                    shape.setAttribute('ry', 0.25 * (orig_height * renderer._RS) / renderer.zoom);\n                }\n            };\n            shape.move = function (new_x, new_width) {\n                var transform_attr = this.getAttribute('transform');\n                var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n                if (matches[1]) {\n                    this.setAttribute('transform', 'translate(' + new_x * renderer._RS + ',' + matches[1] + ')');\n                }\n                this.setAttribute('width', new_width * renderer._RS);\n            };\n        }\n\n        if (typeof opts.offset !== 'undefined' && (opts.shape == \"hexagon\" || opts.shape == \"pentagon\")) {\n            var offset_val = opts.offset || 0;\n            var orig_height = opts.height || 4;\n            var adjustment_g = canvas.group();\n            adjustment_g.setAttribute('transform', shape.getAttribute('transform'));\n            adjustment_g.push(shape);\n            shape.setAttribute('transform', 'translate(0,0)');\n            adjustment_g.setHeight = function (height) {\n                if (!shape._orig_stroke_width) {\n                    shape._orig_stroke_width = parseInt(shape.getAttribute('stroke-width')) || 0;\n                }\n                shape.setHeight(orig_height * renderer._RS / renderer.zoom);\n                shape.setAttribute('stroke-width', this._orig_stroke_width / renderer.zoom);\n                shape.setAttribute('transform', 'translate(0,0)');\n            };\n            this._renderer._layer_containers[layerName].push(adjustment_g);\n            adjustment_g.setAttribute('visibility', 'hidden');\n            adjustment_g.setAttribute('class', layerName);\n            adjustment_g.position_start = this._index;\n            adjustment_g.position_end = this._index + width;\n        } else {\n            this._renderer._layer_containers[layerName].push(shape);\n            shape.setAttribute('visibility', 'hidden');\n            shape.setAttribute('class', layerName);\n            shape.position_start = this._index;\n            shape.position_end = this._index + width;\n        }\n        shape.setAttribute('fill', opts.fill || __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers[layerName].color);\n        if (opts.stroke) {\n            shape.setAttribute('stroke', opts.stroke);\n        }\n        if (opts.stroke_width) {\n            shape.setAttribute('stroke-width', renderer._RS * opts.stroke_width);\n        } else {\n            shape.style.strokeWidth = '0';\n        }\n        return shape;\n    };\n\n    var addElementToLayerWithLink = function addElementToLayerWithLink(layerName, url, width) {\n        var canvas = this._renderer._canvas;\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._renderer, 'sequencechange', function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, url, width);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var rect = canvas.rect(-0.25 + this._index, 60, width || 1, 4);\n        this._renderer._layer_containers[layerName].push(rect);\n        rect.style.strokeWidth = '0px';\n        rect.setAttribute('fill', __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers[layerName].color);\n        rect.setAttribute('visibility', 'hidden');\n        rect.setAttribute('class', layerName);\n        return rect;\n    };\n\n    var addCalloutToLayer = function addCalloutToLayer(layerName, element, opts) {\n        var canvas = this._renderer._canvas;\n\n        var renderer = this._renderer;\n\n        if (typeof element == 'string') {\n            var a_el = document.createElement('div');\n            renderer.fillTemplate(element, opts, function (err, el) {\n                a_el.innerHTML = el;\n            });\n            element = a_el;\n        }\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this._renderer, 'sequencechange', function () {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n        var callout = canvas.callout(this._index + 0.5, 0.01, element, { 'width': 10 * opts.width || 100, 'height': opts.height * 10 || 100, 'align': opts.align, 'font-size': opts['font-size'] });\n        callout.setHeight(opts.height * this._renderer._RS);\n        this._renderer._canvas_callout_padding = Math.max(10 * opts.height || 100, this._renderer._canvas_callout_padding || 0);\n        this._renderer._layer_containers[layerName].push(callout);\n        callout.clear = function () {\n            var cont = renderer._layer_containers[layerName];\n            if (cont.indexOf(callout) > 0) {\n                cont.splice(cont.indexOf(callout), 1);\n            }\n            callout.parentNode.removeChild(callout);\n        };\n        return callout;\n    };\n\n    var scaledAddShapeOverlay = function scaledAddShapeOverlay(layername, width, opts) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n        var res = addShapeToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), opts);\n        res.aa = this.original_index;\n        res.aa_width = width;\n        return res;\n    };\n\n    var scaledAddBoxOverlay = function scaledAddBoxOverlay(layername, width, fraction, opts) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n\n        var res = addBoxOverlayToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), fraction, opts);\n\n        if (!(opts || {}).merge) {\n            res.aa_width = width;\n            res.aa = this.original_index;\n        } else {\n            res.aa_width = parseInt(res.getAttribute('width')) / this._renderer._RS;\n            if (res.aa_width == width) {\n                res.aa = this.original_index;\n            }\n        }\n        return res;\n    };\n\n    var scaledAddTextOverlay = function scaledAddTextOverlay(layername, width, opts) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n        var res = addTextToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), opts);\n        res.aa = this.original_index;\n        res.aa_width = width;\n        return res;\n    };\n\n    var scaledAddToLayerWithLink = function scaledAddToLayerWithLink(layername, url, width) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n        var res = addElementToLayerWithLink.call(start < end ? this : this._renderer._sequence_els[end], layername, url, Math.abs(end - start));\n        res.aa = this.original_index;\n        return res;\n    };\n\n    var scaledAddToLayer = function scaledAddToLayer(layername, opts) {\n        var res = addElementToLayer.call(this, layername, opts);\n        res.aa = this.original_index;\n        res.aa_width = 1;\n        return res;\n    };\n\n    CondensedSequenceRenderer.prototype.enableScaling = function () {\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this, 'readerRegistered', function (reader) {\n            console.log('Enabling scaling for legacy readers');\n            var old_result = reader.gotResult;\n            var renderer = this;\n            reader.gotResult = function () {\n                var wanted_id = reader.acc || reader.agi || \"\";\n\n                var old_get_aas = CondensedSequenceRenderer.prototype.getAminoAcidsByPosition;\n                var old_get_pep = CondensedSequenceRenderer.prototype.getAminoAcidsByPeptide;\n                var old_sequence = renderer.sequence;\n                if (renderer.sequences) {\n                    renderer.sequence = (renderer.sequences[renderer.sequences.map(function (seq) {\n                        return (seq.agi || seq.acc || \"\").toLowerCase();\n                    }).indexOf(wanted_id.toLowerCase())] || \"\").toString();\n                } else {\n                    old_sequence = null;\n                }\n                renderer.getAminoAcidsByPosition = function (aas, lay, accession) {\n                    if (!lay && !accession) {\n                        console.log('Guessing scaling identifier as', wanted_id);\n                    }\n                    return old_get_aas.call(this, aas, lay || wanted_id, accession || wanted_id);\n                };\n                renderer.getAminoAcidsByPeptide = function (peptide, lay, accession) {\n                    if (!lay && !accession) {\n                        console.log('Guessing scaling identifier as', wanted_id);\n                    }\n                    return old_get_pep.call(this, peptide, lay || wanted_id, accession || wanted_id);\n                };\n                old_result.call(reader);\n\n                if (old_sequence) {\n                    renderer.sequence = old_sequence;\n                }\n\n                renderer.getAminoAcidsByPosition = old_get_aas;\n                renderer.getAminoAcidsByPeptide = old_get_pep;\n            };\n        });\n    };\n\n    CondensedSequenceRenderer.prototype._extendElement = function (el) {\n        el.addToLayer = scaledAddToLayer;\n        el.addBoxOverlay = scaledAddBoxOverlay;\n        el.addShapeOverlay = scaledAddShapeOverlay;\n        el.addTextOverlay = scaledAddTextOverlay;\n        el.addToLayerWithLink = scaledAddToLayerWithLink;\n        el.callout = addCalloutToLayer;\n        el['_renderer'] = this;\n    };\n\n    CondensedSequenceRenderer.prototype.remove = function (lay, el) {\n        if (!el) {\n            return false;\n        }\n        if (this._layer_containers[lay] && this._layer_containers[lay].indexOf(el) >= 0) {\n            this._layer_containers[lay].splice(this._layer_containers[lay].indexOf(el), 1);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(el, 'removed');\n            if (el.parentNode) {\n                el.parentNode.removeChild(el);\n            }\n            if (el.tracer && el.tracer.parentNode) {\n                el.tracer.parentNode.removeChild(el.tracer);\n            }\n            if (el.bobble && el.bobble.parentNode) {\n                el.bobble.parentNode.removeChild(el.bobble);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    var mark_groups = function mark_groups(renderer, objects) {\n        var group = [];\n        var new_objects = [];\n        for (i = 0; i < objects.length; i++) {\n            var current = objects[i],\n                next = null;\n            if (!current) {\n                continue;\n            }\n            if (objects[i + 1]) {\n                next = objects[i + 1];\n            }\n            if (!next || parseInt(next.aa) - parseInt(current.aa) > 10 || renderer.sequence.substring(current, next - 1).match(/[ST]/)) {\n                if (group.length < 3) {\n                    group.push(current);\n                } else {\n                    group.push(current);\n                    group.forEach(function (site) {\n                        site.options.zoom_level = 'text';\n                    });\n                    var coalesce_options = group[0].coalesce || objects[0].coalesce;\n                    new_objects.push({\n                        'aa': group[0].aa,\n                        'type': 'shape',\n                        'width': parseInt(current.aa) - parseInt(group[0].aa) + 1,\n                        'options': { 'zoom_level': 'summary',\n                            'shape': 'roundrect',\n                            'fill': coalesce_options.fill,\n                            'stroke': coalesce_options.stroke,\n                            'stroke_width': coalesce_options.stroke_width,\n                            'height': group[0].options.height,\n                            'offset': group[0].options.offset\n                        }\n                    });\n                }\n                group = [];\n            } else {\n                group.push(current);\n            }\n        }\n        new_objects.forEach(function (obj) {\n            objects.push(obj);\n        });\n    };\n\n    CondensedSequenceRenderer.prototype.fix_icons = function (icon_ref) {\n        if (!this.icons_failed) {\n            return icon_ref;\n        }\n        if (typeof icon_ref === 'string') {\n            var vals = icon_ref.split('_');\n            if (vals[0] && this.icons_failed[vals[0].replace('#', '')]) {\n                vals[0] = this.icons_failed[vals[0].replace('#', '')] + '#';\n                var start = vals.shift();\n                console.log(icon_ref, start + vals.join('_'));\n                return start + vals.join('_');\n            }\n        }\n        return icon_ref;\n    };\n\n    CondensedSequenceRenderer.prototype.renderObjects = function (track, objects) {\n        var renderer = this;\n        if (objects.length > 0 && objects[0].coalesce) {\n            mark_groups(renderer, objects);\n        }\n        var results = [];\n        objects.forEach(function (object) {\n            var potential_height = object.options ? (object.options.height || renderer._layer_containers[track].track_height) + (object.options.offset + object.options.height || 0) : 0;\n            if (object.options && potential_height > renderer._layer_containers[track].track_height) {\n                var new_height = renderer._layer_containers[track].track_height + object.options.offset + (object.options.height || renderer._layer_containers[track].track_height);\n                if ((renderer._layer_containers[track].fixed_track_height || 0) < new_height) {\n                    renderer._layer_containers[track].fixed_track_height = new_height;\n                }\n            }\n\n            var click_reveal;\n            var rendered;\n            if (object.aa && !renderer.getAA(parseInt(object.aa), track)) {\n                return;\n            }\n            if (typeof object.aa !== 'undefined' && isNaN(object.aa)) {\n                return;\n            }\n            if (object.type == \"text\") {\n                if (object.aa) {\n                    if (object.width) {\n                        rendered = renderer.getAA(parseInt(object.aa), track).addTextOverlay(track, object.width, object.options);\n                    } else {\n                        rendered = renderer.getAA(parseInt(object.aa), track).addTextOverlay(track, 1, object.options);\n                    }\n                } else if (object.peptide) {\n                    rendered = renderer.getAminoAcidsByPeptide(object.peptide, track).addTextOverlay(track, 1, object.options);\n                }\n            }\n            if (object.type === \"box\") {\n                if (object.aa) {\n                    rendered = renderer.getAA(parseInt(object.aa), track).addBoxOverlay(track, parseInt(object.width), 1, object.options);\n                } else if (object.peptide) {\n                    rendered = renderer.getAminoAcidsByPeptide(object.peptide, track).addToLayer(track, 1, object.options);\n                }\n            }\n            if (object.type == \"shape\") {\n                if (object.aa) {\n                    rendered = renderer.getAA(parseInt(object.aa), track).addShapeOverlay(track, parseInt(object.width), object.options);\n                } else if (object.peptide) {\n                    rendered = renderer.getAminoAcidsByPeptide(object.peptide, track)[0].addShapeOverlay(track, object.peptide.length, object.options);\n                }\n            }\n            if (object.type == 'line') {\n                rendered = renderer.addValuesToLayer(track, object.values, object.options);\n            }\n            if (object.type == \"marker\") {\n                var content = (object.options || {}).content;\n                var wanted_height = object.options.height;\n\n                if (Array.isArray && Array.isArray(content)) {\n                    var cloned_options_array = {};\n                    for (var key in object.options) {\n                        if (object.options.hasOwnProperty(key)) {\n                            cloned_options_array[key] = object.options[key];\n                        }\n                    }\n                    if (object.options.content && Array.isArray(content_data)) {\n                        cloned_options_array.content = object.options.content.map(renderer.fix_icons.bind(renderer));\n                    }\n\n                    click_reveal = renderer.getAA(parseInt(object.aa), track).addToLayer(track, cloned_options_array);\n                    click_reveal = click_reveal[1];\n                    click_reveal.style.display = 'none';\n                    object.options.content = object.options.alt_content;\n                    content = object.options.content;\n                }\n                if (typeof content == 'object') {\n                    var content_el;\n                    if (content.type == \"circle\") {\n                        content_el = renderer._canvas.circle(-0.5, -0.5, 1, 1);\n                    }\n                    if (content.type == 'text_circle') {\n                        content_el = renderer._canvas.text_circle(0.5, 0.5, 1, content.text, content.options || {});\n                        object.options.break_viewbox = true;\n                    }\n                    if (content.type == \"left_triangle\") {\n                        content_el = renderer._canvas.poly('-100,0 0,-100 0,100');\n                    }\n                    if (content.type == \"right_triangle\") {\n                        content_el = renderer._canvas.poly('0,100 100,0 0,-100');\n                    }\n\n                    [\"fill\", \"stroke\", \"stroke-width\", \"fill-opacity\", \"stroke-opacity\", \"opacity\"].forEach(function (prop) {\n                        if (content[prop]) {\n                            content_el.setAttribute(prop, content[prop]);\n                        }\n                    });\n                    object.options.content = content_el;\n                }\n                var cloned_options = {};\n                for (var key in object.options) {\n                    if (object.options.hasOwnProperty(key)) {\n                        cloned_options[key] = object.options[key];\n                    }\n                }\n                var content_data = (object.options || {}).content;\n                if (content_data && typeof content_data === 'string') {\n                    cloned_options.content = renderer.fix_icons(content_data);\n                }\n                if (content_data && Array.isArray(content_data)) {\n                    cloned_options.content = content_data.map(renderer.fix_icons.bind(renderer));\n                }\n                var added = renderer.getAA(parseInt(object.aa), track).addToLayer(track, cloned_options);\n                if (click_reveal) {\n\n                    click_reveal.toggleReveal = function (ev) {\n                        ev.stopPropagation();\n                        if (this.style.display === 'none') {\n                            this.parentNode.appendChild(this);\n                            this.style.display = 'block';\n                        } else {\n                            this.style.display = 'none';\n                        }\n                        renderer.refresh();\n                    };\n                    added[1].addEventListener('touchstart', click_reveal.toggleReveal.bind(click_reveal), true);\n                    added[1].addEventListener('click', click_reveal.toggleReveal.bind(click_reveal), false);\n                }\n                rendered = added[1];\n            }\n            if ((object.options || {}).zoom_level) {\n                rendered.zoom_level = object.options.zoom_level;\n            }\n            if (object.identifier) {\n                rendered.setAttribute('identifier', object.identifier);\n            }\n            if ((object.options || {}).events && rendered) {\n                object.options.events.forEach(function (ev) {\n                    (ev.type || \"\").split(\",\").forEach(function (evtype) {\n                        if (evtype == 'click' && rendered.style) {\n                            rendered.style.cursor = 'pointer';\n                        }\n                        rendered.addEventListener(evtype, function (e) {\n                            e.event_data = ev.data;\n                            e.layer = track;\n                            e.aa = object.aa;\n                        });\n                    });\n                });\n            }\n            results.push(rendered);\n        });\n        return results;\n    };\n\n    CondensedSequenceRenderer.prototype.addTextTrack = function (seq, container) {\n        var RS = this._RS;\n        var renderer = this;\n        var max_length = 300;\n        var canvas = renderer._canvas;\n        var seq_chars = seq.split('');\n\n        var amino_acids = canvas.set();\n        var amino_acids_shown = false;\n        var x = 0;\n\n        var has_textLength = true;\n        var no_op = function no_op() {};\n        try {\n            var test_el = document.createElementNS(svgns, 'text');\n            test_el.setAttribute('textLength', 10);\n            no_op(test_el.textLength);\n        } catch (e) {\n            has_textLength = false;\n        }\n\n        /* We used to test to see if there was a touch event\n           when doing the textLength method of amino acid\n           layout, but iOS seems to support this now.\n           \n           Test case for textLength can be found here\n           \n           http://jsfiddle.net/nkmLu/11/embedded/result/\n        */\n\n        /* We also need to test for support for adjusting textLength\n           while also adjusting the dx value. Internet Explorer 10\n           squeezes text when setting a dx value as well as a textLength.\n           I.e. the right-most position of the character is calculated to\n           be x + textLength, rather than x + dx + textLength.\n         */\n\n        var supports_dx = false;\n        if (typeof __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].supports_dx !== 'undefined') {\n            supports_dx = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].supports_dx;\n        } else {\n            (function (supports_textLength) {\n                if (!supports_textLength) {\n                    supports_dx = false;\n                    return;\n                }\n                var test_el = document.createElementNS(svgns, 'text');\n                test_el.setAttribute('textLength', 30);\n\n                if (!test_el.getExtentOfChar) {\n                    return;\n                }\n                test_el.setAttribute('x', '0');\n                test_el.setAttribute('y', '0');\n                test_el.textContent = 'ABC';\n                canvas.appendChild(test_el);\n                var extent = test_el.getExtentOfChar(2).x;\n                test_el.setAttribute('dx', '10');\n                if (Math.abs(test_el.getExtentOfChar(2).x - extent) < 9.5) {\n                    supports_dx = false;\n                } else {\n                    supports_dx = true;\n                }\n                __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].supports_dx = supports_dx;\n                test_el.parentNode.removeChild(test_el);\n            })(has_textLength);\n        }\n\n        var a_text;\n\n        if (has_textLength && 'lengthAdjust' in document.createElementNS(svgns, 'text') && 'textLength' in document.createElementNS(svgns, 'text')) {\n            if (seq.length <= max_length) {\n                a_text = canvas.text(0, 12, document.createTextNode(seq));\n                a_text.setAttribute('textLength', RS * seq.length);\n            } else {\n                a_text = canvas.text(0, 12, document.createTextNode(seq.substr(0, max_length)));\n                a_text.setAttribute('textLength', RS * max_length);\n            }\n            canvas.insertBefore(a_text, canvas.firstChild.nextSibling);\n\n            a_text.style.fontFamily = \"'Lucida Console', 'Courier New', Monaco, monospace\";\n            a_text.setAttribute('lengthAdjust', 'spacing');\n            a_text.setAttribute('text-anchor', 'start');\n            a_text.setAttribute('dx', 5);\n            a_text.setAttribute('dy', '1.5ex');\n            a_text.setAttribute('font-size', RS);\n            a_text.setAttribute('fill', '#000000');\n            amino_acids.push(a_text);\n            container.push(a_text);\n        } else {\n            for (var i = 0; i < seq_chars.length; i++) {\n                a_text = canvas.text(x, 12, seq_chars[i]);\n                a_text.firstChild.setAttribute('dy', '1.5ex');\n                amino_acids.push(a_text);\n                container.push(a_text);\n                a_text.style.fontFamily = \"'Lucida Console', Monaco, monospace\";\n                x += 1;\n            }\n            amino_acids.attr({ 'width': RS, 'text-anchor': 'start', 'height': RS, 'font-size': RS, 'fill': '#000000' });\n        }\n        var update_sequence = function update_sequence() {\n            if (seq.length <= max_length) {\n                return;\n            }\n            var container_width = renderer._container_canvas.parentNode.cached_width;\n            if (!container_width) {\n                container_width = renderer._container_canvas.parentNode.getBoundingClientRect().width;\n                var docwidth = document.documentElement.clientWidth;\n                if (docwidth > container_width) {\n                    container_width = docwidth;\n                }\n            }\n            let max_size = Math.ceil(10 * container_width * renderer.zoom / RS);\n            if (max_size > seq.length) {\n                max_size = seq.length;\n            }\n\n            a_text.setAttribute('textLength', RS * max_size);\n\n            var start = parseInt(renderer.leftVisibleResidue());\n            start -= 50;\n            if (start < 0) {\n                start = 0;\n            }\n            if (start + max_size >= seq.length) {\n                start = seq.length - max_size;\n                if (start < 0) {\n                    start = 0;\n                }\n            }\n            a_text.replaceChild(document.createTextNode(seq.substr(start, max_size)), a_text.firstChild);\n            a_text.setAttribute(supports_dx ? 'dx' : 'x', 5 + start * RS);\n        };\n        var panstart = function panstart() {\n            if (amino_acids_shown) {\n                amino_acids.attr({ 'display': 'none' });\n            }\n        };\n        var panend = function panend() {\n            if (amino_acids_shown) {\n                amino_acids.attr({ 'display': 'block' });\n                update_sequence();\n            }\n        };\n        var zoomchange = function zoomchange() {\n            if (canvas.zoom > 3.6) {\n                amino_acids.attr({ 'display': 'block' });\n                amino_acids_shown = true;\n                update_sequence();\n            } else if (canvas.zoom > 0.2) {\n                amino_acids.attr({ 'display': 'none' });\n                amino_acids_shown = false;\n            } else {\n                amino_acids.attr({ 'display': 'none' });\n                amino_acids_shown = false;\n            }\n        };\n        if (!container.panevents) {\n            canvas.addEventListener('panstart', panstart, false);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canvas, 'panend', panend);\n            container.panevents = true;\n        }\n\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(canvas, 'zoomChange', zoomchange, false);\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(amino_acids[0], 'removed', function () {\n            canvas.removeEventListener('panstart', panstart);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(canvas, 'panend', panend);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(canvas, 'zoomChange', zoomchange);\n            delete container.panevents;\n        });\n        return amino_acids;\n    };\n\n    CondensedSequenceRenderer.prototype.renderTextTrack = function (lay, in_text) {\n        var layerName = lay;\n        if (typeof layerName !== 'string') {\n            layerName = lay.name;\n        }\n        var canvas = this._canvas;\n        if (!canvas || typeof layerName == 'undefined') {\n            return;\n        }\n        var renderer = this;\n        var container = this._layer_containers[layerName];\n        var result = this.addTextTrack(in_text, container);\n        return result;\n    };\n})();\n\nCondensedSequenceRenderer.prototype.EnableHighlights = function () {\n    var renderer = this;\n    var highlights = [];\n    var createNewHighlight = function createNewHighlight() {\n        var highlight = renderer._canvas.rect(0, 0, 0, '100%');\n        highlight.addEventListener('click', ev => {\n            ev.stopPropagation();\n            return false;\n        });\n        highlight.addEventListener('mousedown', ev => {\n            ev.stopPropagation();\n            return false;\n        });\n\n        highlight.addEventListener('touchstart', ev => {\n            ev.stopPropagation();\n            return false;\n        });\n\n        highlight.setAttribute('fill', '#ffdddd');\n        highlight.removeAttribute('stroke');\n        var pnode = highlight.parentNode;\n        pnode.insertBefore(highlight, pnode.firstChild.nextSibling);\n        highlights.push(highlight);\n    };\n    createNewHighlight();\n\n    renderer.moveHighlight = function () {\n        var vals = Array.prototype.slice.call(arguments);\n        var RS = this._RS;\n        var i = 0,\n            idx = 0;\n        for (i = 0; i < vals.length; i += 2) {\n            var from = vals[i];\n            var to = vals[i + 1];\n            var highlight = highlights[idx];\n            if (!highlight) {\n                createNewHighlight();\n                highlight = highlights[idx];\n            }\n            if (highlight.previousSibling.previousSibling && highlights.indexOf(highlight.previousSibling.previousSibling) < 0) {\n                highlight.parentNode.insertBefore(highlight, highlight.parentNode.firstChild.nextSibling);\n            }\n            highlight.setAttribute('x', (from - 1) * RS);\n            highlight.setAttribute('width', (to - (from - 1)) * RS);\n            highlight.setAttribute('visibility', 'visible');\n            idx += 1;\n        }\n        for (i = idx; i < highlights.length; i++) {\n            highlights[i].setAttribute('visibility', 'hidden');\n        }\n    };\n};\n\n(function () {\n\n    var bindClick = function bindClick(element, handler) {\n        if (\"ontouchstart\" in window) {\n            element.addEventListener('touchstart', function (ev) {\n                var startX = ev.touches[0].clientX;\n                var startY = ev.touches[0].clientY;\n                var reset = function reset() {\n                    document.body.removeEventListener('touchmove', move);\n                    element.removeEventListener('touchend', end);\n                };\n                var end = function end(ev) {\n                    reset();\n                    ev.stopPropagation();\n                    ev.preventDefault();\n                    if (handler) {\n                        handler.call(null, ev);\n                    }\n                };\n                var move = function move(ev) {\n                    if (Math.abs(ev.touches[0].clientX - startX) > 10 || Math.abs(ev.touches[0].clientY - startY) > 10) {\n                        reset();\n                    }\n                };\n                //FIXME - PASSIVE\n                document.body.addEventListener('touchmove', move, { passive: true });\n                element.addEventListener('touchend', end, false);\n            }, { passive: true });\n            //FIXME - PASSIVE\n        } else {\n            element.addEventListener('click', handler, false);\n        }\n    };\n\n    var mousePosition = function mousePosition(evt) {\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX - (document.body.scrollLeft + document.documentElement.scrollLeft);\n            posy = evt.pageY - (document.body.scrollTop + document.documentElement.scrollTop);\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n        if (self.targetElement) {\n            posx = evt.screenX;\n            posy = evt.screenY;\n        }\n        return [posx, posy];\n    };\n\n    var svgPosition = function svgPosition(ev, svgel) {\n        var positions = mousePosition(ev.changedTouches ? ev.changedTouches[0] : ev);\n        var p = {};\n        if (svgel.nodeName == 'svg') {\n            p = svgel.createSVGPoint();\n            var rootCTM = svgel.getScreenCTM();\n            p.x = positions[0];\n            p.y = positions[1];\n\n            self.matrix = rootCTM.inverse();\n            p = p.matrixTransform(self.matrix);\n        } else {\n            p.x = positions[0];\n            p.y = positions[1];\n        }\n        return p;\n    };\n\n    var notifySelectionToLayers = function notifySelectionToLayers(start, end, renderer) {\n        let selections = new WeakMap();\n        selections.set(renderer, [start, end]);\n        for (let layname of Object.keys(renderer._layer_containers || {})) {\n            var lay = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(layname);\n            let values = [null, null];\n            if (start && end) {\n                values = [renderer.scalePosition(start, layname, true), renderer.scalePosition(end, layname, true)];\n            }\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(lay, 'selection', values);\n            selections.set(lay, values);\n        }\n        __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(renderer, 'selection', selections);\n    };\n\n    CondensedSequenceRenderer.prototype.enableSelection = function (callback) {\n        var self = this;\n\n        if (!self._canvas) {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(self, 'sequenceChange', function () {\n                self.enableSelection();\n            });\n            return;\n        }\n\n        var canvas = self._canvas;\n        var start;\n        var end;\n        var end_func;\n        var local_start;\n        var local_end;\n\n        let in_drag = false;\n\n        var moving_func = function moving_func(evt) {\n            evt.preventDefault();\n\n            var p = svgPosition(evt, canvas);\n            end = p.x;\n\n            if (start > end) {\n                local_end = parseInt(start / 50);\n                local_start = parseInt(end / 50);\n            } else {\n                local_end = parseInt(end / 50);\n                local_start = parseInt(start / 50);\n            }\n            self.select(local_start + 1, local_end);\n        };\n\n        // Do not send the click event to the canvas\n        // this screws up with doing things on the selection\n        // Need alternative method to clear selection\n        //\n        bindClick(canvas, function (evt) {\n            if (!self.selecting) {\n                return;\n            }\n        });\n\n        canvas.addEventListener('mousedown', function (evt) {\n            if (!self.selecting) {\n                return;\n            }\n            in_drag = true;\n            self.select();\n            var positions = mousePosition(evt);\n            var p = {};\n            if (canvas.nodeName == 'svg') {\n                p = canvas.createSVGPoint();\n                var rootCTM = this.getScreenCTM();\n                p.x = positions[0];\n                p.y = positions[1];\n\n                self.matrix = rootCTM.inverse();\n                p = p.matrixTransform(self.matrix);\n            } else {\n                p.x = positions[0];\n                p.y = positions[1];\n            }\n            start = p.x;\n            end = p.x;\n            canvas.addEventListener('mousemove', moving_func, false);\n            evt.preventDefault();\n        }, false);\n\n        canvas.addEventListener('mouseup', function (evt) {\n            if (in_drag) {\n                notifySelectionToLayers(local_start === null ? null : local_start + 1, local_end, self);\n                local_start = null;\n                local_end = null;\n                in_drag = false;\n            }\n            canvas.removeEventListener('mousemove', moving_func);\n            evt.preventDefault();\n        });\n\n        canvas.addEventListener('touchend', function () {\n            if (in_drag) {\n                setTimeout(function () {\n                    notifySelectionToLayers(local_start === null ? null : local_start + 1, local_end, self);\n                    local_start = null;\n                    local_end = null;\n                    in_drag = false;\n                }, 500);\n            }\n            canvas.removeEventListener('touchmove', moving_func);\n        });\n\n        canvas.addEventListener('touchstart', function (evt) {\n            if (!self.selecting) {\n                return;\n            }\n            if (evt.changedTouches.length == 1) {\n                in_drag = true;\n                evt.preventDefault();\n                var positions = mousePosition(evt.changedTouches[0]);\n                var p = {};\n                if (canvas.nodeName == 'svg') {\n                    p = canvas.createSVGPoint();\n                    var rootCTM = this.getScreenCTM();\n                    p.x = positions[0];\n                    p.y = positions[1];\n\n                    self.matrix = rootCTM.inverse();\n                    p = p.matrixTransform(self.matrix);\n                } else {\n                    p.x = positions[0];\n                    p.y = positions[1];\n                }\n                start = p.x;\n                end = p.x;\n                canvas.addEventListener('touchmove', moving_func, { passive: false });\n            }\n        }, { passive: false });\n        //FIXME - PASSIVE\n    };\n})();\n\n/*\n * Get a canvas set of the visible tracers on this renderer\n */\nCondensedSequenceRenderer.prototype._visibleTracers = function () {\n    var tracers = null;\n    for (var i in __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers) {\n        if (this.isLayerActive(i) && this._layer_containers[i] && this._layer_containers[i].tracers) {\n            if (!tracers) {\n                tracers = this._layer_containers[i].tracers;\n            } else {\n                tracers.concat(this._layer_containers[i].tracers);\n            }\n        }\n    }\n    return tracers;\n};\n\nCondensedSequenceRenderer.prototype._resizeContainer = function () {\n    var RS = this._RS;\n    if (this._container && this._canvas) {\n\n        var width = (this.zoom || 1) * 2 * this.sequence.length;\n        var height = (this.zoom || 1) * 2 * (this._canvas._canvas_height / this._RS);\n        if (this._canvas_callout_padding) {\n            height += this._canvas_callout_padding;\n        }\n        this._canvas.setAttribute('width', width);\n        this._canvas.setAttribute('height', height);\n        this.navigation.setDimensions(width, height);\n\n        if (this.grow_container) {\n            this._container_canvas.setAttribute('height', height);\n            // this._container.style.height = height+'px';        \n        } else {\n            this._container_canvas.setAttribute('height', '100%');\n            this._container_canvas.setAttribute('width', '100%');\n\n            // this._container.style.height = 'auto';\n            this.navigation.setZoom(this.zoom);\n        }\n    }\n};\n\n(function (clazz) {\n\n    var vis_change_event = function vis_change_event(renderer, visibility) {\n        var self = this;\n        if (!renderer._layer_containers[self.name] || renderer._layer_containers[self.name].length <= 0) {\n            return;\n        }\n\n        if (!visibility) {\n            if (renderer._layer_containers[self.name].tracers) {\n                renderer._layer_containers[self.name].tracers.hide();\n            }\n        }\n    };\n\n    /**\n     * Add a layer to this renderer.\n     * @param {Object} layer    Layer object to add. The layer data is used to create a track that can be independently shown/hidden.\n     *                          The track itself is by default hidden.\n     */\n    clazz.prototype.addTrack = function (layer) {\n        var RS = this._RS;\n        var renderer = this;\n\n        if (!this._canvas) {\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(this, 'sequencechange', function () {\n                this.addTrack(layer);\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(this, 'sequencechange', arguments.callee);\n            });\n            console.log(\"No canvas, cannot add track, waiting for sequencechange event\");\n            return;\n        }\n\n        var layer_containers = this._layer_containers || [];\n\n        if (!layer_containers[layer.name] || layer_containers[layer.name] === null) {\n            layer_containers[layer.name] = this._canvas.set();\n            if (!layer_containers[layer.name].track_height) {\n                layer_containers[layer.name].track_height = renderer.trackHeight || 4;\n            }\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(layer, 'visibilityChange', vis_change_event);\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(layer, 'visibilityChange', vis_change_event);\n            var event_names = ['click', 'mouseover', 'mousedown', 'mousemove', 'mouseout', 'mouseup', 'mouseenter', 'mouseleave'];\n            var ev_function = function ev_function(ev, original_event, element) {\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(layer, ev.type, [original_event, element.position_start, element.position_end]);\n            };\n            // for (var i = 0 ; i < event_names.length; i++) {\n            //     bean.add(layer_containers[layer.name]._event_proxy,event_names[i],ev_function);\n            // }\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(layer, 'removed');\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(layer, 'removed', function (rend) {\n                if (rend) {\n                    rend.removeTrack(this);\n                } else {\n                    renderer.removeTrack(this);\n                }\n            });\n        }\n\n        this._layer_containers = layer_containers;\n    };\n\n    clazz.prototype.removeTrack = function (layer) {\n        if (!this._layer_containers) {\n            return;\n        }\n        var layer_containers = this._layer_containers || [];\n        if (layer_containers[layer.name]) {\n            let elements = [].concat(layer_containers[layer.name]);\n            for (let el of elements) {\n                this.remove(layer.name, el);\n            }\n            delete this._layer_containers[layer.name];\n            layer.disabled = true;\n        }\n    };\n\n    var refresh_id = 0;\n    clazz.prototype.disablePrintResizing = function () {\n        delete this._media_func;\n    };\n\n    clazz.prototype.enablePrintResizing = function () {\n        if (!(this.win() || window).matchMedia) {\n            return;\n        }\n        if (this._media_func) {\n            return this._media_func;\n        }\n        this._media_func = function (matcher) {\n            var self = this;\n            if (!self._canvas) {\n                return;\n            }\n            if (self.grow_container) {\n                if (matcher.matches) {\n                    delete self._container_canvas.parentNode.cached_width;\n                    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self._canvas, 'panend');\n                }\n                return;\n            }\n            var match = matcher;\n            if (!match.matches) {\n                if (self.old_zoom) {\n                    var a_zoom = self.old_zoom;\n                    self.old_zoom = null;\n                    self.zoomCenter = null;\n                    self.withoutRefresh(function () {\n                        self.zoom = a_zoom;\n                    });\n                    self._canvas.setCurrentTranslateXY(self.old_translate, 0);\n                    self._container_canvas.setAttribute('viewBox', self.old_viewbox);\n                    // self._container.style.height = 'auto';\n                    self.old_zoom = null;\n                    self.old_translate = null;\n                    self.refresh();\n                    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self._canvas, 'zoomChange');\n                }\n                return;\n            }\n            try {\n                var container = self._container;\n                self.old_translate = self._canvas.currentTranslateCache.x;\n                self._canvas.setCurrentTranslateXY(0, 0);\n                var zoomFactor = 0.95 * container.clientWidth / self.sequence.length;\n                if (!self.old_zoom) {\n                    self.old_zoom = self.zoom;\n                    self.old_viewbox = self._container_canvas.getAttribute('viewBox');\n                }\n                self.zoomCenter = null;\n                self._container_canvas.removeAttribute('viewBox');\n                self.withoutRefresh(function () {\n                    self.zoom = zoomFactor;\n                });\n                self.refresh();\n            } catch (err) {\n                console.log(err);\n                console.log(err.stack);\n            }\n        };\n        var rend = this;\n        if (!rend._bound_media) {\n            (this.win() || window).matchMedia('print').addListener(function (matcher) {\n                if (rend._media_func) {\n                    rend._media_func(matcher);\n                }\n            });\n        }\n        rend._bound_media = true;\n    };\n\n    /**\n     * Cause a refresh of the renderer, re-arranging the tracks on the canvas, and resizing the canvas if necessary.\n     * @param {Boolean} animateds Cause this refresh to be an animated refresh\n     */\n    clazz.prototype.refresh = function (animated) {\n        if (!this._canvas) {\n            return;\n        }\n\n        var layer_containers = this._layer_containers || [];\n\n        var RS = this._RS;\n        var track_heights = 0;\n        var order = this.trackOrder || [];\n        var fixed_font_scale = this.fixedFontScale;\n\n        if (this.navigation) {\n            this.navigation.reset();\n        }\n        for (var i = 0; i < order.length; i++) {\n\n            var name = order[i];\n            var container = layer_containers[name];\n            if (!container) {\n                continue;\n            }\n            var y_val;\n            if (!this.isLayerActive(name)) {\n                var attrs = { 'y': -1 * this._axis_height * RS, 'height': RS * container.track_height / this.zoom, 'visibility': 'hidden' };\n                //            var attrs = { 'y' : (this._axis_height  + (track_heights - container.track_height )/ this.zoom)*RS, 'height' :  RS * container.track_height / this.zoom ,'visibility' : 'hidden' };\n                if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(name).group) {\n                    var controller_track = this.navigation.getController(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(name).group);\n                    if (controller_track && this.isLayerActive(controller_track)) {\n                        attrs.y = layer_containers[controller_track.name].currenty();\n                    }\n                }\n\n                if (container.fixed_track_height) {\n                    delete attrs.height;\n                }\n\n                if (animated) {\n                    container.animate(attrs);\n                } else {\n                    container.attr(attrs);\n                }\n                if (container.tracers) {}\n                continue;\n            } else {\n                // container.attr({ 'opacity' : '1' });\n            }\n\n            var tracer_top = track_heights;\n\n            if (container.fixed_track_height) {\n\n                var track_height = container.fixed_track_height;\n\n                y_val = this._axis_height + track_heights / this.zoom;\n\n                if (animated) {\n                    container.animate({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                } else {\n                    container.attr({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                }\n                if (this.navigation) {\n                    y_val -= 1 * container.track_height / this.zoom;\n                    this.navigation.renderTrack(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(name), y_val * RS, RS * container.fixed_track_height / this.zoom, { 'font-scale': (fixed_font_scale || 1) * 3 * container.track_height / container.fixed_track_height });\n                }\n                track_heights += container.fixed_track_height + this.trackGap - container.track_height;\n            } else {\n                y_val = this._axis_height + track_heights / this.zoom;\n                if (animated) {\n                    container.animate({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                } else {\n                    container.attr({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                }\n                if (this.navigation) {\n                    y_val -= 1 * container.track_height / this.zoom;\n                    this.navigation.renderTrack(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(name), y_val * RS, RS * 3 * container.track_height / this.zoom, fixed_font_scale ? { 'font-scale': fixed_font_scale } : null);\n                    track_heights += container.track_height;\n                }\n                track_heights += container.track_height + this.trackGap;\n            }\n            container.refresh_zoom();\n\n            if (container.tracers) {\n                var disp_style = this.isLayerActive(name) && this.zoom > 3.6 ? 'visible' : 'hidden';\n                var height = (1.5 + tracer_top / this.zoom) * RS;\n\n                if (animated) {\n                    container.tracers.animate({ 'visibility': disp_style, 'y': 0.65 * this._axis_height * RS, 'height': height });\n                } else {\n                    container.tracers.attr({ 'visibility': disp_style, 'y': 0.65 * this._axis_height * RS, 'height': height });\n                }\n            }\n        }\n\n        var viewBox = [-1, 0, 0, 0];\n        viewBox[0] = -2 * RS;\n        viewBox[2] = (this.sequence.split('').length + this.padding + 2) * RS;\n        viewBox[3] = (this._axis_height + track_heights / this.zoom + this.padding / this.zoom) * RS;\n        this._canvas.setAttribute('viewBox', viewBox.join(' '));\n        this._canvas._canvas_height = viewBox[3];\n\n        var outer_viewbox = [].concat(viewBox);\n\n        outer_viewbox[0] = 0;\n        outer_viewbox[2] = this.zoom * (2 * this.sequence.length) + this.padding;\n        outer_viewbox[3] = this.zoom * 2 * (this._axis_height + track_heights / this.zoom + this.padding / this.zoom);\n        if (!this.grow_container) {\n            this._container_canvas.setAttribute('viewBox', outer_viewbox.join(' '));\n        } else {\n            this._container_canvas.removeAttribute('viewBox');\n        }\n\n        this._resizeContainer();\n\n        viewBox[0] = 0;\n        if (this.navigation) {\n            if (this.grow_container) {\n                this.navigation.nav_width_base = outer_viewbox[3] < 200 ? outer_viewbox[3] : 200;\n            }\n            this.navigation.move_closer();\n            if (this.navigation.visible()) {\n                this._canvas.style.GomapScrollLeftMargin = 100 * RS / this.zoom;\n            } else {\n                this._canvas.style.GomapScrollLeftMargin = 1000;\n            }\n            this.navigation.setViewBox(viewBox.join(' '));\n        }\n\n        if (this.navigation) {\n            this.navigation.refresh();\n        }\n    };\n\n    /*\n    \n    Modified from:\n    \n    http://stackoverflow.com/questions/5433806/convert-embedded-svg-to-png-in-place\n    \n    None of the Safari browsers work with this, giving DOM Exception 18\n    \n    http://stackoverflow.com/questions/8158312/rasterizing-an-in-document-svg-to-canvas\n    \n    I think this is the relevant bug.\n    \n    https://bugs.webkit.org/show_bug.cgi?id=119492\n    \n    */\n\n    var svgDataURL = function svgDataURL(svg) {\n        svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n\n        var svgAsXML = new XMLSerializer().serializeToString(svg);\n        return \"data:image/svg+xml,\" + encodeURIComponent(svgAsXML);\n    };\n\n    clazz.prototype.pngURL = function (pngReady, out_width) {\n        //var svg = document.getElementById('foobar');//this._canvas;\n        var svg_data = this._canvas.cloneNode(true);\n        var sequences = svg_data.querySelectorAll('text[data-spaces]');\n        for (var i = 0; i < sequences.length; i++) {\n            sequences[i].parentNode.removeChild(sequences[i]);\n        }\n\n        // Set up the aspect ratio of the output element\n        var svg = document.createElementNS(svgns, 'svg');\n        svg.setAttribute('width', this._container_canvas.getBoundingClientRect().width);\n        svg.setAttribute('height', this._container_canvas.getBoundingClientRect().height);\n        svg.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n\n        var transform_group = document.createElementNS(svgns, 'g');\n        transform_group.setAttribute('transform', this._canvas.parentNode.getAttribute('transform'));\n        svg.appendChild(transform_group);\n        transform_group.appendChild(svg_data);\n\n        // We are missing the defs elements from the containing node\n\n        var all_defs = this._container_canvas.querySelectorAll('defs');\n        for (var i = 0; i < all_defs.length; i++) {\n            svg.appendChild(all_defs[i].cloneNode(true));\n        }\n        var can = document.createElement('canvas');\n        var total_width = 2 * parseInt(svg.getAttribute('width'));\n        var total_height = 2 * parseInt(svg.getAttribute('height'));\n        if (out_width) {\n            if (total_width > out_width) {\n                var ratio = total_width / out_width;\n                total_width = out_width;\n                total_height = parseInt(total_height / ratio);\n            }\n        }\n        can.width = total_width;\n        can.height = total_height;\n        var svgImg = new Image();\n        svgImg.width = 1;\n        svgImg.height = 1;\n        var ctx = can.getContext('2d');\n        svgImg.onload = function () {\n            ctx.drawImage(svgImg, 0, 0, can.width, can.height);\n            pngReady(can.toDataURL());\n        };\n        svgImg.onerror = function () {\n            console.log(\"Got an error\");\n        };\n        var dataurl = svgDataURL(svg);\n        svgImg.src = dataurl;\n    };\n})(CondensedSequenceRenderer);\n\n/**\n * Zoom level has changed for this renderer\n * @name    CondensedSequenceRenderer#zoomChange\n * @event\n * @param   {Object}    e\n */\n\nCondensedSequenceRenderer.Zoom = function (renderer) {\n\n    /**\n     *  @lends CondensedSequenceRenderer.prototype\n     *  @property   {Number}    zoom        The zoom level for a renderer. Minimum zoom level is zero, and defaults to the default zoom value\n     *  @property   {Array}     trackOrder  The order of tracks on the renderer, an array of layer/group names.\n     *  @property   {Number}    padding     Padding to apply to the right and top of plots (default 10).\n     *  @property   {Number}    trackGap    Vertical gap between tracks (default 10)\n     */\n    var timeout = null;\n    var start_zoom = null;\n    var zoom_level = null;\n    var center_residue = null;\n    var start_x = null;\n    var transformer;\n    var shifter;\n    var accessors = {\n        setZoom: function setZoom(zoomLevel) {\n            var container_width = renderer._container.cached_width;\n            if (!container_width) {\n                container_width = renderer._container.clientWidth;\n            }\n            if (!renderer.sequence) {\n                zoom_level = zoomLevel;\n                return;\n            }\n            var min_zoom_level = container_width / (2 * renderer.sequence.length);\n            // if  (! renderer.grow_container ) {\n            //     min_zoom_level = 0.3 / 2 * min_zoom_level;\n            // }\n\n            // var min_zoom_level = renderer.sequence ? (0.3 / 2) * container_width / renderer.sequence.length : 0.5;\n            if (zoomLevel < min_zoom_level) {\n                zoomLevel = min_zoom_level;\n            }\n            if (zoomLevel > 10) {\n                zoomLevel = 10;\n            }\n\n            var self = this;\n\n            if (zoomLevel == zoom_level) {\n                if (this.refresh.suspended && self._canvas && self._canvas.zoom !== parseFloat(zoom_level)) {\n                    self._canvas.zoom = parseFloat(zoom_level);\n                    self._canvas.setScale(1);\n\n                    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self._canvas, 'zoomChange');\n                }\n                return;\n            }\n\n            if (!self._canvas) {\n                zoom_level = zoomLevel;\n                return;\n            }\n\n            var no_touch_center = false;\n\n            if (self.zoomCenter == 'center') {\n                no_touch_center = true;\n                self.zoomCenter = { 'x': self._RS * 0.5 * (self.leftVisibleResidue() + self.rightVisibleResidue()) };\n            }\n\n            if (self.zoomCenter && !center_residue) {\n                start_x = self._canvas.currentTranslateCache.x || 0;\n                center_residue = self.zoomCenter ? self.zoomCenter.x : 0;\n            } else if (center_residue && !self.zoomCenter) {\n                // We should not be zooming if there is a center residue and no zoomCenter;\n                return;\n            }\n\n            if (timeout) {\n                clearTimeout(timeout);\n            } else {\n                start_zoom = parseFloat(zoom_level || 1);\n            }\n\n            zoom_level = parseFloat(zoomLevel);\n\n            var scale_value = Math.abs(parseFloat(zoomLevel) / start_zoom);\n\n            window.cancelAnimationFrame(transformer);\n            transformer = window.requestAnimationFrame(function () {\n                // Rendering bottleneck\n                self._canvas.setScale(scale_value);\n            });\n\n            __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self._canvas, '_anim_begin');\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('panstart', false, true);\n                self._canvas.dispatchEvent(evObj);\n            }\n            var old_x = self._canvas.currentTranslateCache.x;\n            if (center_residue) {\n                var delta = (start_zoom - zoom_level) / (scale_value * 25) * center_residue;\n                delta += start_x / scale_value;\n                cancelAnimationFrame(shifter);\n                shifter = window.requestAnimationFrame(function () {\n\n                    // Rendering bottleneck\n                    self._canvas.setCurrentTranslateXY(delta, (start_zoom - zoom_level) / scale_value * self._axis_height * 2);\n                });\n            }\n\n            var end_function = function end_function() {\n                timeout = null;\n                var scale_value = Math.abs(parseFloat(zoom_level) / start_zoom);\n\n                self._canvas.setScale(null);\n\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self._canvas, 'panend');\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self._canvas, '_anim_end');\n                let zoomchange = function zoomchange() {\n                    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].remove(self._canvas, 'zoomChange', zoomchange);\n                    self.refresh();\n                    if (typeof center_residue != 'undefined') {\n                        var delta = (start_zoom - zoom_level) / 25 * center_residue;\n                        delta += start_x;\n\n                        self._resizeContainer();\n\n                        if (self._canvas.shiftPosition) {\n                            self._canvas.shiftPosition(delta, 0);\n                        } else {\n                            self._canvas.setCurrentTranslateXY(delta, 0);\n                        }\n                    }\n                    center_residue = null;\n                    start_x = null;\n                };\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].add(self._canvas, 'zoomChange', zoomchange);\n\n                if (self._canvas) {\n                    self._canvas.zoom = parseFloat(zoom_level);\n                    __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self._canvas, 'zoomChange');\n                }\n                __WEBPACK_IMPORTED_MODULE_3__bean__[\"a\" /* default */].fire(self, 'zoomChange');\n            };\n\n            if (!this.refresh.suspended) {\n                timeout = setTimeout(end_function, 100);\n            } else {\n                end_function();\n            }\n        },\n        fitZoom: function fitZoom() {\n            var container_width = renderer._container.cached_width;\n            if (!container_width) {\n                container_width = renderer._container.clientWidth;\n            }\n            var min_zoom_level = 0.5;\n            if (renderer.sequence) {\n                min_zoom_level = container_width / (2 * renderer.sequence.length);\n            }\n            renderer.zoom = min_zoom_level;\n        },\n        getZoom: function getZoom() {\n            return zoom_level || 1;\n        }\n    };\n\n    if (Object.defineProperty && !__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].IE8) {\n        Object.defineProperty(renderer, \"zoom\", {\n            get: accessors.getZoom,\n            set: accessors.setZoom\n        });\n    }\n\n    renderer.fitZoom = accessors.fitZoom;\n};\n\n/* Add some properties that will trigger a refresh on the renderer when they are changed.\n   These are all stateless\n */\n\n(function (clazz) {\n\n    var accessors = {\n        getPadding: function getPadding() {\n            return this._padding || 10;\n        },\n\n        setPadding: function setPadding(padding) {\n            this._padding = padding;\n            this.refresh();\n        },\n\n        getTrackGap: function getTrackGap() {\n            if (!this._track_gap) {\n                var default_value = \"ontouchend\" in document ? 20 : 10;\n                this._track_gap = this._track_gap || default_value;\n            }\n\n            return this._track_gap;\n        },\n\n        setTrackGap: function setTrackGap(trackGap) {\n            this._track_gap = trackGap;\n            this.refresh();\n        }\n    };\n\n    if (Object.defineProperty && !__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].IE8) {\n        Object.defineProperty(clazz.prototype, \"padding\", {\n            get: accessors.getPadding,\n            set: accessors.setPadding\n        });\n        Object.defineProperty(clazz.prototype, \"trackGap\", {\n            get: accessors.getTrackGap,\n            set: accessors.setTrackGap\n        });\n    }\n})(CondensedSequenceRenderer);\n\nCondensedSequenceRenderer.Navigation = __WEBPACK_IMPORTED_MODULE_2__CondensedSequenceRendererNavigation__[\"a\" /* default */];\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CondensedSequenceRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!************************************!*\
  !*** ../gator/js/lib/SVGCanvas.js ***!
  \************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bean__ = __webpack_require__(/*! ../bean */ 0);\n\n\nconst SVGCanvas = function () {\n\n    var extended_elements = [];\n    var DEFAULT_RS = 1;\n    var svgns = 'http://www.w3.org/2000/svg';\n\n    function extend_array(an_array, RS) {\n        var curr_x, curr_y, curr_transform, targ_disp, a_disp;\n\n        an_array.visibility = function () {\n            var curr_disp = 'hidden';\n\n            for (var i = 0; i < an_array.length; i++) {\n                if (Array.isArray(an_array[i])) {\n                    continue;\n                }\n\n                a_disp = an_array[i].getAttribute('visibility');\n                if (a_disp && a_disp != 'hidden') {\n                    curr_disp = a_disp;\n                    break;\n                }\n            }\n            return curr_disp;\n        };\n\n        an_array.currenty = function () {\n            var a_y;\n            var filtered = an_array.filter(function (el) {\n                return el && !Array.isArray(el);\n            });\n            if (filtered[0] && filtered[0].getAttribute('transform')) {\n                a_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(filtered[0].getAttribute('transform'));\n                if (a_y !== null && typeof a_y !== 'undefined') {\n                    a_y = a_y[2];\n                }\n            }\n            return filtered[0] ? parseInt(a_y || filtered[0].getAttribute('y') || 0, 10) : 0;\n        };\n\n        an_array.animate = function (hsh) {\n            if (typeof hsh.y == 'undefined') {\n                attr(hsh);\n                return;\n            }\n            if (an_array.length === 0) {\n                return;\n            }\n\n            var hash = {};\n            var key;\n\n            for (key in hsh) {\n                if (hsh.hasOwnProperty(key)) {\n                    hash[key] = hsh[key];\n                }\n            }\n\n            setup_anim_clocks();\n\n            if (an_array.animating) {\n                for (var i = 0; i < (anim_clock_funcs || []).length; i++) {\n                    if (anim_clock_funcs[i].target_set != an_array) {\n                        continue;\n                    }\n                    an_array.animating = false;\n                    anim_clock_funcs.splice(i, 1);\n                }\n            }\n\n            var curr_disp = an_array.visibility();\n\n            var target_disp = hash.visibility;\n            if (curr_disp == target_disp && target_disp == 'hidden') {\n                attr(hsh);\n                return;\n            }\n\n            var curr_y = an_array.currenty();\n\n            if (isNaN(parseInt(curr_y, 10))) {\n                console.log(\"Have a NaN y value, skipping\");\n                return;\n            }\n\n            var target_y = parseInt(hash.y, 10);\n\n            delete hash.y;\n\n            if (curr_disp == target_disp && target_disp == 'visible') {\n                delete hash.visibility;\n                target_disp = null;\n                attr({ 'visibility': 'visible' });\n            }\n\n            if (hash.visibility == 'hidden') {\n                delete hash.visibility;\n            }\n\n            attr(hash);\n            var counter = 0;\n\n            if (target_y != curr_y) {\n                var anim_steps = 1 * (Math.abs(parseInt((target_y - curr_y) / (50 * RS), 10) / rate) + 1);\n                var diff = (target_y - curr_y) / anim_steps;\n                hash.y = curr_y || 0;\n                var orig_func = an_array.animate;\n                an_array.animating = true;\n                hash.y = curr_y + diff * 1;\n\n                let step_func = function step_func(step) {\n                    if (diff < 0 && hash.y < target_y) {\n                        hash.y = target_y;\n                    }\n                    if (diff > 0 && hash.y > target_y) {\n                        hash.y = target_y;\n                    }\n                    attr(hash);\n                    counter += step || 1;\n                    if (hash.y != target_y) {\n                        hash.y = curr_y + diff * (counter + 1);\n                        return;\n                    }\n                    an_array.animating = false;\n                    if (target_disp) {\n                        attr({ 'visibility': target_disp });\n                    }\n                    anim_clock_funcs.splice(anim_clock_funcs.indexOf(step_func), 1);\n                };\n\n                anim_clock_funcs.push(step_func);\n                anim_clock_funcs[anim_clock_funcs.length - 1].target_set = an_array;\n            }\n            return;\n        };\n\n        an_array.attr = function (hsh) {\n            if (in_anim) {\n                return this.animate(hsh);\n            }\n            return attr(hsh);\n        };\n\n        var attr = function attr(hsh) {\n            var hash = {};\n            var key;\n            for (key in hsh) {\n                if (hsh.hasOwnProperty(key)) {\n                    hash[key] = hsh[key];\n                }\n            }\n\n            var curr_disp = an_array.visibility();\n\n            var targ_y = parseInt(hash.y, 10);\n            targ_disp = hash.visibility;\n\n            for (key in hash) {\n                if (hash.hasOwnProperty(key)) {\n                    for (var i = 0; i < an_array.length; i++) {\n                        if (!an_array[i]) {\n                            continue;\n                        }\n                        if (Array.isArray(an_array[i])) {\n                            continue;\n                        }\n                        if (an_array[i].style.display == 'none') {\n                            continue;\n                        }\n                        var value = hash[key];\n                        if (key == 'style' && an_array[i].hasAttribute('style')) {\n                            var curr_style = an_array[i].getAttribute('style');\n                            curr_style += '; ' + hash[key];\n                            value = curr_style;\n                        }\n                        var has_translate = an_array[i].hasAttribute('transform') && an_array[i].getAttribute('transform').indexOf('translate') >= 0;\n\n                        if (key == 'height' && an_array[i].setHeight) {\n                            //hasAttribute('transform') && ! an_array[i].no_scale) {\n                            an_array[i].setHeight(hash[key]);\n                        } else if (!(has_translate && (key == 'y' || key == 'x'))) {\n                            an_array[i].setAttribute(key, value);\n                        }\n                        if (key == 'y' && an_array[i].hasAttribute('d')) {\n                            var curr_path = an_array[i].getAttribute('d');\n                            var re = /M\\s*([\\d\\.]+) ([\\d\\.]+)/;\n                            curr_path = curr_path.replace(re, '');\n                            if (isNaN(parseInt(value, 10))) {\n                                throw \"Error \" + key + \" is \" + hash[key];\n                            }\n                            an_array[i].setAttribute('d', 'M0 ' + parseInt(value, 10) + ' ' + curr_path);\n                        }\n                        if (key == 'y' && an_array[i].hasAttribute('cy')) {\n                            an_array[i].setAttribute('cy', hash[key]);\n                        }\n\n                        if (key == 'y' && an_array[i].hasAttribute('transform')) {\n                            curr_transform = an_array[i].getAttribute('transform');\n\n                            curr_x = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)?\\)/.exec(an_array[i].getAttribute('transform'));\n                            if (curr_x === null) {\n                                continue;\n                            }\n                            curr_x = curr_x[1];\n                            curr_transform = curr_transform.replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)?\\)/, 'translate(' + curr_x + ',' + value + ')');\n                            an_array[i].setAttribute('transform', curr_transform);\n                        }\n                        if (key == 'x' && an_array[i].hasAttribute('transform')) {\n                            curr_transform = an_array[i].getAttribute('transform');\n\n                            curr_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(an_array[i].getAttribute('transform'));\n                            if (curr_y === null) {\n                                continue;\n                            }\n                            curr_y = curr_y[2];\n                            curr_transform = curr_transform.replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/, 'translate(' + value + ',' + curr_y + ')');\n                            an_array[i].setAttribute('transform', curr_transform);\n                        }\n                        if (key == 'text-anchor' && an_array[i].hasAttribute('style')) {\n                            an_array[i].style.textAnchor = hash[key];\n                        };\n                    }\n                }\n            }\n        };\n        an_array.hide = function () {\n            this.attr({ 'visibility': 'hidden' });\n        };\n        an_array.show = function () {\n            this.attr({ 'visibility': 'visible' });\n        };\n\n        an_array.refresh_zoom = function () {\n            for (var i = 0; i < an_array.length; i++) {\n                if (Array.isArray(an_array[i])) {\n                    continue;\n                }\n\n                if (an_array[i].zoom_level && an_array[i].zoom_level == 'text') {\n                    if (an_array[i].ownerSVGElement && an_array[i].ownerSVGElement.zoom > 3.5) {\n                        an_array[i].setAttribute('display', 'inline');\n                        an_array[i].setAttribute('opacity', 1);\n                    } else {\n                        an_array[i].setAttribute('display', 'none');\n                    }\n                }\n\n                if (an_array[i].zoom_level && an_array[i].zoom_level == 'summary') {\n                    if (an_array[i].ownerSVGElement && an_array[i].ownerSVGElement.zoom <= 3.5) {\n                        an_array[i].setAttribute('display', 'inline');\n                        an_array[i].setAttribute('opacity', 1);\n                    } else {\n                        an_array[i].setAttribute('display', 'none');\n                    }\n                }\n            }\n        };\n\n        return an_array;\n    }\n\n    var anim_clock_funcs = null,\n        in_anim = false;\n    var anim_clock = null;\n    var rate = 75;\n    var new_rate = null;\n\n    var setup_anim_clocks = function setup_anim_clocks() {\n        if (anim_clock_funcs === null) {\n            anim_clock_funcs = [];\n        } else {\n            anim_clock_funcs.forEach(function (func) {\n                func._last_step = null;\n            });\n            clearInterval(anim_clock);\n        }\n        if (!in_anim) {\n            extended_elements.forEach(function (canv) {\n                __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(canv, '_anim_begin');\n            });\n            in_anim = true;\n        }\n        var start = null;\n        anim_clock = setInterval(function () {\n            if (!anim_clock_funcs || anim_clock_funcs.length === 0) {\n                clearInterval(anim_clock);\n                anim_clock = null;\n                anim_clock_funcs = null;\n                in_anim = false;\n                extended_elements.forEach(function (canv) {\n                    __WEBPACK_IMPORTED_MODULE_0__bean__[\"a\" /* default */].fire(canv, '_anim_end');\n                });\n                return;\n            }\n\n            var suspended_ids = [];\n\n            extended_elements.forEach(function (canv) {\n                suspended_ids.push(canv.suspendRedraw(5000));\n            });\n            var tic = new Date().getTime();\n\n            if (!start) {\n                start = new Date().getTime();\n            }\n\n            for (var i = 0; i < (anim_clock_funcs || []).length; i++) {\n                var end = new Date().getTime();\n                var step_id = parseInt((end - start) / rate, 10);\n                if (new_rate === null && step_id - anim_clock_funcs[i]._last_step > 2) {\n                    new_rate = Math.round(1.6 * rate);\n                }\n                anim_clock_funcs[i].apply(null, [step_id - (anim_clock_funcs[i]._last_step || step_id)]);\n                if (anim_clock_funcs && anim_clock_funcs[i]) {\n                    anim_clock_funcs[i]._last_step = step_id;\n                }\n            }\n            var toc = new Date().getTime();\n\n            extended_elements.forEach(function (canv) {\n                canv.unsuspendRedraw(suspended_ids.shift());\n            });\n\n            var actual_speed = toc - tic;\n            if (actual_speed < rate && new_rate === null && actual_speed >= 1) {\n                rate = Math.round(1.5 * (toc - tic));\n                setup_anim_clocks();\n            } else if (new_rate !== null && new_rate != rate) {\n                rate = new_rate;\n                setup_anim_clocks();\n            }\n        }, rate);\n    };\n    var scale_re = /scale\\((-?\\d+\\.?\\d*)\\)/;\n    var setHeight = function setHeight(height) {\n        var curr_transform = this.getAttribute('transform').toString();\n\n        var curr_scale = scale_re.exec(curr_transform);\n\n        var curr_height = parseFloat(this.getAttribute('height') || 1);\n\n        var new_scale = 1;\n        if (curr_scale === null) {\n            curr_transform += ' scale(1) ';\n            curr_scale = 1;\n        } else {\n            curr_scale = parseFloat(curr_scale[1]);\n        }\n        new_scale = parseFloat(height) / curr_height * curr_scale;\n\n        curr_transform = curr_transform.replace(scale_re, 'scale(' + new_scale + ')');\n\n        this.setAttribute('transform', curr_transform);\n        this.setAttribute('height', height);\n        return new_scale;\n    };\n\n    return function (canvas) {\n\n        var RS = canvas.RS || DEFAULT_RS;\n        canvas.RS = RS;\n        canvas.font_order = 'Helvetica, Verdana, Arial, Sans-serif';\n        extended_elements.push(canvas);\n\n        canvas.makeEl = function (name, attributes) {\n            var result = canvas.ownerDocument.createElementNS(svgns, name);\n            for (var attribute in attributes) {\n                if (attributes.hasOwnProperty(attribute)) {\n                    result.setAttribute(attribute, attributes[attribute]);\n                }\n            }\n            return result;\n        };\n\n        canvas.make_gradient = function (id, x2, y2, stops, opacities) {\n            var gradient = this.makeEl('linearGradient', {\n                'id': id,\n                'x1': '0%',\n                'x2': x2,\n                'y1': '0%',\n                'y2': y2\n            });\n            var total_stops = stops.length;\n            while (stops.length > 0) {\n                var stop_id = Math.round((total_stops - stops.length) / total_stops * 100);\n                var stop = stops.shift();\n                var opacity = opacities.shift();\n                gradient.appendChild(this.makeEl('stop', {\n                    'offset': stop_id + '%',\n                    'style': 'stop-color:' + stop + ';stop-opacity:' + opacity\n                }));\n            }\n            return gradient;\n        };\n\n        canvas.path = function (pathdesc) {\n            var a_path = document.createElementNS(svgns, 'path');\n            a_path.setAttribute('d', pathdesc);\n            a_path.setAttribute('stroke', '#000000');\n            a_path.setAttribute('stroke-width', '1');\n            this.appendChild(a_path);\n            return a_path;\n        };\n\n        canvas.poly = function (points) {\n            var a_poly = document.createElementNS(svgns, 'polygon');\n            a_poly.setAttribute('points', points);\n            this.appendChild(a_poly);\n            return a_poly;\n        };\n\n        canvas.circle = function (x, y, radius) {\n            var a_circle = document.createElementNS(svgns, 'circle');\n            a_circle.setAttribute('cx', typeof x == 'string' ? x : x * RS);\n            a_circle.setAttribute('cy', typeof y == 'string' ? y : y * RS);\n            a_circle.setAttribute('r', typeof radius == 'string' ? radius : radius * RS);\n            a_circle.move = function (new_x) {\n                a_circle.setAttribute('cx', new_x * RS);\n            };\n            this.appendChild(a_circle);\n            return a_circle;\n        };\n\n        canvas.group = function () {\n            var a_g = document.createElementNS(svgns, 'g');\n            this.appendChild(a_g);\n            a_g.push = function (new_el) {\n                a_g.appendChild(new_el);\n            };\n\n            return a_g;\n        };\n\n        canvas.clipPath = function () {\n            var el = document.createElementNS(svgns, 'clipPath');\n            this.appendChild(el);\n            el.push = function (new_el) {\n                el.appendChild(new_el);\n            };\n            return el;\n        };\n\n        canvas.line = function (x, y, x2, y2) {\n            var a_line = document.createElementNS(svgns, 'line');\n            a_line.setAttribute('x1', typeof x == 'string' ? x : x * RS);\n            a_line.setAttribute('y1', typeof y == 'string' ? y : y * RS);\n            a_line.setAttribute('x2', typeof x2 == 'string' ? x2 : x2 * RS);\n            a_line.setAttribute('y2', typeof y2 == 'string' ? y2 : y2 * RS);\n            this.appendChild(a_line);\n            return a_line;\n        };\n\n        canvas.rect = function (x, y, width, height, opts) {\n            if (!opts) {\n                opts = {};\n            }\n            var a_rect = document.createElementNS(svgns, 'rect');\n            a_rect.setAttribute('x', typeof x == 'string' ? x : x * RS);\n            a_rect.setAttribute('y', typeof y == 'string' ? y : y * RS);\n            a_rect.setAttribute('width', typeof width == 'string' ? width : width * RS);\n            a_rect.setAttribute('height', typeof height == 'string' ? height : height * RS);\n            a_rect.setAttribute('stroke', '#000000');\n            this.appendChild(a_rect);\n            if (typeof opts.offset !== \"undefined\") {\n                a_rect.offset = opts.offset;\n                a_rect.setAttribute('transform', 'translate(' + a_rect.getAttribute('x') + ',' + a_rect.getAttribute('y') + ')');\n                a_rect.setAttribute('x', '0');\n                a_rect.setAttribute('y', a_rect.offset * RS);\n            }\n\n            a_rect.move = function (new_x, new_width) {\n                if (typeof this.offset !== \"undefined\" && this.getAttribute('transform')) {\n                    var transform_attr = this.getAttribute('transform');\n                    var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n                    if (matches[1]) {\n                        this.setAttribute('transform', 'translate(' + new_x * RS + ',' + matches[1] + ')');\n                    }\n                    this.setAttribute('width', new_width * RS);\n                } else {\n                    this.setAttribute('x', new_x * RS);\n                    this.setAttribute('width', new_width * RS);\n                }\n            };\n            return a_rect;\n        };\n\n        canvas.roundRect = function (x, y, width, height, r, opts) {\n            var a_rect = this.rect(x, y, width, height, opts);\n            if (typeof r != 'object' || !r.x) {\n                r = { 'x': r, 'y': r };\n            }\n            a_rect.setAttribute('rx', r.x * RS);\n            a_rect.setAttribute('ry', r.y * RS);\n            return a_rect;\n        };\n\n        canvas.ellipticalRect = function (x, y, width, height) {\n            return this.roundRect(x, y, width, height, { 'x': 0.25 * width, 'y': 0.5 * height });\n        };\n        canvas.pentagon = function (x, y, width, height, rotate) {\n            return this.nagon(x, y, width, height, 5, rotate);\n        };\n        canvas.hexagon = function (x, y, width, height, rotate) {\n            return this.nagon(x, y, width, height, 6, rotate);\n        };\n\n        var shape_set_attribute = function shape_set_attribute(attr, val) {\n            this.constructor.prototype.setAttribute.call(this, attr, val);\n            if (attr == 'height' || attr == 'width' || attr == 'x' || attr == 'y') {\n                this.redraw(Math.floor(parseFloat(this.getAttribute('height'))));\n            }\n        };\n\n        canvas.nagon = function (x, y, width, height, n, rotate) {\n            var shape = this.poly(\"\");\n            // shape.setAttribute('transform','translate('+(x*RS)+','+(RS*y)+')');\n            shape.setAttribute('x', x * RS);\n            shape.setAttribute('y', y * RS);\n            shape.setAttribute('width', width * RS);\n            shape.redraw = function (hght) {\n                if (hght) {\n                    this.last_height = hght;\n                } else {\n                    hght = this.last_height;\n                }\n                var a = 0.5 * Math.floor(parseFloat(shape.getAttribute('width')));\n                var b = 0.5 * hght;\n                var points = [];\n                var min_x = null;\n                var max_x = null;\n                for (var i = 0; i < n; i++) {\n                    var angle = rotate / 360 * 2 * Math.PI + 2 / n * Math.PI * i;\n                    var a_x = parseInt(a + a * Math.cos(angle));\n                    var a_y = parseInt(b + b * Math.sin(angle));\n                    points.push([a_x, a_y]);\n                    if (min_x === null || a_x < min_x) {\n                        min_x = a_x;\n                    }\n                    if (max_x === null || a_x > max_x) {\n                        max_x = a_x;\n                    }\n                }\n                var x_pos = Math.floor(parseFloat(shape.getAttribute('x')));\n                var y_pos = Math.floor(parseFloat(shape.getAttribute('y')));\n                points.map(function (points) {\n                    if (points[0] == min_x) {\n                        points[0] = 0;\n                    }\n                    if (points[0] == max_x) {\n                        points[0] = a * 2;\n                    }\n                    points[0] += x_pos;\n                    points[1] = y_pos + 0.5 * hght * (points[1] / b);\n                    return points.join(\",\");\n                });\n                this.setAttribute('points', points.join(\" \"));\n            };\n            shape.setHeight = shape.redraw;\n            shape.move = function (new_x, new_width) {\n                var curr_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(this.getAttribute('transform'));\n                if (curr_y === null) {\n                    return;\n                }\n                curr_y = curr_y[2];\n                var curr_transform = this.getAttribute('transform').replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/, 'translate(' + new_x * RS + ',' + curr_y + ')');\n                this.setAttribute('transform', curr_transform);\n                a = 0.5 * new_width * RS;\n            };\n            shape.setAttribute = shape_set_attribute;\n            shape.redraw(height * RS);\n            return shape;\n        };\n\n        canvas.use = function (ref, x, y, width, height) {\n            var a_use = document.createElementNS(svgns, 'use');\n            a_use.setAttribute('x', typeof x == 'string' ? x : x * RS);\n            a_use.setAttribute('y', typeof y == 'string' ? y : y * RS);\n            a_use.setAttribute('width', typeof width == 'string' ? width : width * RS);\n            a_use.setAttribute('height', typeof height == 'string' ? height : height * RS);\n            a_use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', ref);\n            this.appendChild(a_use);\n\n            return a_use;\n        };\n\n        canvas.a = function (href) {\n            var a_anchor = document.createElementNS(svgns, 'a');\n            a_anchor.setAttribute('target', '_new');\n            a_anchor.setAttributeNS('http://www.w3.org/1999/xlink', 'href', href);\n            this.appendChild(a_anchor);\n            return a_anchor;\n        };\n\n        canvas.button = function (x, y, width, height, text) {\n            var fo = document.createElementNS(svgns, 'foreignObject');\n            fo.setAttribute('x', x);\n            fo.setAttribute('y', y);\n            fo.setAttribute('width', x + width);\n            fo.setAttribute('height', y + height);\n            if (!fo.style) {\n                fo.setAttribute('style', 'position: absolute;');\n            } else {\n                fo.style.position = 'absolute';\n            }\n            this.appendChild(fo);\n            var button = document.createElement('button');\n            button.style.display = 'block';\n            button.textContent = text;\n            fo.appendChild(button);\n            return button;\n        };\n\n        canvas.svgbutton = function (x, y, width, height, txt) {\n            var button = this.group();\n            var back = this.rect(x, y, width, height);\n            back.setAttribute('rx', '10');\n            back.setAttribute('ry', '10');\n            back.setAttribute('stroke', '#ffffff');\n            back.setAttribute('stroke-width', '2');\n            back.setAttribute('fill', 'url(#simple_gradient)');\n            x = back.x.baseVal.value;\n            y = back.y.baseVal.value;\n            width = back.width.baseVal.value;\n            height = back.height.baseVal.value;\n\n            var text = this.text(x + width / 2, y + height / 3, txt);\n            text.setAttribute('text-anchor', 'middle');\n            text.firstChild.setAttribute('dy', '1.5ex');\n            text.setAttribute('font-size', 0.5 * height);\n            text.setAttribute('fill', '#ffffff');\n            button.push(back);\n            button.push(text);\n            button.background_element = back;\n            button.text_element = text;\n\n            button.setAttribute('cursor', 'pointer');\n            var button_trigger = function button_trigger() {\n                back.setAttribute('fill', '#999999');\n                back.setAttribute('stroke', '#000000');\n            };\n            button.addEventListener('mousedown', button_trigger, false);\n            button.addEventListener('touchstart', button_trigger, false);\n            var button_reset = function button_reset() {\n                back.setAttribute('stroke', '#ffffff');\n                back.setAttribute('fill', 'url(#simple_gradient)');\n            };\n            button.addEventListener('mouseup', button_reset, false);\n            button.addEventListener('mouseout', button_reset, false);\n            button.addEventListener('touchend', button_reset, false);\n            return button;\n        };\n\n        canvas.callout = function (x, y, content, opts) {\n            var callout = this.group();\n            var back = this.roundRect(-0.5 * (opts.width + 4), 20, opts.width + 4, opts.height + 4, 4);\n            back.setAttribute('fill', '#000000');\n            var pres_box = this.roundRect(-0.5 * (opts.width + 1), 22, opts.width + 1, opts.height, 4);\n            pres_box.setAttribute('fill', '#eeeeee');\n            callout.push(back);\n            callout.push(pres_box);\n            var poly = this.poly('0,500 500,1000 -500,1000');\n            poly.setAttribute('fill', '#000000');\n            callout.push(poly);\n            var fo = document.createElementNS(svgns, 'foreignObject');\n            fo.setAttribute('x', -0.5 * (opts.width + 1) * RS);\n            fo.setAttribute('y', 22 * RS);\n            fo.setAttribute('width', opts.width * RS);\n            fo.setAttribute('height', opts.height * RS);\n            callout.push(fo);\n            var html = document.createElementNS('http://www.w3.org/1999/xhtml', 'html');\n            html.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n            var body = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');\n            body.style.fontSize = (opts['font-size'] || 15) * RS + 'px';\n            body.style.margin = 5 * RS + 'px';\n            body.style.height = opts.height * RS * 10 + 'px';\n            html.appendChild(body);\n            body.appendChild(content);\n            fo.appendChild(html);\n            var scale = opts.height / 15;\n            callout.setAttribute('transform', 'translate(' + x * RS + ',' + (y + 20) * RS + ') scale(' + scale + ')');\n            callout.setHeight = setHeight;\n            if (!opts.align) {\n                var currVbox = parseFloat(this.getAttribute('viewBox').split(/\\s+/)[2]);\n                if ((x + 10 + 0.5 * opts.width) * RS > currVbox) {\n                    opts.align = 'right';\n                }\n                if ((x - 0.5 * opts.width) * RS < 0) {\n                    opts.align = 'left';\n                }\n            }\n            if (opts.align) {\n                var shifter = opts.align == \"right\" ? -0.5 : 0.5;\n                back.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n                pres_box.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n                poly.setAttribute('transform', 'translate(' + 0 * shifter * opts.width * RS + ',0)');\n                poly.setAttribute('points', shifter > 0 ? \"0,500 500,1000 0,1000\" : \"0,500 0,1000 -500,1000\");\n                fo.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n            }\n            callout.setAttribute('height', opts.height * RS);\n            return callout;\n        };\n\n        canvas.growingMarker = function (x, y, symbol, opts) {\n            var container = document.createElementNS(svgns, 'svg');\n            if (!opts.stretch && !(Array.isArray && Array.isArray(opts.content))) {\n                container.setAttribute('viewBox', '-50 -100 200 250');\n                container.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n            } else {\n                container = this.group();\n            }\n            container.setAttribute('x', x);\n            container.setAttribute('y', y);\n            var the_marker = this.marker(50 / RS, 50 / RS, 50 / RS, symbol, opts);\n            container.appendChild(the_marker);\n            container.contentElement = the_marker.contentElement;\n            var result = this.group();\n            var positioning_group = this.group();\n            result.appendChild(positioning_group);\n            positioning_group.appendChild(container);\n            if (!opts.stretch && !(Array.isArray && Array.isArray(opts.content))) {\n                container.setAttribute('width', '200');\n                container.setAttribute('height', '250');\n            }\n            if (opts.angle) {\n                result.angle = opts.angle;\n            }\n            // var rect = document.createElementNS(svgns,'rect');\n            // rect.setAttribute('stroke','#f00');\n            // rect.setAttribute('stroke-width','10');\n            // rect.setAttribute('x','-50');\n            // rect.setAttribute('y','-100');\n            // rect.setAttribute('width','100%');\n            // rect.setAttribute('height','100%');\n            // rect.setAttribute('fill','none');\n            // container.appendChild(rect);\n\n            // var rect = document.createElementNS(svgns,'rect');\n            // rect.setAttribute('stroke','#0f0');\n            // rect.setAttribute('stroke-width','10');\n            // rect.setAttribute('x','50');\n            // rect.setAttribute('y','25');\n            // rect.setAttribute('width','50%');\n            // rect.setAttribute('height','50%');\n            // rect.setAttribute('fill','none');\n\n            // container.appendChild(rect);\n\n            result.setAttribute('height', '250');\n            result.setAttribute('transform', 'scale(1)');\n            result.setHeight = function (height) {\n                // this.setAttribute('height',height);\n                var scale_val = setHeight.call(this, height);\n                this.setAttribute('height', height);\n                var top_offset = this.offset || 0;\n                if (!this.angle) {\n                    this.angle = 0;\n                }\n                this.firstChild.setAttribute('transform', 'translate(-100,' + top_offset * RS + ') rotate(' + this.angle + ',100,0)');\n            };\n            result.container = container;\n            return result;\n        };\n\n        canvas.marker = function (cx, cy, r, symbol, opts) {\n            var units = 0;\n            if (typeof cx == 'string') {\n                var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n                units = parts[2];\n                cx = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n                cy = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n                r = parseFloat(parts[1]);\n            }\n\n            var dim = {\n                CX: cx + units,\n                CY: cy + units,\n                R: r + units,\n                MIN_X: cx - r + units,\n                MAX_X: cx + r + units,\n                MIN_Y: cy - r + units,\n                MAX_Y: cy + r + units,\n                MID_X1: cx - r / 2 + units,\n                MID_X2: cx + r / 2 + units,\n                MID_Y1: cy - r / 2 + units,\n                MID_Y2: cy + r / 2 + units\n            };\n\n            var marker = this.group();\n            if (!opts) {\n                opts = {};\n            }\n            var fill_color = opts && opts.border ? opts.border : 'rgb(0,0,0)';\n            if (!opts.bare_element) {\n                if (opts.width) {\n                    marker.push(this.roundRect(-0.5 * opts.width - 1, -0.5, opts.width + 2, 3, 1.5));\n                    marker.lastChild.setAttribute('fill', fill_color);\n                } else {\n                    marker.push(this.circle(0, -0.5 * r, r));\n\n                    marker.lastChild.setAttribute('fill', fill_color);\n                    marker.lastChild.setAttribute('border', 'true');\n\n                    marker.push(this.circle(0, 1.5 * r, r));\n\n                    marker.lastChild.setAttribute('fill', fill_color);\n                    marker.lastChild.setAttribute('border', 'true');\n                    var arrow = this.poly(-0.9 * r * RS + ',' + 0 * r * RS + ' 0,' + -2.5 * r * RS + ' ' + 0.9 * r * RS + ',' + 0 * r * RS);\n\n                    arrow.setAttribute('fill', fill_color);\n                    arrow.setAttribute('stroke-width', '0');\n\n                    marker.push(arrow);\n                    marker.lastChild.setAttribute('border', 'true');\n                }\n            }\n            marker.setAttribute('transform', 'translate(' + cx * RS + ',' + 0.5 * cy * RS + ') scale(1)');\n            marker.setHeight = setHeight;\n            marker.setAttribute('height', dim.R * RS);\n            if (typeof symbol == 'string') {\n                if (symbol.match(/^(:?https?:)?\\/?.*#/)) {\n                    marker.contentElement = this.use(symbol, -r, 0, 2 * r, 2 * r);\n                    marker.contentElement.setAttribute('content', 'true');\n                } else {\n                    marker.contentElement = this.text_circle(0, 0, 2 * r, symbol, opts);\n                    marker.contentElement.firstChild.setAttribute('content', 'true');\n                }\n                marker.push(marker.contentElement);\n            } else if (Array.isArray && Array.isArray(symbol)) {\n                marker.contentElement = this.group();\n                var phase = Math.PI / symbol.length;\n                // phase -= (Math.PI / 2);\n                var needs_stretch = opts.stretch;\n                var nrow = 2;\n                symbol.forEach(function (symb, i) {\n                    var x_pos = i % nrow;\n                    var y_pos = 2 + Math.floor(i / nrow);\n                    x_pos *= 2 * r;\n                    y_pos *= 2 * r;\n                    x_pos -= 0.5 * r;\n                    var rotate_amount = 180 * i / symbol.length;\n                    rotate_amount -= 0 * 90;\n                    rotate_amount = 0;\n                    if (needs_stretch) {\n                        if (rotate_amount >= -90 && rotate_amount <= 90) {\n                            opts.stretch = 'right';\n                        } else {\n                            opts.stretch = 'left';\n                        }\n                        if (rotate_amount % 90 == 0 && rotate_amount != 90 && rotate_amount != -90) {\n                            if (rotate_amount == 0) {\n                                opts.stretch = 'right';\n                            }\n                            if (symbol.length == 1) {\n                                opts.stretch = true;\n                            }\n                        }\n                    }\n\n                    if (rotate_amount > 90 && rotate_amount < 270) {\n                        rotate_amount = 180 + rotate_amount;\n                    }\n                    let new_el = null;\n                    if (symb.match(/^(:?https?:)?\\/?.*#/)) {\n                        new_el = canvas.use(symb, (x_pos - 0.5) * r, (y_pos - 0.5) * r, 2 * r, 2 * r);\n                        new_el.setAttribute('pointer-events', 'none');\n                        new_el.setAttribute('content', 'true');\n                    } else {\n                        var opts_copy = JSON.parse(JSON.stringify(opts));\n                        opts_copy.no_tracer = true;\n                        delete opts_copy.offset;\n                        delete opts_copy.height;\n                        new_el = canvas.text_circle(x_pos * r, y_pos * r, 1.75 * r, symb, opts_copy);\n                        new_el.firstChild.setAttribute('content', 'true');\n                    }\n                    var curr_transform = new_el.getAttribute('transform') || '';\n                    curr_transform = curr_transform + ' rotate(' + rotate_amount + ',' + 0 * r * RS + ',' + y_pos * r * RS + ')';\n                    new_el.setAttribute('transform', curr_transform);\n                    marker.contentElement.push(new_el);\n                });\n                marker.push(marker.contentElement);\n            } else {\n                marker.contentElement = this.group();\n                if (!opts.bare_element) {\n                    marker.contentElement.push(this.text_circle(0, 0.5 * r, 1.75 * r, \"\", opts));\n                    marker.contentElement.lastChild.firstChild.setAttribute('content', 'true');\n                }\n                if (symbol) {\n                    if (!opts.bare_element) {\n                        symbol.setAttribute('transform', 'translate(0,' + 0.5 * r * RS + ')');\n                    }\n                    symbol.setAttribute('content', 'true');\n                    marker.contentElement.push(symbol);\n                }\n                marker.push(marker.contentElement);\n            }\n            marker.setAttribute('marker', 'true');\n            return marker;\n        };\n\n        canvas.text_circle = function (cx, cy, r, txt, opts) {\n\n            if (!opts) {\n                opts = {};\n            }\n\n            var units = 0;\n\n            if (typeof cx == 'string') {\n                var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n                units = parts[2];\n                cx = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n                cy = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n                r = parseFloat(parts[1]);\n            }\n            var dim = {\n                CX: cx + units,\n                CY: cy + units,\n                R: r + units,\n                MIN_X: cx - r + units,\n                MAX_X: cx + r + units,\n                MIN_Y: cy - r + units,\n                MAX_Y: cy + r + units,\n                MID_X1: cx - r / 2 + units,\n                MID_X2: cx + r / 2 + units,\n                MID_Y1: cy - r / 2 + units,\n                MID_Y2: cy + r / 2 + units\n            };\n\n            var marker_group = this.group();\n\n            var text = this.text(0, dim.CY, txt);\n            text.setAttribute('font-size', 10 * RS);\n            text.setAttribute('font-weight', opts.weight || 'bolder');\n            text.setAttribute('fill', opts.text_fill || '#ffffff');\n            text.setAttribute('style', 'font-family: sans-serif; text-anchor: middle;');\n            text.firstChild.setAttribute('dy', '0.35em');\n            text.setAttribute('text-anchor', 'middle');\n            var back;\n\n            if (!opts.stretch) {\n                back = this.circle(0, dim.CY, 9 / 10 * dim.R);\n            } else {\n                var text_width = 1.2 * (opts.font_size || r) * text.getBBox().width / (10 * RS);\n                var text_height = 3 / 2 * dim.R;\n                var left_pos = -0.5 * text_width;\n                if (text_width > 3 * dim.R) {\n                    left_pos = -0.5 * text_width;\n\n                    if (opts.stretch == 'right') {\n                        left_pos = -0.1 * text_width;\n                    }\n                    if (opts.stretch == 'left') {\n                        left_pos = -0.9 * text_width;\n                    }\n                } else {\n                    text_width = 3 * dim.R;\n                    left_pos = -0.5 * text_width;\n                }\n                text.setAttribute('x', (0.5 * text_width + left_pos) * RS);\n                back = this.roundRect(left_pos, dim.CY - 0.5 * text_height, text_width, text_height, { 'x': 0.5 * dim.R, 'y': 0.5 * text_height }, {});\n            }\n            text.setAttribute('font-size', (opts.font_size || r) * RS);\n\n            back.setAttribute('fill', opts.fill || 'url(#simple_gradient)');\n            window.matchMedia('print').addListener(function (match) {\n                back.setAttribute('fill', match.matches ? '#aaaaaa' : opts.fill || 'url(#simple_gradient)');\n            });\n            back.setAttribute('stroke', opts.border || '#000000');\n            back.setAttribute('stroke-width', r / 10 * RS);\n\n            marker_group.push(back);\n\n            marker_group.push(text);\n\n            marker_group.setAttribute('transform', 'translate(' + dim.CX * RS + ', 1) scale(1)');\n            marker_group.setAttribute('height', dim.R / 2 * RS);\n            marker_group.setHeight = setHeight;\n            return marker_group;\n        };\n\n        canvas.crossed_circle = function (cx, cy, r) {\n\n            var units = 0;\n\n            if (typeof cx == 'string') {\n                var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n                units = parts[2];\n                cx = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n                cy = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n                r = parseFloat(parts[1]);\n            }\n            var dim = {\n                CX: cx + units,\n                CY: cy + units,\n                R: r + units,\n                MIN_X: cx - r + units,\n                MAX_X: cx + r + units,\n                MIN_Y: cy - r + units,\n                MAX_Y: cy + r + units,\n                MID_X1: cx - r / 2 + units,\n                MID_X2: cx + r / 2 + units,\n                MID_Y1: cy - r / 2 + units,\n                MID_Y2: cy + r / 2 + units\n            };\n\n            var close_group = this.group();\n\n            var close_button = this.circle(dim.CX, dim.CY, dim.R);\n            close_button.setAttribute('fill', '#000000');\n            close_button.setAttribute('stroke', '#ffffff');\n            close_button.setAttribute('stroke-width', '2');\n\n            close_group._button = close_button;\n\n            close_group.push(close_button);\n\n            var a_line = this.line(dim.MID_X1, dim.MID_Y1, dim.MID_X2, dim.MID_Y2);\n            a_line.setAttribute('stroke', '#ffffff');\n            a_line.setAttribute('stroke-width', '2');\n\n            close_group.push(a_line);\n\n            var first_line = a_line;\n\n            var a_line = this.line(dim.MID_X1, dim.MID_Y2, dim.MID_X2, dim.MID_Y1);\n            a_line.setAttribute('stroke', '#ffffff');\n            a_line.setAttribute('stroke-width', '2');\n\n            close_group.push(a_line);\n\n            close_group.move = function (cx, cy) {\n                close_button.setAttribute('cx', cx);\n                dim.MID_X1 = cx - r / 2;\n                dim.MID_X2 = cx + r / 2;\n                dim.MID_Y1 = cy - r / 2;\n                dim.MID_Y2 = cy + r / 2;\n                first_line.setAttribute('x1', dim.MID_X1);\n                first_line.setAttribute('y1', dim.MID_Y1);\n                first_line.setAttribute('x2', dim.MID_X2);\n                first_line.setAttribute('y2', dim.MID_Y2);\n                a_line.setAttribute('x1', dim.MID_X1);\n                a_line.setAttribute('y1', dim.MID_Y2);\n                a_line.setAttribute('x2', dim.MID_X2);\n                a_line.setAttribute('y2', dim.MID_Y1);\n            };\n            return close_group;\n        };\n        canvas.text = function (x, y, text) {\n            var a_text = document.createElementNS(svgns, 'text');\n            var a_tspan = document.createElementNS(svgns, 'tspan');\n            if (typeof text != 'string') {\n                a_text.appendChild(text);\n            } else {\n                a_text.appendChild(a_tspan);\n                a_tspan.textContent = text;\n                a_tspan.setAttribute('dy', '0');\n            }\n            a_text.style.fontFamily = this.font_order || 'Helvetica, Verdana, Arial, Sans-serif';\n            a_text.setAttribute('x', typeof x == 'string' ? x : x * RS);\n            a_text.setAttribute('y', typeof y == 'string' ? y : y * RS);\n            a_text.move = function (new_x, new_width) {\n                if (typeof this.offset !== \"undefined\" && this.getAttribute('transform')) {\n                    var transform_attr = this.getAttribute('transform');\n                    var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n                    if (matches[1]) {\n                        this.setAttribute('transform', 'translate(' + new_x * RS + ',' + matches[1] + ')');\n                    }\n                } else {\n                    this.setAttribute('x', new_x * RS);\n                }\n            };\n\n            this.appendChild(a_text);\n            return a_text;\n        };\n        canvas.plus = function (x, y, height) {\n            var g = this.group();\n            g.appendChild(this.makeEl('rect', {\n                'x': Math.round(0.4 * height * RS).toString(),\n                'y': Math.round(0.1 * height * RS).toString(),\n                'stroke-width': '1',\n                'width': Math.round(0.2 * height * RS).toString(),\n                'height': Math.round(0.8 * height * RS).toString(),\n                'stroke': '#ffffff',\n                'fill': '#ffffff'\n            }));\n\n            g.appendChild(this.makeEl('rect', {\n                'x': Math.round(0.1 * height * RS).toString(),\n                'y': Math.round(0.4 * height * RS).toString(),\n                'stroke-width': '1',\n                'width': Math.round(0.8 * height * RS).toString(),\n                'height': Math.round(0.2 * height * RS).toString(),\n                'stroke': '#ffffff',\n                'fill': '#ffffff'\n            }));\n            g.setAttribute('transform', 'translate(' + x * RS + ',' + y * RS + ')');\n            return g;\n        };\n        canvas.minus = function (x, y, height) {\n            var g = this.group();\n\n            g.appendChild(this.makeEl('rect', {\n                'x': Math.round(0.1 * height * RS).toString(),\n                'y': Math.round(0.4 * height * RS).toString(),\n                'stroke-width': '1',\n                'width': Math.round(0.8 * height * RS).toString(),\n                'height': Math.round(0.2 * height * RS).toString(),\n                'stroke': '#ffffff',\n                'fill': '#ffffff'\n            }));\n            g.setAttribute('transform', 'translate(' + x * RS + ',' + y * RS + ')');\n            return g;\n        };\n\n        // Calculate the bounding box of an element with respect to its parent element\n        // Thanks to http://stackoverflow.com/questions/10623809/get-bounding-box-of-element-accounting-for-its-transform\n        canvas.transformedBoundingBox = function (el) {\n            var bb = el.getBBox(),\n                svg = el.ownerSVGElement,\n                m = el.parentNode.getScreenCTM().inverse().multiply(el.getScreenCTM()).inverse();\n            // Create an array of all four points for the original bounding box\n            var pts = [svg.createSVGPoint(), svg.createSVGPoint(), svg.createSVGPoint(), svg.createSVGPoint()];\n            pts[0].x = bb.x;pts[0].y = bb.y;\n            pts[1].x = bb.x + bb.width;pts[1].y = bb.y;\n            pts[2].x = bb.x + bb.width;pts[2].y = bb.y + bb.height;\n            pts[3].x = bb.x;pts[3].y = bb.y + bb.height;\n\n            // Transform each into the space of the parent,\n            // and calculate the min/max points from that.\n            var xMin = Infinity,\n                xMax = -Infinity,\n                yMin = Infinity,\n                yMax = -Infinity;\n            pts.forEach(function (pt) {\n                pt = pt.matrixTransform(m);\n                xMin = Math.min(xMin, pt.x);\n                xMax = Math.max(xMax, pt.x);\n                yMin = Math.min(yMin, pt.y);\n                yMax = Math.max(yMax, pt.y);\n            });\n\n            // Update the bounding box with the new values\n            try {\n                bb.x = xMin;bb.width = xMax - xMin;\n                bb.y = yMin;bb.height = yMax - yMin;\n            } catch (e) {\n                bb = { 'x': xMin, 'y': yMin, 'width': xMax - xMin, 'height': yMax - yMin };\n            }\n            return bb;\n        };\n\n        canvas.set = function () {\n            var an_array = [];\n            extend_array(an_array, RS);\n            return an_array;\n        };\n        canvas.hide = function () {\n            this.setAttribute('display', 'none');\n        };\n        canvas.show = function () {\n            this.setAttribute('display', 'inline');\n        };\n    };\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (SVGCanvas);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!**********************************!*\
  !*** ../gator/js/lib/Dragger.js ***!
  \**********************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__hammer_js__ = __webpack_require__(/*! ../hammer.js */ 21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bean__ = __webpack_require__(/*! ../bean */ 0);\n/**\n *  @fileOverview   Basic classes and defitions for a Gene Ontology ID based map\n */\n\n\n\n\n/**\n * @class       State class for adding panning functionality to an element. Each element that is to be panned needs a new instance\n *              of the Dragger to store state.\n * @author      hjjoshi\n * @requires    svgweb\n */\nconst Dragger = function Dragger() {\n    this.oX = 0;\n    this.oY = 0;\n    this.dX = 0;\n    this.dY = 0;\n    this.dragging = false;\n    this.targetElement = null;\n};\n\n/**\n * Connect this dragger to a particular element. If an SVG element is given, panning occurs within the bounding box of the SVG, and\n * the image is shifted by using the currentTranslate property. If a regular HTML element is given, the scrollLeft and scrollTop attributes\n * are used to move the viewport around. \n * @param {Element} targetElement Element to enable panning upon.\n */\nDragger.prototype.applyToElement = function (targetElement, enabled) {\n    var self = this;\n    if (typeof enabled !== 'undefined') {\n        self.enabled = enabled;\n    }\n\n    var momentum = [];\n\n    if (targetElement.nodeName == 'svg') {\n        targetElement.getPosition = function () {\n            var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n            var dX = translate.x;\n            var dY = translate.y;\n\n            return [dX, dY];\n        };\n\n        targetElement.shiftPosition = function (x, y) {\n            var p = { 'x': x, 'y': y };\n            var viewBoxScale = 1;\n            var vbox = this.getAttribute('viewBox');\n\n            var min_x, min_y, width, height;\n\n            if (vbox) {\n                var viewBox = this.getAttribute('viewBox').split(' ');\n                viewBoxScale = parseFloat(this.width.baseVal.value) / parseFloat(viewBox[2]);\n                min_x = 0;\n                min_y = parseInt(viewBox[1], 10);\n                width = parseInt(viewBox[2], 10);\n                height = parseInt(viewBox[3], 10);\n            } else {\n                min_x = 0;\n                min_y = 0;\n                width = targetElement.width;\n                height = targetElement.height;\n            }\n\n            if (targetElement.style.GomapScrollLeftMargin) {\n                min_x += targetElement.style.GomapScrollLeftMargin;\n            }\n\n            if (self.dragging) {\n                p.x = viewBoxScale * (p.x - self.oX);\n                p.y = viewBoxScale * (p.y - self.oY);\n\n                p.x += self.dX;\n                p.y += self.dY;\n                p.y = 0;\n            }\n\n            if (targetElement._snapback) {\n                clearTimeout(targetElement._snapback);\n                targetElement._snapback = null;\n            }\n\n            if (p.x > viewBoxScale * min_x && self.enabled) {\n                /* Element has shifted too far to the right\n                   Induce some gravity towards the left side\n                   of the screen\n                */\n\n                let do_snapback = function do_snapback() {\n                    var evObj;\n                    var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n                    if (Math.abs(translate.x - viewBoxScale * min_x) > 35) {\n                        var new_pos = 0.95 * (translate.x - viewBoxScale * min_x);\n                        if (new_pos < viewBoxScale * min_x) {\n                            new_pos = viewBoxScale * min_x;\n                        }\n\n                        targetElement.setCurrentTranslateXY(new_pos, 0);\n                        window.requestAnimationFrame(do_snapback, targetElement);\n                        //                        targetElement._snapback = setTimeout(arguments.callee,10);\n                        if (document.createEvent) {\n                            var evObj = document.createEvent('Events');\n                            evObj.initEvent('panstart', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                    } else {\n                        targetElement.setCurrentTranslateXY(viewBoxScale * min_x, 0);\n                        if (document.createEvent) {\n                            var evObj = document.createEvent('Events');\n                            evObj.initEvent('pan', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                        if (!self.dragging) {\n                            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(targetElement, 'panend');\n                        }\n                        targetElement._snapback = null;\n                    }\n                };\n                targetElement._snapback = setTimeout(do_snapback, 300);\n            }\n\n            var min_val = viewBoxScale * (width - 2 * min_x);\n\n            if (min_x === 0) {\n                min_val *= 0.90;\n            }\n            if (p.x < 0 && Math.abs(p.x) > min_val && self.enabled) {\n                /* Element has shifted too far to the left\n                   Induce some gravity to the right side of the screen\n                */\n                let do_snapback = function do_snapback() {\n                    var evObj;\n                    var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n                    if (Math.abs(translate.x - -1 * min_val) > 35) {\n                        var new_pos = 0.95 * translate.x;\n                        if (new_pos > -1 * min_val) {\n                            new_pos = -1 * min_val;\n                        }\n                        targetElement.setCurrentTranslateXY(new_pos, 0);\n                        window.requestAnimationFrame(do_snapback, targetElement);\n                        //                        targetElement._snapback = setTimeout(arguments.callee,10);\n                        if (document.createEvent) {\n                            evObj = document.createEvent('Events');\n                            evObj.initEvent('panstart', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                    } else {\n                        targetElement.setCurrentTranslateXY(-1 * min_val, 0);\n                        if (document.createEvent) {\n                            evObj = document.createEvent('Events');\n                            evObj.initEvent('pan', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                        if (!self.dragging) {\n                            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(targetElement, 'panend');\n                        }\n                        targetElement._snapback = null;\n                    }\n                };\n                targetElement._snapback = setTimeout(do_snapback, 300);\n            }\n\n            if (p.y > viewBoxScale * min_y) {\n                p.y = viewBoxScale * min_y;\n            }\n            if (Math.abs(p.y) > 0.50 * viewBoxScale * height) {\n                p.y = -0.50 * viewBoxScale * height;\n            }\n            if (this.setCurrentTranslateXY) {\n                this.setCurrentTranslateXY(p.x, p.y);\n            } else if (this.currentTranslate.setXY) {\n                this.currentTranslate.setXY(p.x, p.y);\n            } else {\n                this.currentTranslate.x = p.x;\n                this.currentTranslate.y = p.y;\n            }\n\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('pan', false, true);\n                this.dispatchEvent(evObj);\n            }\n        };\n    } else {\n        targetElement.getPosition = function () {\n            return [this.scrollLeft, this.scrollTop];\n        };\n        targetElement.shiftPosition = function (x, y) {\n            this.scrollLeft = self.dX + (self.oX - x);\n            this.scrollTop = self.dY + (self.oY - y);\n\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('pan', false, true);\n                this.dispatchEvent(evObj);\n            }\n        };\n    }\n\n    var stationary;\n\n    var svgMouseDown = function svgMouseDown(evt) {\n        if (!self.enabled) {\n            return true;\n        }\n\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        var positions = mousePosition(evt);\n        self.dragging = true;\n        self.moved = false;\n        targ.setAttribute('dragging', 'true');\n\n        if (self.targetElement) {\n\n            self.oX = positions[0];\n            self.oY = positions[1];\n            self.dX = self.targetElement.scrollLeft;\n            self.dY = self.targetElement.scrollTop;\n            evt.preventDefault(true);\n            return;\n        }\n\n        var p = targetElement.createSVGPoint();\n        positions = mousePosition(evt);\n        p.x = positions[0];\n        p.y = positions[1];\n\n        var rootCTM = this.firstElementChild.getScreenCTM();\n        self.matrix = rootCTM.inverse();\n\n        p = p.matrixTransform(self.matrix);\n\n        self.dX = targetElement.getPosition()[0];\n        self.dY = targetElement.getPosition()[1];\n\n        self.oX = p.x;\n        self.oY = p.y;\n\n        evt.preventDefault(true);\n\n        if (document.createEvent) {\n            self.clicktimeout = setTimeout(function () {\n                var evObj = document.createEvent('Events');\n                self.clicktimeout = null;\n                evObj.initEvent('panstart', false, true);\n                targ.dispatchEvent(evObj);\n            }, 200);\n        }\n    };\n\n    var mousePosition = function mousePosition(evt) {\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX;\n            posy = evt.pageY;\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n        if (self.targetElement) {\n            posx = evt.screenX;\n            posy = evt.screenY;\n        }\n        return [posx, posy];\n    };\n\n    var mouseMove = function mouseMove(evt) {\n        var positions = mousePosition(evt);\n        if (self.clicktimeout && Math.abs(positions[0] - self.oX) < 10) {\n            mouseUp();\n        }\n        if (!self.dragging) {\n            return;\n        }\n\n        targetElement.shiftPosition(positions[0], positions[1]);\n\n        evt.preventDefault(true);\n    };\n\n    var mouseDown = function mouseDown(evt) {\n        self.dragging = true;\n        self.moved = false;\n        var positions = mousePosition(evt);\n        self.oX = positions[0];\n        self.oY = positions[1];\n        self.dX = targetElement.getPosition()[0];\n        self.dY = targetElement.getPosition()[1];\n        evt.preventDefault(true);\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        targ.setAttribute('dragging', 'true');\n        if (document.createEvent) {\n            var evObj = document.createEvent('Events');\n            evObj.initEvent('panstart', false, true);\n            targ.dispatchEvent(evObj);\n        }\n    };\n\n    var svgMouseMove = function svgMouseMove(evt) {\n        if (!self.enabled) {\n            return true;\n        }\n        // this.style.cursor = 'url(http://maps.gstatic.com/intl/en_us/mapfiles/openhand_8_8.cur), move';\n        if (!self.dragging) {\n            return;\n        }\n\n        // if (stationary) {\n        //     clearTimeout(stationary);\n        //     stationary = null;\n        // }\n        // \n        // stationary = window.setTimeout(function() {\n        //     self.dragging = false;\n        // },200);        \n\n        doMouseMove.call(this, evt);\n    };\n\n    var doMouseMove = function doMouseMove(evt) {\n        var positions = mousePosition(evt);\n        // this.style.cursor = 'url(http://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur), -moz-grabbing';\n\n        if (self.targetElement) {\n            self.targetElement.shiftPosition(positions[0], positions[1]);\n            self.moved = true;\n            return;\n        }\n\n        var p = targetElement._cachedpoint || targetElement.createSVGPoint();\n        targetElement._cachedpoint = p;\n\n        positions = mousePosition(evt);\n\n        p.x = positions[0];\n        p.y = positions[1];\n\n        var rootCTM = targetElement._cachedrctm || targetElement.firstElementChild.getScreenCTM();\n        targetElement._cachedrctm = rootCTM;\n\n        p = p.matrixTransform(self.matrix);\n        targetElement.shiftPosition(p.x, p.y);\n        self.moved = true;\n        //        momentum = p.x;        \n    };\n\n    var captureClick = function captureClick(evt) {\n        evt.stopPropagation();\n        this.removeEventListener('click', captureClick, true);\n    };\n\n    var mouseUp = function mouseUp(evt) {\n        if (self.clicktimeout) {\n            clearTimeout(self.clicktimeout);\n            self.clicktimeout = null;\n        }\n        if (!self.enabled) {\n            return true;\n        }\n        self.oX = 0;\n        self.oY = 0;\n        self.dX = null;\n        self.dY = null;\n        self.dragging = false;\n        evt.preventDefault(true);\n\n        var targ = self.targetElement ? self.targetElement : targetElement;\n\n        targ.removeAttribute('dragging');\n\n        if (!targ._snapback) {\n            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(targ, 'panend', true);\n        }\n\n        if (evt.type == 'mouseup' && self.moved) {\n            targ.addEventListener('click', captureClick, true);\n        }\n        self.moved = false;\n    };\n\n    var mouseOut = function mouseOut(e) {\n        if (!self.dragging || !self.enabled) {\n            return true;\n        }\n        if (this == self.targetElement) {\n            mouseUp(e);\n        }\n\n        if (e.target != this && !e.currentTarget) {\n            return;\n        }\n\n        var toTarget = e.relatedTarget ? e.relatedTarget : e.toElement;\n\n        while (toTarget !== null) {\n            if (toTarget == this) {\n                return;\n            }\n            toTarget = toTarget.parentNode;\n        }\n        mouseUp(e);\n    };\n\n    if (!targetElement.addEventListener) {\n        targetElement.addEventListener = function (name, func, bool) {\n            this.attachEvent(name, func);\n        };\n    }\n\n    targetElement.addEventListener('touchstart', function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        if (self.momentum) {\n            window.clearTimeout(self.momentum);\n            self.momentum = null;\n        }\n        if (e.touches.length == 1) {\n            var positions = mousePosition(e.touches[0]);\n            var p;\n            if (targ.nodeName == 'svg') {\n                p = targ.createSVGPoint();\n                p.x = positions[0];\n                p.y = positions[1];\n                var rootCTM = this.getScreenCTM();\n                self.matrix = rootCTM.inverse();\n                p = p.matrixTransform(self.matrix);\n            } else {\n                p.x = positions[0];\n                p.y = positions[1];\n            }\n            self.oX = p.x;\n            self.oY = p.y;\n\n            self.dragging = true;\n            self.dX = targ.getPosition()[0];\n            self.dY = targ.getPosition()[1];\n\n            self._momentum_shrinker = setInterval(function () {\n                momentum.shift();\n            }, 20);\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('panstart', false, true);\n                targ.dispatchEvent(evObj);\n            }\n            e.preventDefault();\n        }\n    }, false);\n\n    // document.addEventListener('touchmove',function(e) {\n    //     console.log('touchmove for the document');\n    //     console.log(self.dragging);\n    //     if ( ! self.dragging ) {\n    //         return;\n    //     }\n    //     console.log(\"Ending the drag for document move\");\n    //     self.oX = 0;\n    //     self.oY = 0;\n    //     self.dX = null;\n    //     self.dY = null;\n    //     self.dragging = false;\n    // \n    //     var targ = self.targetElement ? self.targetElement : targetElement;      \n    // \n    //     if (document.createEvent) {\n    //         var evObj = document.createEvent('Events');\n    //         evObj.initEvent('panend',false,true);\n    //         targ.dispatchEvent(evObj);\n    //     }      \n    // },false);\n\n    targetElement.addEventListener('touchmove', function (e) {\n        if (self.drag_zoom) {\n            return;\n        }\n        if (self.momentum) {\n            window.clearTimeout(self.momentum);\n            self.momentum = null;\n        }\n\n        if (e.touches.length != 1) {\n            self.dragging = false;\n        }\n\n        var targ = self.targetElement ? self.targetElement : targetElement;\n\n        var positions = mousePosition(e.touches[0]);\n\n        if (!positions || !self.matrix) {\n            return;\n        }\n\n        var p;\n        if (targ.nodeName == 'svg') {\n            p = targ.createSVGPoint();\n            p.x = positions[0];\n            p.y = positions[1];\n            p = p.matrixTransform(self.matrix);\n        } else {\n            p.x = positions[0];\n            p.y = positions[1];\n        }\n\n        if (self.dragging && 6 * Math.abs(self.oX - p.x) > Math.abs(self.oY - p.y)) {\n            // FIXME - PASSIVE\n            // e.preventDefault();\n        }\n\n        if (!self.dragging) {\n            self.oX = 0;\n            self.oY = 0;\n            self.dX = null;\n            self.dY = null;\n            return;\n        }\n        if (momentum.length > 3) {\n            momentum.splice(2);\n        }\n        targ.shiftPosition(p.x, p.y);\n        momentum.push(targ.getPosition()[0] - self.dX);\n    }, { passive: true });\n    // FIXME - PASSIVE\n\n    var momentum_func = function momentum_func(e) {\n        if (!self.enabled) {\n            return true;\n        }\n        if (!self.dragging) {\n            clearInterval(self._momentum_shrinker);\n            mouseUp(e);\n            return;\n        }\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        var delta = 0;\n\n        if (momentum.length > 0) {\n            var last_val = momentum[0];\n            momentum.forEach(function (m) {\n                if (typeof last_val != 'undefined') {\n                    delta += m - last_val;\n                }\n                last_val = m;\n            });\n            delta = delta / momentum.length;\n        }\n        var start = targ.getPosition()[0];\n        var start_delta = delta;\n        self.dragging = false;\n        if (self.momentum) {\n            window.clearTimeout(self.momentum);\n        }\n        self.momentum = 1;\n        let moment = function moment() {\n            start = targ.getPosition()[0];\n            if (self.dragging) {\n                start += self.oX - self.dX;\n            } else {\n                self.oX = 0;\n                self.dX = 0;\n            }\n            targ.shiftPosition(start + delta, 0);\n            start = start + delta;\n            delta = delta * 0.5;\n\n            if (delta > 0 && Math.abs(start_delta / delta) < 10) {\n                window.requestAnimationFrame(moment, targ);\n                //                window.setTimeout(arguments.callee,50);\n            } else {\n                self.momentum = null;\n                clearInterval(self._momentum_shrinker);\n                mouseUp(e);\n            }\n        };\n\n        moment();\n    };\n\n    targetElement.addEventListener('touchend', momentum_func, false);\n\n    if (targetElement.nodeName == 'svg') {\n        targetElement.addEventListener('mousedown', svgMouseDown, false);\n        targetElement.addEventListener('mousemove', svgMouseMove, false);\n        targetElement.addEventListener('mouseup', mouseUp, false);\n        targetElement.addEventListener('mouseout', mouseOut, false);\n        if (self.targetElement) {\n            self.targetElement.addEventListener('mouseout', mouseOut, false);\n        }\n        // targetElement.addEventListener('click',function(ev) { ev.preventDefault(); ev.stopPropagation(); },false);\n    } else {\n        targetElement.addEventListener('mousedown', mouseDown, false);\n        targetElement.addEventListener('mousemove', mouseMove, false);\n        targetElement.addEventListener('mouseup', mouseUp, false);\n        targetElement.addEventListener('mouseout', mouseOut, false);\n    }\n};\n\nDragger.addTouchZoomControls = function (zoomElement, touchElement, controller) {\n    if (!controller) {\n        controller = { \"enabled\": true };\n    }\n    Dragger.prototype.addTouchZoomControls.call(controller, zoomElement, touchElement);\n    return controller;\n};\n\nDragger.prototype.addTouchZoomControls = function (zoomElement, touchElement) {\n    var self = this;\n    var last_touch_start = null;\n    var xform = null;\n    var max_y = null;\n    var mousePosition = function mousePosition(evt) {\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX;\n            posy = evt.pageY;\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n        if (self.targetElement) {\n            posx = evt.screenX;\n            posy = evt.screenY;\n        }\n        return [posx, posy];\n    };\n\n    var drag_zoom_move = function drag_zoom_move(evt) {\n        if (!self.enabled || !self.drag_zoom) {\n            return;\n        }\n        if (evt.touches.length == 1) {\n            var positions = mousePosition(evt.touches[0]);\n            var p = {};\n            p.x = positions[0];\n            p.y = positions[1];\n\n            if (touchElement.nodeName == 'svg') {\n                p = touchElement.createSVGPoint();\n                p.x = positions[0];\n                p.y = positions[1];\n                p = p.matrixTransform(xform);\n            }\n            zoomElement.zoom = self.zoom_start * Math.pow(10, (p.y - zoomElement.zoomCenter.y) / max_y);\n        }\n    };\n\n    var drag_zoom_end = function drag_zoom_end(evt) {\n        touchElement.removeEventListener('touchmove', drag_zoom_move);\n        touchElement.removeEventListener('touchend', drag_zoom_end);\n        self.drag_zoom = false;\n    };\n\n    touchElement.addEventListener('touchstart', function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        if (e.touches.length == 1) {\n            if (new Date().getTime() - last_touch_start <= 300) {\n                self.drag_zoom = true;\n                self.zoom_start = zoomElement.zoom;\n\n                var positions = mousePosition(e.touches[0]);\n                var positions2 = mousePosition(e.touches[0]);\n                var p;\n                if (touchElement.nodeName == 'svg') {\n                    p = touchElement.createSVGPoint();\n                    p.x = 0.5 * (positions[0] + positions2[0]);\n                    p.y = 0.5 * (positions[1] + positions2[1]);\n                    var rootCTM = this.getScreenCTM();\n                    xform = rootCTM.inverse();\n                    p = p.matrixTransform(xform);\n                    max_y = parseInt(touchElement.getAttribute('viewBox').split(' ')[3]);\n                } else {\n                    p.x = 0.5 * (positions[0] + positions2[0]);\n                    p.y = 0.5 * (positions[1] + positions2[1]);\n                }\n                zoomElement.zoomCenter = p;\n                touchElement.addEventListener('touchmove', drag_zoom_move, { passive: true });\n                touchElement.addEventListener('touchend', drag_zoom_end, false);\n                e.preventDefault();\n                return;\n            }\n\n            last_touch_start = new Date().getTime();\n            return;\n        }\n        if (e.touches.length == 2) {\n            var positions = mousePosition(e.touches[0]);\n            var positions2 = mousePosition(e.touches[1]);\n            var p;\n            if (touchElement.nodeName == 'svg') {\n                p = touchElement.createSVGPoint();\n                p.x = 0.5 * (positions[0] + positions2[0]);\n                p.y = 0.5 * (positions[1] + positions2[1]);\n                var rootCTM = this.getScreenCTM();\n                self.matrix = rootCTM.inverse();\n                p = p.matrixTransform(self.matrix);\n            } else {\n                p.x = 0.5 * (positions[0] + positions2[0]);\n                p.y = 0.5 * (positions[1] + positions2[1]);\n            }\n            zoomElement.zoomCenter = p;\n            e.preventDefault();\n        }\n    }, false);\n\n    // touchElement.addEventListener('gesturestart',function(e) {\n    Hammer(touchElement).on(\"touch\", function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        // zoomElement.zoomLeft = null;\n        var zoomStart = zoomElement.zoom;\n\n        var zoomscale = function zoomscale(ev) {\n            if (zoomElement.zoomCenter) {\n                zoomElement.zoom = zoomStart * ev.gesture.scale;\n            }\n            ev.preventDefault();\n        };\n        Hammer(touchElement).on('pinch', zoomscale, false);\n        let hammer_release = function hammer_release(ev) {\n            Hammer(touchElement).off('pinch', zoomscale);\n            Hammer(touchElement).off('release', hammer_release);\n            zoomElement.zoomCenter = null;\n            zoomElement.zoomLeft = null;\n            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(zoomElement, 'gestureend');\n        };\n        Hammer(touchElement).on('release', hammer_release, false);\n        e.preventDefault();\n    }, false);\n};\n\n/**\n * Given an element that implements a zoom attribute, creates a div that contains controls for controlling the zoom attribute. The\n * zoomElement must have a zoom attribute, and can fire the zoomChange event whenever the zoom value is changed on the object. The\n * scrollwheel is connected to this element so that when the mouse hovers over the controls, it can control the zoom using only\n * the scroll wheel.\n * @param {Object} zoomElement Element to control the zooming for.\n * @param {Number} min Minimum value for the zoom attribute (default 0)\n * @param {Number} max Maximum value for the zoom attribute (default 10)\n * @param {Number} precision Step precision for the zoom control (default 0.5)\n * @param {Number} value Default value for this control\n * @returns DIV element containing the controls\n * @type Element\n * @see GOMap.Diagram#event:zoomChange\n */\nDragger.addZoomControls = function (zoomElement, min, max, precision, value) {\n    min = min || 0;\n    max = max || 10;\n    precision = precision || 0.5;\n    value = value || zoomElement.zoom || min;\n\n    var controls_container = document.createElement('div');\n\n    var zoomIn = document.createElement('input');\n    zoomIn.setAttribute('type', 'button');\n    zoomIn.setAttribute('value', '+');\n    var zoomOut = document.createElement('input');\n    zoomOut.setAttribute('type', 'button');\n    zoomOut.setAttribute('value', '-');\n    var reset = document.createElement('input');\n    reset.setAttribute('type', 'button');\n    reset.setAttribute('value', 'Reset');\n\n    controls_container.appendChild(reset);\n\n    reset.addEventListener('click', function () {\n        zoomElement.zoom = zoomElement.defaultZoom || value;\n    }, false);\n\n    var range = document.createElement('input');\n    range.setAttribute('min', min);\n    range.setAttribute('max', max);\n    range.setAttribute('step', precision);\n    range.setAttribute('value', value);\n    range.setAttribute('type', 'range');\n    range.setAttribute('style', '-webkit-appearance: slider-horizontal; width: 100%; position: absolute; top: 0px; bottom: 0px; margin-top: 0.5em; left: 100%; margin-left: -0.5em;');\n\n    if (range.type == 'range') {\n\n        range.addEventListener('change', function () {\n            zoomElement.zoom = this.value;\n        }, false);\n\n        var evFunction = null;\n        if (zoomElement.addEventListener) {\n            evFunction = zoomElement.addEventListener;\n        } else if (zoomElement.bind) {\n            evFunction = zoomElement.bind;\n        }\n\n        evFunction.apply(zoomElement, ['zoomChange', function () {\n            range.value = zoomElement.zoom;\n        }, false]);\n\n        reset.style.margin = '0px';\n        reset.style.display = 'block';\n        reset.style.position = 'absolute';\n        reset.style.top = '0px';\n\n        controls_container.appendChild(range);\n        controls_container.style.height = '100%';\n    } else {\n        if (!zoomIn.addEventListener) {\n            var addevlis = function addevlis(name, func) {\n                this.attachEvent(name, func);\n            };\n            zoomIn.addEventListener = addevlis;\n            reset.addEventListener = addevlis;\n            zoomOut.addEventListener = addevlis;\n        }\n        zoomIn.addEventListener('click', function () {\n            zoomElement.zoom += precision;\n        }, false);\n        zoomOut.addEventListener('click', function () {\n            zoomElement.zoom -= precision;\n        }, false);\n\n        zoomIn.style.margin = '0px';\n        zoomIn.style.display = 'block';\n        zoomIn.style.position = 'absolute';\n        zoomIn.style.top = '0px';\n        zoomIn.style.left = '29px';\n\n        zoomOut.style.margin = '0px';\n        zoomOut.style.display = 'block';\n        zoomOut.style.position = 'absolute';\n        zoomOut.style.top = '0px';\n\n        reset.style.margin = '0px';\n        reset.style.display = 'block';\n        reset.style.position = 'absolute';\n        reset.style.top = '23px';\n        reset.style.left = '3px';\n\n        controls_container.appendChild(zoomOut);\n        controls_container.appendChild(zoomIn);\n        controls_container.appendChild(reset);\n    }\n\n    this.addScrollZoomControls(zoomElement, controls_container, precision);\n\n    return controls_container;\n};\n\nDragger.addScrollBar = function (target, controlElement, scrollContainer) {\n    return;\n    var scroller = document.createElement('div');\n    while (scrollContainer.childNodes.length > 0) {\n        scrollContainer.removeChild(scrollContainer.firstChild);\n    }\n    scrollContainer.appendChild(scroller);\n    if (!scrollContainer.style.position) {\n        scrollContainer.style.position = 'relative';\n    }\n    scrollContainer.style.overflowX = 'scroll';\n    scrollContainer.style.overflowY = 'hidden';\n\n    scroller.style.position = 'absolute';\n    scroller.style.left = '0px';\n    scroller.style.width = '100%';\n    scroller.style.height = '100%';\n\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(scrollContainer, 'scroll');\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(scrollContainer, 'mouseenter');\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(scrollContainer, 'mouseenter', function () {\n        var size = 100 * target.getTotalLength() / target.getVisibleLength();\n        scroller.cached_width = scroller.clientWidth / size;\n        disabled = true;\n        scrollContainer.scrollLeft += 1;\n        scrollContainer.scrollLeft -= 1;\n        setTimeout(function () {\n            disabled = false;\n        }, 0);\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(scrollContainer, 'scroll', scroll_func);\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(scrollContainer, 'scroll', scroll_func);\n    });\n    var disabled = false;\n\n    if (window.matchMedia) {\n        window.matchMedia('print').addListener(function (matcher) {\n            disabled = true;\n            setTimeout(function () {\n                disabled = false;\n            }, 0);\n        });\n    }\n    var scroll_func = function scroll_func() {\n        if (disabled || !console) {\n            return;\n        }\n        if (document.createEvent) {\n            var evObj = document.createEvent('Events');\n            evObj.initEvent('panstart', false, true);\n            controlElement.dispatchEvent(evObj);\n        }\n        var size = 100 * target.getTotalLength() / target.getVisibleLength();\n        var width = scroller.cached_width ? parseInt(scroller.cached_width * size) : scroller.clientWidth;\n        target.setLeftPosition(parseInt(scrollContainer.scrollLeft * target.getTotalLength() / width));\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(controlElement, 'panend');\n    };\n\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(scrollContainer, 'scroll', scroll_func);\n\n    var left_setter;\n\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(controlElement, 'pan', function () {\n        cancelAnimationFrame(left_setter);\n        var size = 100 * target.getTotalLength() / target.getVisibleLength();\n        scroller.style.width = parseInt(size) + '%';\n        var width = scroller.cached_width ? parseInt(scroller.cached_width * size) : scroller.clientWidth;\n        scroller.cached_width = width / size;\n\n        var left_shift = parseInt(width * (target.getLeftPosition() / target.getTotalLength()));\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(scrollContainer, 'scroll', scroll_func);\n        left_setter = requestAnimationFrame(function () {\n            // Rendering bottleneck\n            scrollContainer.scrollLeft = left_shift;\n        });\n    });\n};\n\n/**\n * Connect the scroll wheel to the controls to control zoom\n */\nDragger.addScrollZoomControls = function (target, controlElement, precision) {\n    precision = precision || 0.5;\n    var self;\n\n    if (this.enabled === null) {\n        self = { 'enabled': true };\n    } else {\n        self = this;\n    }\n    var hookEvent = function hookEvent(element, eventName, callback) {\n        if (typeof element == 'string') {\n            element = document.getElementById(element);\n        }\n\n        if (element === null) {\n            return;\n        }\n\n        if (element.addEventListener) {\n            if (eventName == 'mousewheel') {\n                element.addEventListener('DOMMouseScroll', callback, false);\n                element.addEventListener('wheel', callback, false);\n            }\n            element.addEventListener(eventName, callback, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + eventName, callback);\n        }\n    };\n\n    var mousePosition = function mousePosition(evt) {\n        if (!self.enabled) {\n            return;\n        }\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX;\n            posy = evt.pageY;\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n\n        var p = {};\n\n        if (controlElement.nodeName == 'svg') {\n            p = controlElement.createSVGPoint();\n            p.x = posx;\n            p.y = posy;\n            /* Fix for mouse position in firefox - http://jsfiddle.net/JNKgR/6/ */\n            var rootCTM = controlElement.firstElementChild.getScreenCTM();\n            self.matrix = rootCTM.inverse();\n            p = p.matrixTransform(self.matrix);\n        } else {\n            p.x = posx;\n            p.y = posy;\n        }\n        return p;\n    };\n\n    var mouseWheel = function mouseWheel(e) {\n        if (!self.enabled) {\n            return;\n        }\n        e = e ? e : window.event;\n        var wheelData = e.detail ? e.detail * -1 : e.wheelDelta;\n        if (!wheelData) {\n            wheelData = e.deltaY;\n        }\n        target.zoomCenter = mousePosition(e);\n\n        if (wheelData > 0) {\n            target.zoom = target.zoom += precision;\n        } else {\n            target.zoom = target.zoom -= precision;\n        }\n\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n\n        e.returnValue = false;\n        e.stopPropagation();\n\n        return false;\n    };\n\n    var isFF = false;\n\n    if (navigator.userAgent.indexOf('Gecko') >= 0) {\n        isFF = parseFloat(navigator.userAgent.split('Firefox/')[1]) || undefined;\n    }\n\n    if (isFF && typeof svgweb != 'undefined' && svgweb.getHandlerType() == 'native') {\n        hookEvent(controlElement, 'mousewheel', mouseWheel);\n    } else {\n        hookEvent(controlElement, 'mousewheel', mouseWheel);\n    }\n\n    hookEvent(controlElement, 'mousemove', function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        if (target.zoomCenter && Math.abs(target.zoomCenter.x - mousePosition(e).x) > 100) {\n            target.zoomCenter = null;\n            target.zoomLeft = null;\n        }\n    });\n\n    return self;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Dragger);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!*******************************!*\
  !*** multi ./js/SeqViewer.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./js/SeqViewer.js */15);


/***/ }),
/* 15 */
/*!*************************!*\
  !*** ./js/SeqViewer.js ***!
  \*************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gator__ = __webpack_require__(/*! ./gator */ 16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_mascp_jstools__ = __webpack_require__(/*! mascp-jstools */ 4);\n\n\n\n\nconst retrieve_uniprot = function retrieve_uniprot(uniprot) {\n  return __WEBPACK_IMPORTED_MODULE_1_mascp_jstools__[\"a\" /* default */].GatorDataReader.authenticate().then(function (url_base) {\n    let a_reader = new __WEBPACK_IMPORTED_MODULE_1_mascp_jstools__[\"a\" /* default */].UniprotReader();\n    return new Promise((resolve, reject) => {\n      a_reader.retrieve(uniprot, function (err) {\n        resolve(this.result._raw_data.data[0]);\n      });\n    });\n  });\n};\n\nconst session_ready = new Promise(resolve => {\n  $(document).on('shiny:sessioninitialized', resolve);\n});\n\nconst notify_sequence = function notify_sequence(el, seq) {\n  if (HTMLWidgets.shinyMode) {\n    Shiny.setInputValue('sequenceChange', seq, { priority: \"event\" });\n  }\n};\n\nconst set_sequence = function set_sequence(el, uniprot) {\n  return retrieve_uniprot(uniprot).then(seq => {\n    let viewer = el.querySelector('x-protviewer');\n    viewer.uniprot = uniprot;\n    return new Promise(resolve => {\n      let resolver = () => {\n        viewer.renderer.unbind('sequenceChange', resolver);\n        viewer.refreshTracks();\n        viewer.fitToZoom();\n        for (let track of viewer.querySelectorAll('x-gatortrack')) {\n          track.setAttribute('scale', uniprot);\n        }\n        session_ready.then(() => {\n          notify_sequence(el, seq);\n        });\n        resolve();\n      };\n      viewer.renderer.bind('sequenceChange', resolver);\n      viewer.renderer.setSequence(seq);\n    });\n  });\n};\n\nconst tmpl = document.createElement('template');\n\ntmpl.innerHTML = `\n<x-protviewer id=\"protview\" interactive>\n    <x-gatortrack name=\"domains\" fullname=\"Domains\" scale=\"uniprot\" ></x-gatortrack>\n    <x-gatortrack name=\"ptms\" fullname=\"PTMS\" scale=\"uniprot\" ></x-gatortrack>\n    <x-gatortrack name=\"data\" fullname=\"Data\" scale=\"uniprot\" ></x-gatortrack>\n</x-protviewer>\n<x-trackrenderer track=\"domains\" renderer=\"protview\"></x-trackrenderer>\n<x-trackrenderer track=\"ptms\" renderer=\"protview\"></x-trackrenderer>\n<x-trackrenderer track=\"data\" renderer=\"protview\"></x-trackrenderer>\n`;\n\nconst render_domains = (el, value) => {\n  return Object(__WEBPACK_IMPORTED_MODULE_0__gator__[\"a\" /* getData */])('glycodomain', value).then(dat => {\n    el.querySelector('x-trackrenderer[track=\"domains\"]').data = dat._raw_data.data;\n  });\n};\n\nconst render_ptm_data = (el, value) => {\n  return Object(__WEBPACK_IMPORTED_MODULE_0__gator__[\"a\" /* getData */])('combined', value).then(dat => {\n    el.querySelector('x-trackrenderer[track=\"ptms\"]').data = dat._raw_data.data;\n  });\n};\n\nconst METHODS = {\n  setUniprot: (el, params) => {\n    let value_uc = params.uniprot.toUpperCase();\n    set_sequence(el, value_uc).then(() => {\n      render_domains(el, value_uc);\n      render_ptm_data(el, value_uc);\n    });\n  },\n  showRange: (el, params) => {\n    el.querySelector('x-protviewer').renderer.showResidues(params.min, params.max);\n  },\n  showData: (el, params) => {\n    el.querySelector('x-trackrenderer[track=\"data\"]').data = HTMLWidgets.dataframeToD3(params.dataframe);\n  }\n};\n\nHTMLWidgets.widget({\n\n  name: 'SeqViewer',\n\n  type: 'output',\n\n  factory: function factory(el, width, height) {\n\n    let viewer = null;\n\n    return {\n\n      renderValue: function renderValue(input) {\n\n        if (!viewer) {\n          let new_viewer = tmpl.content.cloneNode(true);\n          el.appendChild(new_viewer);\n          viewer = el.getElementsByTagName('x-protviewer').protview;\n        }\n\n        let params = input.message;\n\n        if (params.interactive) {\n          viewer.setAttribute('interactive', '');\n        }\n\n        if (!params.ptms) {\n          let ptm_track = el.querySelector('x-gatortrack[name=\"ptms\"]');\n          ptm_track.parentNode.removeChild(ptm_track);\n        }\n\n        if (!params.domains) {\n          let domain_track = el.querySelector('x-gatortrack[name=\"domains\"]');\n          domain_track.parentNode.removeChild(domain_track);\n        }\n\n        // https://github.com/ramnathv/htmlwidgets/issues/71\n\n        el.querySelector('x-trackrenderer[track=\"domains\"]').setAttribute('src', HTMLWidgets.getAttachmentUrl('renderers', 'glycodomain.packed'));\n        el.querySelector('x-trackrenderer[track=\"ptms\"]').setAttribute('src', HTMLWidgets.getAttachmentUrl('renderers', 'msdata.packed'));\n        el.querySelector('x-trackrenderer[track=\"data\"]').setAttribute('src', HTMLWidgets.getAttachmentUrl('renderers', 'customdata.packed'));\n\n        if (HTMLWidgets.shinyMode) {\n          for (let method of Object.keys(METHODS)) {\n            Shiny.addCustomMessageHandler(`seqviewer:${method}`, message => {\n              var el = document.getElementById(message.id);\n              if (el) {\n                METHODS[method](el, message);\n              }\n            });\n          }\n        }\n      },\n\n      resize: function resize(width, height) {\n\n        // TODO: code to re-render the widget with a new size\n\n      }\n\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvU2VxVmlld2VyLmpzPzcxNGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RGF0YSB9IGZyb20gJy4vZ2F0b3InO1xuXG5pbXBvcnQgTUFTQ1AgZnJvbSAnbWFzY3AtanN0b29scyc7XG5cbmNvbnN0IHJldHJpZXZlX3VuaXByb3QgPSBmdW5jdGlvbih1bmlwcm90KSB7XG4gIHJldHVybiBNQVNDUC5HYXRvckRhdGFSZWFkZXIuYXV0aGVudGljYXRlKCkudGhlbihmdW5jdGlvbih1cmxfYmFzZSkge1xuICAgIGxldCBhX3JlYWRlciA9IG5ldyBNQVNDUC5Vbmlwcm90UmVhZGVyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCkgPT4ge1xuICAgIGFfcmVhZGVyLnJldHJpZXZlKHVuaXByb3QsIGZ1bmN0aW9uKGVycikge1xuICAgICAgcmVzb2x2ZSh0aGlzLnJlc3VsdC5fcmF3X2RhdGEuZGF0YVswXSk7XG4gICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuY29uc3Qgc2Vzc2lvbl9yZWFkeSA9IG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcbiAgJChkb2N1bWVudCkub24oJ3NoaW55OnNlc3Npb25pbml0aWFsaXplZCcsIHJlc29sdmUpO1xufSk7XG5cbmNvbnN0IG5vdGlmeV9zZXF1ZW5jZSA9IGZ1bmN0aW9uKGVsLHNlcSkge1xuICBpZiAoSFRNTFdpZGdldHMuc2hpbnlNb2RlKSB7XG4gICAgU2hpbnkuc2V0SW5wdXRWYWx1ZSgnc2VxdWVuY2VDaGFuZ2UnLHNlcSwgeyBwcmlvcml0eTogXCJldmVudFwifSk7XG4gIH1cbn07XG5cbmNvbnN0IHNldF9zZXF1ZW5jZSA9IGZ1bmN0aW9uKGVsLHVuaXByb3QpIHtcbiAgcmV0dXJuIHJldHJpZXZlX3VuaXByb3QodW5pcHJvdCkudGhlbiAoc2VxID0+IHtcbiAgICBsZXQgdmlld2VyID0gZWwucXVlcnlTZWxlY3RvcigneC1wcm90dmlld2VyJyk7XG4gICAgdmlld2VyLnVuaXByb3QgPSB1bmlwcm90O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiB7XG4gICAgICBsZXQgcmVzb2x2ZXIgPSAoKSA9PiB7XG4gICAgICAgIHZpZXdlci5yZW5kZXJlci51bmJpbmQoJ3NlcXVlbmNlQ2hhbmdlJyxyZXNvbHZlcik7XG4gICAgICAgIHZpZXdlci5yZWZyZXNoVHJhY2tzKCk7XG4gICAgICAgIHZpZXdlci5maXRUb1pvb20oKTtcbiAgICAgICAgZm9yIChsZXQgdHJhY2sgb2Ygdmlld2VyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3gtZ2F0b3J0cmFjaycpKSB7XG4gICAgICAgICAgdHJhY2suc2V0QXR0cmlidXRlKCdzY2FsZScsdW5pcHJvdCk7XG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvbl9yZWFkeS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgbm90aWZ5X3NlcXVlbmNlKGVsLHNlcSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdmlld2VyLnJlbmRlcmVyLmJpbmQoJ3NlcXVlbmNlQ2hhbmdlJyxyZXNvbHZlcik7XG4gICAgICB2aWV3ZXIucmVuZGVyZXIuc2V0U2VxdWVuY2Uoc2VxKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5cblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cbnRtcGwuaW5uZXJIVE1MID0gYFxuPHgtcHJvdHZpZXdlciBpZD1cInByb3R2aWV3XCIgaW50ZXJhY3RpdmU+XG4gICAgPHgtZ2F0b3J0cmFjayBuYW1lPVwiZG9tYWluc1wiIGZ1bGxuYW1lPVwiRG9tYWluc1wiIHNjYWxlPVwidW5pcHJvdFwiID48L3gtZ2F0b3J0cmFjaz5cbiAgICA8eC1nYXRvcnRyYWNrIG5hbWU9XCJwdG1zXCIgZnVsbG5hbWU9XCJQVE1TXCIgc2NhbGU9XCJ1bmlwcm90XCIgPjwveC1nYXRvcnRyYWNrPlxuICAgIDx4LWdhdG9ydHJhY2sgbmFtZT1cImRhdGFcIiBmdWxsbmFtZT1cIkRhdGFcIiBzY2FsZT1cInVuaXByb3RcIiA+PC94LWdhdG9ydHJhY2s+XG48L3gtcHJvdHZpZXdlcj5cbjx4LXRyYWNrcmVuZGVyZXIgdHJhY2s9XCJkb21haW5zXCIgcmVuZGVyZXI9XCJwcm90dmlld1wiPjwveC10cmFja3JlbmRlcmVyPlxuPHgtdHJhY2tyZW5kZXJlciB0cmFjaz1cInB0bXNcIiByZW5kZXJlcj1cInByb3R2aWV3XCI+PC94LXRyYWNrcmVuZGVyZXI+XG48eC10cmFja3JlbmRlcmVyIHRyYWNrPVwiZGF0YVwiIHJlbmRlcmVyPVwicHJvdHZpZXdcIj48L3gtdHJhY2tyZW5kZXJlcj5cbmA7XG5cbmNvbnN0IHJlbmRlcl9kb21haW5zID0gKGVsLHZhbHVlKSA9PiB7XG4gIHJldHVybiBnZXREYXRhKCdnbHljb2RvbWFpbicsdmFsdWUpLnRoZW4oIGRhdCA9PiB7XG4gICAgZWwucXVlcnlTZWxlY3RvcigneC10cmFja3JlbmRlcmVyW3RyYWNrPVwiZG9tYWluc1wiXScpLmRhdGEgPSBkYXQuX3Jhd19kYXRhLmRhdGE7XG4gIH0pO1xufTtcblxuY29uc3QgcmVuZGVyX3B0bV9kYXRhID0gKGVsLHZhbHVlKSA9PiB7XG4gIHJldHVybiBnZXREYXRhKCdjb21iaW5lZCcsdmFsdWUpLnRoZW4oIGRhdCA9PiB7XG4gICAgZWwucXVlcnlTZWxlY3RvcigneC10cmFja3JlbmRlcmVyW3RyYWNrPVwicHRtc1wiXScpLmRhdGEgPSBkYXQuX3Jhd19kYXRhLmRhdGE7XG4gIH0pO1xufTtcblxuY29uc3QgTUVUSE9EUyA9IHtcbiAgc2V0VW5pcHJvdDogKGVsLHBhcmFtcykgPT4ge1xuICAgIGxldCB2YWx1ZV91YyA9IHBhcmFtcy51bmlwcm90LnRvVXBwZXJDYXNlKCk7XG4gICAgc2V0X3NlcXVlbmNlKGVsLHZhbHVlX3VjKS50aGVuKCAoKSA9PiB7XG4gICAgICByZW5kZXJfZG9tYWlucyhlbCx2YWx1ZV91Yyk7XG4gICAgICByZW5kZXJfcHRtX2RhdGEoZWwsdmFsdWVfdWMpO1xuICAgIH0pO1xuICB9LFxuICBzaG93UmFuZ2U6IChlbCxwYXJhbXMpID0+IHtcbiAgICBlbC5xdWVyeVNlbGVjdG9yKCd4LXByb3R2aWV3ZXInKS5yZW5kZXJlci5zaG93UmVzaWR1ZXMocGFyYW1zLm1pbixwYXJhbXMubWF4KTtcbiAgfSxcbiAgc2hvd0RhdGE6IChlbCxwYXJhbXMpID0+IHtcbiAgICBlbC5xdWVyeVNlbGVjdG9yKCd4LXRyYWNrcmVuZGVyZXJbdHJhY2s9XCJkYXRhXCJdJykuZGF0YSA9IEhUTUxXaWRnZXRzLmRhdGFmcmFtZVRvRDMocGFyYW1zLmRhdGFmcmFtZSk7XG4gIH1cbn07XG5cblxuSFRNTFdpZGdldHMud2lkZ2V0KHtcblxuICBuYW1lOiAnU2VxVmlld2VyJyxcblxuICB0eXBlOiAnb3V0cHV0JyxcblxuICBmYWN0b3J5OiBmdW5jdGlvbihlbCwgd2lkdGgsIGhlaWdodCkge1xuXG4gICAgbGV0IHZpZXdlciA9IG51bGw7XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICByZW5kZXJWYWx1ZTogZnVuY3Rpb24oaW5wdXQpIHtcblxuICAgICAgICBpZiAoICEgdmlld2VyICkge1xuICAgICAgICAgIGxldCBuZXdfdmlld2VyID0gdG1wbC5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICBlbC5hcHBlbmRDaGlsZChuZXdfdmlld2VyKTtcbiAgICAgICAgICB2aWV3ZXIgPSBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgneC1wcm90dmlld2VyJykucHJvdHZpZXc7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGFyYW1zID0gaW5wdXQubWVzc2FnZTtcblxuICAgICAgICBpZiAocGFyYW1zLmludGVyYWN0aXZlKSB7XG4gICAgICAgICAgdmlld2VyLnNldEF0dHJpYnV0ZSgnaW50ZXJhY3RpdmUnLCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggISBwYXJhbXMucHRtcyApIHtcbiAgICAgICAgICBsZXQgcHRtX3RyYWNrID0gZWwucXVlcnlTZWxlY3RvcigneC1nYXRvcnRyYWNrW25hbWU9XCJwdG1zXCJdJyk7XG4gICAgICAgICAgcHRtX3RyYWNrLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHRtX3RyYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggISBwYXJhbXMuZG9tYWlucyApIHtcbiAgICAgICAgICBsZXQgZG9tYWluX3RyYWNrID0gZWwucXVlcnlTZWxlY3RvcigneC1nYXRvcnRyYWNrW25hbWU9XCJkb21haW5zXCJdJyk7XG4gICAgICAgICAgZG9tYWluX3RyYWNrLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZG9tYWluX3RyYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYW1uYXRodi9odG1sd2lkZ2V0cy9pc3N1ZXMvNzFcblxuICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCd4LXRyYWNrcmVuZGVyZXJbdHJhY2s9XCJkb21haW5zXCJdJykuc2V0QXR0cmlidXRlKCdzcmMnLEhUTUxXaWRnZXRzLmdldEF0dGFjaG1lbnRVcmwoJ3JlbmRlcmVycycsICdnbHljb2RvbWFpbi5wYWNrZWQnKSk7XG4gICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJ3gtdHJhY2tyZW5kZXJlclt0cmFjaz1cInB0bXNcIl0nKS5zZXRBdHRyaWJ1dGUoJ3NyYycsSFRNTFdpZGdldHMuZ2V0QXR0YWNobWVudFVybCgncmVuZGVyZXJzJywgJ21zZGF0YS5wYWNrZWQnKSk7XG4gICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJ3gtdHJhY2tyZW5kZXJlclt0cmFjaz1cImRhdGFcIl0nKS5zZXRBdHRyaWJ1dGUoJ3NyYycsSFRNTFdpZGdldHMuZ2V0QXR0YWNobWVudFVybCgncmVuZGVyZXJzJywgJ2N1c3RvbWRhdGEucGFja2VkJykpO1xuXG4gICAgICAgIGlmIChIVE1MV2lkZ2V0cy5zaGlueU1vZGUpIHtcbiAgICAgICAgICBmb3IgKGxldCBtZXRob2Qgb2YgT2JqZWN0LmtleXMoTUVUSE9EUykpIHtcbiAgICAgICAgICAgIFNoaW55LmFkZEN1c3RvbU1lc3NhZ2VIYW5kbGVyKGBzZXF2aWV3ZXI6JHttZXRob2R9YCwgbWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1lc3NhZ2UuaWQpO1xuICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICBNRVRIT0RTW21ldGhvZF0oZWwsbWVzc2FnZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9LFxuXG4gICAgICByZXNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcblxuICAgICAgICAvLyBUT0RPOiBjb2RlIHRvIHJlLXJlbmRlciB0aGUgd2lkZ2V0IHdpdGggYSBuZXcgc2l6ZVxuXG4gICAgICB9XG5cbiAgICB9O1xuICB9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ganMvU2VxVmlld2VyLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBYkE7QUFDQTtBQWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsREE7QUFvREE7QUE5REEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/*!*********************!*\
  !*** ./js/gator.js ***!
  \*********************/
/*! exports provided: getMetadata, getData, getExpression */
/*! exports used: getData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export getMetadata */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getData; });\n/* unused harmony export getExpression */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_mascp_jstools__ = __webpack_require__(/*! mascp-jstools */ 4);\n\n\n__WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GatorDataReader.anonymous = true;\n\n__WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GatorDataReader.server = 'https://glycodomain.glycomics.ku.dk';\n\n__WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].AUTH0_CLIENT_ID = 'fNED1UGvPaP0XlrcEvWsHXIODIKy6WVB';\n__WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GATOR_CLIENT_ID = __WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].AUTH0_CLIENT_ID;\n\nlet getData = function getData(dataset, accession) {\n  return __WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GatorDataReader.authenticate().then(function (url_base) {\n    let a_reader = __WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GatorDataReader.createReader(dataset);\n    a_reader.datasetname = dataset;\n    return new Promise((resolve, reject) => {\n      a_reader.retrieve(accession, function (err) {\n        resolve(this.result);\n      });\n    });\n  });\n};\n\nlet getMetadata = function getMetadata(dataset) {\n  return __WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GatorDataReader.authenticate().then(function (url_base) {\n    let headers = new Headers();\n    headers.append('Authorization', 'Bearer ' + __WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GATOR_AUTH_TOKEN);\n    headers.append('x-api-key', __WEBPACK_IMPORTED_MODULE_0_mascp_jstools__[\"a\" /* default */].GATOR_CLIENT_ID);\n    let req_params = {\n      method: 'GET',\n      headers: headers\n    };\n    let req = new Request(`${url_base}/metadata/${dataset}`, req_params);\n    return fetch(req).then(resp => resp.json());\n  });\n};\n\nlet hydrate_expression = (metadata, dat) => {\n  let values = dat._raw_data.data;\n  let locations = metadata.locations;\n  locations.forEach((loc, idx) => loc.expression = values[idx]);\n  return locations;\n};\n\nlet getExpression = (dataset, geneid) => {\n  return getMetadata(dataset).then(meta => {\n    return getData(dataset, geneid).then(hydrate_expression.bind(null, meta));\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvZ2F0b3IuanM/Mzc0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTUFTQ1AgZnJvbSAnbWFzY3AtanN0b29scyc7XG5cbk1BU0NQLkdhdG9yRGF0YVJlYWRlci5hbm9ueW1vdXMgPSB0cnVlO1xuXG5NQVNDUC5HYXRvckRhdGFSZWFkZXIuc2VydmVyID0gJ2h0dHBzOi8vZ2x5Y29kb21haW4uZ2x5Y29taWNzLmt1LmRrJztcblxuTUFTQ1AuQVVUSDBfQ0xJRU5UX0lEPSdmTkVEMVVHdlBhUDBYbHJjRXZXc0hYSU9ESUt5NldWQic7XG5NQVNDUC5HQVRPUl9DTElFTlRfSUQ9TUFTQ1AuQVVUSDBfQ0xJRU5UX0lEO1xuXG5sZXQgZ2V0RGF0YSA9IGZ1bmN0aW9uKGRhdGFzZXQsYWNjZXNzaW9uKSB7XG4gIHJldHVybiBNQVNDUC5HYXRvckRhdGFSZWFkZXIuYXV0aGVudGljYXRlKCkudGhlbihmdW5jdGlvbih1cmxfYmFzZSkge1xuICAgIGxldCBhX3JlYWRlciA9IE1BU0NQLkdhdG9yRGF0YVJlYWRlci5jcmVhdGVSZWFkZXIoZGF0YXNldCk7XG4gICAgYV9yZWFkZXIuZGF0YXNldG5hbWUgPSBkYXRhc2V0O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpID0+IHtcbiAgICAgIGFfcmVhZGVyLnJldHJpZXZlKGFjY2Vzc2lvbiwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIHJlc29sdmUodGhpcy5yZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxubGV0IGdldE1ldGFkYXRhID0gZnVuY3Rpb24oZGF0YXNldCkge1xuICByZXR1cm4gTUFTQ1AuR2F0b3JEYXRhUmVhZGVyLmF1dGhlbnRpY2F0ZSgpLnRoZW4oZnVuY3Rpb24odXJsX2Jhc2UpIHtcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgaGVhZGVycy5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCdCZWFyZXIgJytNQVNDUC5HQVRPUl9BVVRIX1RPS0VOKTtcbiAgICBoZWFkZXJzLmFwcGVuZCgneC1hcGkta2V5JyxNQVNDUC5HQVRPUl9DTElFTlRfSUQpO1xuICAgIGxldCByZXFfcGFyYW1zID0ge1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgICB9O1xuICAgIGxldCByZXEgPSBuZXcgUmVxdWVzdChgJHt1cmxfYmFzZX0vbWV0YWRhdGEvJHtkYXRhc2V0fWAsIHJlcV9wYXJhbXMpO1xuICAgIHJldHVybiBmZXRjaChyZXEpLnRoZW4oIHJlc3AgPT4gcmVzcC5qc29uKCkpO1xuICB9KTtcbn07XG5cbmxldCBoeWRyYXRlX2V4cHJlc3Npb24gPSAobWV0YWRhdGEsZGF0KSA9PiB7XG4gIGxldCB2YWx1ZXMgPSBkYXQuX3Jhd19kYXRhLmRhdGE7XG4gIGxldCBsb2NhdGlvbnMgPSBtZXRhZGF0YS5sb2NhdGlvbnM7XG4gIGxvY2F0aW9ucy5mb3JFYWNoKCAobG9jLGlkeCkgPT4gbG9jLmV4cHJlc3Npb24gPSB2YWx1ZXNbaWR4XSApO1xuICByZXR1cm4gbG9jYXRpb25zO1xufVxuXG5sZXQgZ2V0RXhwcmVzc2lvbiA9IChkYXRhc2V0LGdlbmVpZCkgPT4ge1xuICByZXR1cm4gZ2V0TWV0YWRhdGEoZGF0YXNldCkudGhlbiggbWV0YSA9PiB7XG4gICAgcmV0dXJuIGdldERhdGEoZGF0YXNldCxnZW5laWQpLnRoZW4oIGh5ZHJhdGVfZXhwcmVzc2lvbi5iaW5kKG51bGwsbWV0YSkgKTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IHsgZ2V0TWV0YWRhdGEsIGdldERhdGEsIGdldEV4cHJlc3Npb24gfTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ganMvZ2F0b3IuanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/*!*****************************************!*\
  !*** ../gator/js/lib/ServiceCaching.js ***!
  \*****************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Service__ = __webpack_require__(/*! ./Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n\n\n\n\nvar get_db_data, store_db_data, search_service, clear_service, find_latest_data, data_timestamps, sweep_cache, cached_accessions, begin_transaction, end_transaction, first_accession;\n\nvar max_age = 0,\n    min_age = 0;\n\nclass CachingService extends __WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */] {}\n\nCachingService.BeginCaching = function () {\n    CachingService.CacheService(CachingService.prototype);\n};\n\n// To do 7 days ago, you do\n// var date = new Date();\n// date.setDate(date.getDate() - 1);\n// Service.SetMinimumFreshnessAge(date);\n\n// Set the minimum age if you want nothing OLDER than this date\nCachingService.SetMinimumAge = function (date) {\n    if (date === 0) {\n        min_age = 0;\n    } else {\n        min_age = date.getTime();\n    }\n};\n\n// Set the maximum age if you want nothing NEWER than this date\nCachingService.SetMaximumAge = function (date) {\n    if (date === 0) {\n        max_age = 0;\n    } else {\n        max_age = date.getTime();\n    }\n};\n\nCachingService.SweepCache = function (date) {\n    if (!date) {\n        date = new Date();\n    }\n    sweep_cache(date.getTime());\n};\n\nCachingService.CacheService = function (reader) {\n    if (reader.prototype && reader.prototype.retrieve.caching || reader.retrieve.caching) {\n        return;\n    }\n    var _oldRetrieve = reader.retrieve;\n    var has_avoid;\n    reader.retrieve = function (agi, cback) {\n        var self = this;\n        var id = agi ? agi : self.agi;\n        if (!id) {\n            _oldRetrieve.call(self, id, cback);\n            return self;\n        }\n\n        id = id.toLowerCase();\n        self.agi = id;\n\n        if (self.avoid_database) {\n            if (has_avoid) {\n                return;\n            }\n            has_avoid = self._dataReceived;\n            self._dataReceived = function () {\n                return function (dat) {\n                    var res = has_avoid.call(this, dat);\n                    var id = self.agi;\n                    if (res && this.result && this.result._raw_data !== null) {\n                        store_db_data(id, this.toString(), this.result._raw_data || {});\n                    }\n                    dat = {};\n                    return res;\n                };\n            }();\n            cback.call(self);\n            return;\n        }\n        if (has_avoid && !self.avoid_database) {\n            self._dataReceived = has_avoid;\n            has_avoid = null;\n            cback.call(self);\n            return;\n        }\n\n        get_db_data(id, self.toString(), function (err, data) {\n            if (data) {\n                if (cback) {\n                    self.result = null;\n                    var done_func = function done_func(err) {\n                        bean.remove(self, \"resultReceived\", arguments.callee);\n                        bean.remove(self, \"error\", arguments.callee);\n                        cback.call(self, err);\n                    };\n                    bean.add(self, \"resultReceived\", done_func);\n                    bean.add(self, \"error\", done_func);\n                }\n\n                var received_flag = self._dataReceived(data, \"db\");\n\n                if (received_flag) {\n                    self.gotResult();\n                }\n\n                if (received_flag !== null) {\n                    self.requestComplete();\n                } else {\n                    self.requestIncomplete();\n                }\n            } else {\n                var old_received = self._dataReceived;\n                self._dataReceived = function () {\n                    return function (dat, source) {\n                        var res = old_received.call(this, dat, source);\n                        if (res && this.result && this.result._raw_data !== null) {\n                            store_db_data(id, this.toString(), this.result._raw_data || {});\n                        }\n                        this._dataReceived = null;\n                        this._dataReceived = old_received;\n                        dat = {};\n                        return res;\n                    };\n                }();\n                var old_url = self._endpointURL;\n                // If we have a maximum age, i.e. we don't want anything newer than a date\n                // we should not actually do a request that won't respect that.\n                // We can set a minimum age, since the latest data will be, by definition be the latest!\n                if (max_age !== 0) {\n                    self._endpointURL = null;\n                }\n                _oldRetrieve.call(self, id, cback);\n                self._endpointURL = old_url;\n            }\n        });\n        return self;\n    };\n    reader.retrieve.caching = true;\n};\n\nCachingService.FindCachedService = function (service, cback) {\n    var serviceString = service.toString();\n    search_service(serviceString, cback);\n    return true;\n};\n\nCachingService.CachedAgis = function (service, cback) {\n    var serviceString = service.toString();\n    cached_accessions(serviceString, cback);\n    return true;\n};\n\nCachingService.FirstAgi = function (service, cback) {\n    var serviceString = service.toString();\n    first_accession(serviceString, cback);\n    return true;\n};\n\nCachingService.ClearCache = function (service, agi, callback) {\n    var serviceString = service.toString();\n    if (!callback) {\n        callback = function callback() {};\n    }\n    clear_service(serviceString, agi, callback);\n    return true;\n};\n\nCachingService.HistoryForService = function (service, cback) {\n    var serviceString = service.toString();\n    data_timestamps(serviceString, null, cback);\n};\n\nCachingService.Snapshot = function (service, date, wanted, cback) {\n    var serviceString = service.toString();\n    get_snapshot(serviceString, null, wanted, cback);\n};\n\nvar transaction_ref_count = 0;\nvar waiting_callbacks = [];\nCachingService.BulkOperation = function (callback) {\n    transaction_ref_count++;\n    var trans = function trans(callback) {\n        if (!callback) {\n            callback = function callback() {};\n        }\n        transaction_ref_count--;\n        waiting_callbacks.push(callback);\n        if (transaction_ref_count == 0) {\n            end_transaction(function (err) {\n                waiting_callbacks.forEach(function (cback) {\n                    cback(err);\n                });\n                waiting_callbacks = [];\n            });\n        }\n    };\n    begin_transaction(callback, trans);\n    return trans;\n};\n\nvar setup_idb = function setup_idb(idb) {\n    var transaction_store_db;\n    var transaction_find_latest;\n    var transaction_data = [];\n    begin_transaction = function begin_transaction(callback, trans) {\n        if (transaction_store_db != null) {\n            setTimeout(function () {\n                callback.call({ \"transaction\": trans });\n            }, 0);\n            return false;\n        }\n        transaction_store_db = store_db_data;\n        store_db_data = function store_db_data(acc, service, data) {\n            transaction_data.push([acc, service, data]);\n        };\n        setTimeout(function () {\n            callback.call({ \"transaction\": trans });\n        }, 0);\n        return true;\n    };\n\n    end_transaction = function end_transaction(callback) {\n        if (transaction_store_db === null) {\n            callback(null);\n            return;\n        }\n        store_db_data = transaction_store_db;\n        transaction_store_db = null;\n        var trans = idb.transaction([\"cached\"], \"readwrite\");\n        var store = trans.objectStore(\"cached\");\n        trans.oncomplete = function (event) {\n            callback(null);\n        };\n        trans.onerror = function (event) {\n            callback(event.target.errorCode);\n        };\n        while (transaction_data.length > 0) {\n            var row = transaction_data.shift();\n            var acc = row[0];\n            var service = row[1];\n            var data = row[2];\n            if (typeof data != 'object' || data.constructor.name !== 'Object' || typeof Document != 'undefined' && data instanceof Document) {\n                continue;\n            }\n            var dateobj = data.retrieved ? data.retrieved : new Date();\n            if (typeof dateobj === 'string' || typeof dateobj === 'number') {\n                dateobj = new Date(dateobj);\n            }\n            dateobj.setUTCHours(0);\n            dateobj.setUTCMinutes(0);\n            dateobj.setUTCSeconds(0);\n            dateobj.setUTCMilliseconds(0);\n            var reporter = insert_report_func(acc, service);\n            var datetime = dateobj.getTime();\n            data.id = [acc, service, datetime];\n            data.acc = acc;\n            data.service = service;\n            if (window.msIndexedDB) {\n                data.serviceacc = service + acc;\n            }\n            data.retrieved = datetime;\n            var req = store.put(data);\n            req.onerror = reporter;\n        }\n    };\n\n    var insert_report_func = function insert_report_func(acc, service) {\n        return function (err, rows) {\n            if (!err && rows) {}\n        };\n    };\n\n    store_db_data = function store_db_data(acc, service, data) {\n        var trans = idb.transaction([\"cached\"], \"readwrite\");\n        var store = trans.objectStore(\"cached\");\n        if (typeof data != 'object' || typeof Document != 'undefined' && data instanceof Document) {\n            return;\n        }\n        var dateobj = data.retrieved ? data.retrieved : new Date();\n        if (typeof dateobj === 'string' || typeof dateobj === 'number') {\n            dateobj = new Date(dateobj);\n        }\n        dateobj.setUTCHours(0);\n        dateobj.setUTCMinutes(0);\n        dateobj.setUTCSeconds(0);\n        dateobj.setUTCMilliseconds(0);\n        var reporter = insert_report_func(acc, service);\n        var datetime = dateobj.getTime();\n        data.id = [acc, service, datetime];\n        data.acc = acc;\n        if (window.msIndexedDB) {\n            data.serviceacc = service + acc;\n        }\n        data.service = service;\n        data.retrieved = datetime;\n        var req = store.put(data);\n        // req.onsuccess = reporter;\n        req.onerror = reporter;\n    };\n\n    get_db_data = function get_db_data(acc, service, cback) {\n        var timestamps = max_age ? [min_age, max_age] : [min_age, new Date().getTime()];\n        return find_latest_data(acc, service, timestamps, cback);\n    };\n\n    find_latest_data = function find_latest_data(acc, service, timestamps, cback) {\n        if (!acc) {\n            cback.call();\n            return;\n        }\n        var trans = idb.transaction([\"cached\"], \"readonly\");\n        var store = trans.objectStore(\"cached\");\n        var idx = store.index(window.msIndexedDB ? \"entries-ms\" : \"entries\");\n        var max_stamp = -1;\n        var result = null;\n        var range = IDBKeyRange.only(window.msIndexedDB ? service + acc : [acc, service]);\n        idx.openCursor(range).onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                var ts = window.msIndexedDB ? cursor.value.retrieved : cursor.primaryKey[2];\n                var c_acc = window.msIndexedDB ? cursor.value.acc : cursor.primaryKey[0];\n                var serv = window.msIndexedDB ? cursor.value.service : cursor.primaryKey[1];\n                if (ts >= timestamps[0] && ts <= timestamps[1]) {\n                    if (ts > max_stamp && c_acc == acc && serv == service) {\n                        result = cursor.value;\n                        max_stamp = ts;\n                        result.retrieved = new Date(ts);\n                    }\n                }\n                cursor.continue();\n            } else {\n                if (result) {\n                    // result = result.data\n                }\n                cback.call(null, null, result);\n            }\n        };\n    };\n\n    sweep_cache = function sweep_cache(timestamp) {\n        var trans = idb.transaction([\"cached\"], \"readwrite\");\n        var store = trans.objectStore(\"cached\");\n        var idx = store.index(\"timestamps\");\n        var results = [];\n        idx.openKeyCursor(null, \"nextunique\").onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                if (timestamp >= cursor.key[1]) {\n                    store.delete(cursor.primaryKey);\n                }\n                cursor.continue();\n            }\n        };\n    };\n\n    data_timestamps = function data_timestamps(service, timestamps, cback) {\n\n        if (!timestamps || typeof timestamps != 'object' || !timestamps.length) {\n            timestamps = [0, new Date().getTime()];\n        }\n\n        var trans = idb.transaction([\"cached\"], \"readonly\");\n        var store = trans.objectStore(\"cached\");\n        var idx = store.index(\"timestamps\");\n        var results = [];\n        idx.openKeyCursor(null, \"nextunique\").onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                if (cursor.key[0] == service && timestamps[0] <= cursor.key[1] && timestamps[1] >= cursor.key[1]) {\n                    results.push(new Date(parseInt(cursor.key[1])));\n                }\n                cursor.continue();\n            } else {\n                cback.call(null, results);\n            }\n        };\n    };\n\n    clear_service = function clear_service(service, acc, callback) {\n        var trans = idb.transaction([\"cached\"], \"readwrite\");\n        var store = trans.objectStore(\"cached\");\n        var idx = store.index(\"services\");\n        var range = IDBKeyRange.only(service);\n        idx.openCursor(range).onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                if (!acc || cursor.value.acc == acc) {\n                    if (window.msIndexedDB) {\n                        store.delete(cursor.value.serviceacc);\n                    } else {\n                        store.delete(cursor.value.id ? cursor.value.id : cursor.primaryKey);\n                    }\n                }\n                cursor.continue();\n            }\n        };\n        trans.oncomplete = function () {\n            callback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */]);\n        };\n    };\n\n    search_service = function search_service(service, cback) {\n        var trans = idb.transaction([\"cached\"], \"readonly\");\n        var store = trans.objectStore(\"cached\");\n        var idx = store.index(\"services\");\n        var results = [];\n        var range = IDBKeyRange.only(service);\n        idx.openKeyCursor(range, \"nextunique\").onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                results.push(cursor.key);\n                cursor.continue();\n            } else {\n                cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], results);\n            }\n        };\n    };\n    first_accession = function first_accession(service, cback) {\n        var trans = idb.transaction([\"cached\"], \"readonly\");\n        var store = trans.objectStore(\"cached\");\n        var idx = store.index(\"services\");\n        var range = IDBKeyRange.only(service);\n        idx.openCursor(range, \"nextunique\").onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], cursor.value.acc);\n            } else {\n                cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], null);\n            }\n        };\n    };\n    cached_accessions = function cached_accessions(service, cback) {\n        var trans = idb.transaction([\"cached\"], \"readonly\");\n        var store = trans.objectStore(\"cached\");\n        var idx = store.index(\"services\");\n        var results = [];\n        var range = IDBKeyRange.only(service);\n        idx.openCursor(range).onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                results.push(cursor.value.acc);\n                cursor.continue();\n            } else {\n                cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], results);\n            }\n        };\n    };\n};\nvar setup_websql = function setup_websql(db) {\n    db.all('SELECT version from versions where tablename = \"datacache\"', function (err, rows) {\n        var version = rows && rows.length > 0 ? rows[0].version : null;\n        if (version == 1.3) {\n            if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events) {\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events.emit('ready');\n            }\n            if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready) {\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready();\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n            } else {\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n            }\n            return;\n        }\n\n        if (!version || version == \"\" || version < 1.0) {\n            db.exec('CREATE TABLE if not exists versions (version REAL, tablename TEXT);');\n            db.exec('CREATE TABLE if not exists \"datacache\" (agi TEXT,service TEXT,retrieved REAL,data TEXT);', function (err) {\n                if (err && err != \"Error: not an error\") {\n                    throw err;\n                }\n            });\n            db.exec('DELETE FROM versions where tablename = \"datacache\"');\n            db.exec('INSERT INTO versions(version,tablename) VALUES(1.1,\"datacache\");', function (err, rows) {\n                if (!err) {\n                    //                        console.log(\"Upgrade to 1.1 completed\");\n                }\n            });\n            version = 1.1;\n        }\n        if (version < 1.2) {\n            db.exec('DROP TABLE if exists datacache_tmp;');\n            db.exec('CREATE TABLE if not exists datacache_tmp (acc TEXT,service TEXT,retrieved REAL,data TEXT);');\n            db.exec('INSERT INTO datacache_tmp(acc,service,retrieved,data) SELECT agi,service,retrieved,data FROM datacache;');\n            db.exec('DROP TABLE datacache;');\n            db.exec('ALTER TABLE datacache_tmp RENAME TO datacache;');\n            db.exec('CREATE INDEX accessions on datacache(acc);');\n            db.exec('CREATE INDEX accessions_service on datacache(acc,service);');\n            db.exec('DELETE FROM versions where tablename = \"datacache\"');\n            db.exec('INSERT INTO versions(version,tablename) VALUES(1.2,\"datacache\");', function (err, rows) {\n                if (!err) {\n                    //                          console.log(\"Upgrade to 1.2 completed\");\n                }\n            });\n            version = 1.2;\n        }\n        if (version < 1.3) {\n            db.exec('CREATE INDEX if not exists services on datacache(service);');\n            db.exec('DELETE FROM versions where tablename = \"datacache\"');\n            db.exec('INSERT INTO versions(version,tablename) VALUES(1.3,\"datacache\");', function (err, rows) {\n                if (!err) {\n                    if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events) {\n                        __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events.emit('ready');\n                    }\n                    if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready) {\n                        __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready();\n                        __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n                    } else {\n                        __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n                    }\n                }\n            });\n            version = 1.3;\n        }\n    });\n\n    begin_transaction = function begin_transaction(callback, trans) {\n        callback.call({ \"transaction\": trans });\n    };\n    end_transaction = function end_transaction(callback) {\n        callback();\n    };\n\n    sweep_cache = function sweep_cache(timestamp) {\n        db.all(\"DELETE from datacache where retrieved <= ? \", [timestamp], function () {});\n    };\n\n    clear_service = function clear_service(service, acc, callback) {\n        var servicename = service;\n        servicename += \"%\";\n        if (!acc) {\n            db.all(\"DELETE from datacache where service like ? \", [servicename], function () {\n                callback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */]);\n            });\n        } else {\n            db.all(\"DELETE from datacache where service like ? and acc = ?\", [servicename, acc.toLowerCase()], function () {\n                callback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */]);\n            });\n        }\n    };\n\n    search_service = function search_service(service, cback) {\n        db.all(\"SELECT distinct service from datacache where service like ? \", [service + \"%\"], function (err, records) {\n            var results = {};\n            if (records && records.length > 0) {\n                records.forEach(function (record) {\n                    results[record.service] = true;\n                });\n            }\n            var uniques = [];\n            for (var k in results) {\n                if (results.hasOwnProperty(k)) {\n                    uniques.push(k);\n                }\n            }\n            cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], uniques);\n            return uniques;\n        });\n    };\n\n    first_accession = function first_accession(service, cback) {\n        db.all(\"SELECT distinct acc from datacache where service = ? limit 1\", [service], function (err, records) {\n            if (!records || records.length < 1) {\n                cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], null);\n            } else {\n                cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], records[0].acc);\n            }\n        });\n    };\n\n    cached_accessions = function cached_accessions(service, cback) {\n        db.all(\"SELECT distinct acc from datacache where service = ?\", [service], function (err, records) {\n            var results = [];\n            for (var i = 0; i < records.length; i++) {\n                results.push(records[i].acc);\n            }\n            cback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */], results);\n        });\n    };\n\n    get_snapshot = function get_snapshot(service, timestamps, wanted, cback) {\n        if (!timestamps || typeof timestamps != 'object' || !timestamps.length) {\n            timestamps = [0, new Date().getTime()];\n        }\n        var sql;\n        var args = [service, timestamps[0], timestamps[1]];\n        if (wanted && Array.isArray(wanted)) {\n            var question_marks = new Array(wanted.length + 1).join(',?').substring(1);\n            args = args.concat(wanted);\n            sql = \"SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? AND acc in (\" + question_marks + \") ORDER BY retrieved ASC\";\n        } else {\n            if (wanted && /^\\d+$/.test(wanted.toString())) {\n                sql = \"SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? LIMIT ? ORDER BY retrieved ASC\";\n                args = args.concat(parseInt(wanted.toString()));\n            } else {\n                sql = \"SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? ORDER BY retrieved ASC\";\n            }\n        }\n        db.all(sql, args, function (err, records) {\n            records = records || [];\n            var results = {};\n            records.forEach(function (record) {\n                var data = typeof record.data === 'string' ? JSON.parse(record.data) : record.data;\n                if (data) {\n                    data.retrieved = new Date(parseInt(record.retrieved));\n                }\n                if (results[record.acc] && results[record.acc].retrieved > record.retrieved) {\n                    return;\n                }\n                results[record.acc] = record;\n            });\n            cback.call(null, null, results);\n        });\n    };\n\n    get_db_data = function get_db_data(acc, service, cback) {\n        var timestamps = max_age ? [min_age, max_age] : [min_age, new Date().getTime()];\n        return find_latest_data(acc, service, timestamps, cback);\n    };\n\n    var insert_report_func = function insert_report_func(acc, service) {\n        return function (err, rows) {\n            if (!err && rows) {\n                //                    console.log(\"Caching result for \"+acc+\" in \"+service);\n            }\n        };\n    };\n\n    store_db_data = function store_db_data(acc, service, data) {\n        if (typeof data != 'object' || typeof Document != 'undefined' && data instanceof Document) {\n            return;\n        }\n        var str_rep;\n        try {\n            str_rep = JSON.stringify(data);\n        } catch (err) {\n            return;\n        }\n        var dateobj = data.retrieved ? data.retrieved : new Date();\n        if (typeof dateobj == 'string') {\n            dateobj = new Date();\n        }\n        dateobj.setUTCHours(0);\n        dateobj.setUTCMinutes(0);\n        dateobj.setUTCSeconds(0);\n        dateobj.setUTCMilliseconds(0);\n        var datetime = dateobj.getTime();\n        data = {};\n        db.all(\"INSERT INTO datacache(acc,service,retrieved,data) VALUES(?,?,?,?)\", [acc, service, datetime, str_rep], insert_report_func(acc, service));\n    };\n\n    find_latest_data = function find_latest_data(acc, service, timestamps, cback) {\n        var sql = \"SELECT * from datacache where acc=? and service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved DESC LIMIT 1\";\n        var args = [acc, service, timestamps[0], timestamps[1]];\n        db.all(sql, args, function (err, records) {\n            if (records && records.length > 0 && typeof records[0] != \"undefined\") {\n                var data = typeof records[0].data === 'string' ? JSON.parse(records[0].data) : records[0].data;\n                if (data) {\n                    data.retrieved = new Date(parseInt(records[0].retrieved));\n                }\n                cback.call(null, null, data);\n            } else {\n                cback.call(null, null, null);\n            }\n        });\n    };\n\n    data_timestamps = function data_timestamps(service, timestamps, cback) {\n        if (!timestamps || typeof timestamps != 'object' || !timestamps.length) {\n            timestamps = [0, new Date().getTime()];\n        }\n        var sql = \"SELECT distinct retrieved from datacache where service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved ASC\";\n        var args = [service, timestamps[0], timestamps[1]];\n        db.all(sql, args, function (err, records) {\n            var result = [];\n            if (records && records.length > 0 && typeof records[0] != \"undefined\") {\n                for (var i = records.length - 1; i >= 0; i--) {\n                    result.push(new Date(parseInt(records[i].retrieved)));\n                }\n            }\n            cback.call(null, result);\n        });\n    };\n};\nvar setup_localstorage = function setup_localstorage() {\n    sweep_cache = function sweep_cache(timestamp) {\n        if (\"localStorage\" in window) {\n            var keys = [];\n            for (var i = 0, len = localStorage.length; i < len; i++) {\n                keys.push(localStorage.key(i));\n            }\n            var key = keys.shift();\n            while (key) {\n                if (new RegExp(\"^MASCP.*\").test(key)) {\n                    var data = localStorage[key];\n                    if (data && typeof data === 'string') {\n                        var datablock = JSON.parse(data);\n                        datablock.retrieved = timestamp;\n                        localStorage.removeItem(key);\n                    }\n                }\n                key = keys.shift();\n            }\n        }\n    };\n\n    clear_service = function clear_service(service, acc, callback) {\n        if (\"localStorage\" in window) {\n            var keys = [];\n            for (var i = 0, len = localStorage.length; i < len; i++) {\n                keys.push(localStorage.key(i));\n            }\n            var key = keys.shift();\n            while (key) {\n                if (new RegExp(\"^\" + service + \".*\" + (acc ? \"#\" + acc.toLowerCase() + \"$\" : \"\")).test(key)) {\n                    localStorage.removeItem(key);\n                    if (acc) {\n                        return;\n                    }\n                }\n                key = keys.shift();\n            }\n            callback.call(__WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */]);\n        }\n    };\n\n    search_service = function search_service(service, cback) {\n        var results = {};\n        if (\"localStorage\" in window) {\n            var key;\n            var re = new RegExp(\"^\" + service + \".*\");\n            for (var i = 0, len = localStorage.length; i < len; i++) {\n                key = localStorage.key(i);\n                if (re.test(key)) {\n                    results[key.replace(/\\.#.*$/g, '')] = true;\n                }\n            }\n        }\n\n        var uniques = [];\n        for (var k in results) {\n            if (results.hasOwnProperty(k)) {\n                uniques.push(k);\n            }\n        }\n\n        cback.call(CachingService, uniques);\n\n        return uniques;\n    };\n\n    first_accession = function first_accession(service, cback) {\n        if (\"localStorage\" in window) {\n            var key;\n            var re = new RegExp(\"^\" + service);\n            for (var i = 0, len = localStorage.length; i < len; i++) {\n                key = localStorage.key(i);\n                if (re.test(key)) {\n                    key = key.replace(service, '');\n                    cback.call(CachingService, key);\n                    return;\n                }\n            }\n        }\n        cback.call(CachingService, null);\n    };\n\n    cached_accessions = function cached_accessions(service, cback) {\n        if (\"localStorage\" in window) {\n            var key;\n            var re = new RegExp(\"^\" + service);\n            for (var i = 0, len = localStorage.length; i < len; i++) {\n                key = localStorage.key(i);\n                if (re.test(key)) {\n                    key = key.replace(service, '');\n                    results[key] = true;\n                }\n            }\n        }\n\n        var uniques = [];\n        for (var k in results) {\n            if (results.hasOwnProperty(k)) {\n                uniques.push(k);\n            }\n        }\n\n        cback.call(CachingService, uniques);\n    };\n\n    get_db_data = function get_db_data(acc, service, cback) {\n        var data = localStorage[service.toString() + \".#\" + (acc || '').toLowerCase()];\n        if (data && typeof data === 'string') {\n            var datablock = JSON.parse(data);\n            datablock.retrieved = new Date(parseInt(datablock.retrieved));\n            cback.call(null, null, datablock);\n        } else {\n            cback.call(null, null, null);\n        }\n    };\n\n    store_db_data = function store_db_data(acc, service, data) {\n        if (data && (typeof data !== 'object' || data instanceof Document || data.nodeName)) {\n            return;\n        }\n        data.retrieved = new Date().getTime();\n        localStorage[service.toString() + \".#\" + (acc || '').toLowerCase()] = JSON.stringify(data);\n    };\n\n    find_latest_data = function find_latest_data(acc, service, timestamp, cback) {\n        // We don't actually retrieve historical data for this\n        return get_db_data(acc, service, cback);\n    };\n\n    data_timestamps = function data_timestamps(service, timestamp, cback) {\n        cback.call(null, []);\n    };\n\n    begin_transaction = function begin_transaction(callback) {\n        // No support for transactions here. Do nothing.\n        setTimeout(function () {\n            callback.call();\n        }, 0);\n    };\n    end_transaction = function end_transaction(callback) {\n        // No support for transactions here. Do nothing.\n        setTimeout(function () {\n            callback();\n        }, 0);\n    };\n\n    if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events) {\n        __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events.emit('ready');\n    }\n    setTimeout(function () {\n        if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready) {\n            __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready();\n            __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n        } else {\n            __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n        }\n    }, 100);\n};\n\nvar db, idb;\n\nif (\"openDatabase\" in window || \"indexedDB\" in window) {\n\n    if (\"indexedDB\" in window) {\n\n        /* Versioning of DB schema */\n\n        var change_func = function change_func(version, transaction) {\n            var db = transaction.db;\n            if (db.objectStoreNames && db.objectStoreNames.contains(\"cached\")) {\n                db.deleteObjectStore(\"cached\");\n            }\n            var keypath = window.msIndexedDB ? \"serviceacc\" : \"id\";\n            var store = db.createObjectStore(\"cached\", { keyPath: keypath });\n            store.createIndex(\"entries\", [\"acc\", \"service\"], { unique: false });\n            if (window.msIndexedDB) {\n                store.createIndex(\"entries-ms\", \"serviceacc\", { unique: false });\n            }\n            store.createIndex(\"timestamps\", [\"service\", \"retrieved\"], { unique: false });\n            store.createIndex(\"services\", \"service\", { unique: false });\n            transaction.oncomplete = function () {\n                database_ready(db);\n                database_ready = function database_ready() {};\n            };\n        };\n\n        idb = true;\n        var db_version = 2;\n        var req = indexedDB.open(\"datacache\", db_version);\n\n        req.onupgradeneeded = function (e) {\n            var transaction = req.transaction;\n            change_func(e.oldVersion, transaction);\n        };\n\n        var database_ready = function database_ready(db) {\n            if (db) {\n                idb = db;\n            }\n            setup_idb(idb);\n\n            if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events) {\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].events.emit(\"ready\");\n            }\n            if (__WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready) {\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready();\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n            } else {\n                __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].ready = true;\n            }\n        };\n        req.onerror = function (e) {\n            console.log(\"Error loading Database\");\n            setup_localstorage();\n            // setTimeout(function() {\n            //     indexedDB.deleteDatabase(\"datacache\").onsuccess = function() {\n\n            //     }\n            // },0);\n        };\n        req.onsuccess = function (e) {\n            idb = e.target.result;\n            var version = db_version;\n            if (idb.version != Number(version)) {\n                var versionRequest = db.setVersion(ver);\n                versionRequest.onsuccess = function (e) {\n                    var transaction = versionRequest.result;\n                    change_func(oldVersion, transaction);\n                };\n            } else {\n                database_ready();\n            }\n        };\n    } else {\n        try {\n            db = openDatabase(\"cached\", \"\", \"MASCP Gator cache\", 1024 * 1024);\n        } catch (err) {\n            throw err;\n        }\n        db.all = function (sql, args, callback) {\n            this.exec(sql, args, callback);\n        };\n        db.exec = function (sql, args, callback) {\n            var self = this;\n            var sqlargs = args;\n            var cback = callback;\n            if (typeof cback == 'undefined' && sqlargs && Object.prototype.toString.call(sqlargs) != '[object Array]') {\n                cback = args;\n                sqlargs = null;\n            }\n            self.transaction(function (tx) {\n                tx.executeSql(sql, sqlargs, function (tx, result) {\n                    var res = [];\n                    for (var i = 0; i < result.rows.length; i++) {\n                        res.push(result.rows.item(i));\n                    }\n                    if (cback) {\n                        cback.call(db, null, res);\n                    }\n                }, function (tx, err) {\n                    if (cback) {\n                        cback.call(db, err);\n                    }\n                });\n            });\n        };\n    }\n}\nif (typeof idb !== 'undefined') {\n    // Do nothing\n} else if (typeof db !== 'undefined') {\n    setup_websql(db);\n} else if (\"localStorage\" in window) {\n    setup_localstorage();\n} else {\n\n    sweep_cache = function sweep_cache(timestamp) {};\n\n    clear_service = function clear_service(service, acc) {};\n\n    search_service = function search_service(service, cback) {};\n\n    cached_accessions = function cached_accessions(service, cback) {\n        cback.call(CachingService, []);\n    };\n\n    get_db_data = function get_db_data(acc, service, cback) {\n        cback.call(null, null, null);\n    };\n\n    store_db_data = function store_db_data(acc, service, data) {};\n\n    find_latest_data = function find_latest_data(acc, service, timestamp, cback) {\n        // We don't actually retrieve historical data for this\n        cback.call(null, []);\n    };\n\n    data_timestamps = function data_timestamps(service, timestamp, cback) {\n        cback.call(null, []);\n    };\n\n    begin_transaction = function begin_transaction(callback, trans) {\n        // No support for transactions here. Do nothing.\n        setTimeout(function () {\n            callback({ \"transaction\": trans });\n        }, 0);\n    };\n    end_transaction = function end_transaction(callback) {\n        // No support for transactions here. Do nothing.\n        setTimeout(function () {\n            callback();\n        }, 0);\n    };\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CachingService);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!******************************************!*\
  !*** ../gator/js/lib/GatorDataReader.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Service__ = __webpack_require__(/*! ./Service */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ClustalRunner__ = __webpack_require__(/*! ./ClustalRunner */ 5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__UniprotReader__ = __webpack_require__(/*! ./UniprotReader */ 8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__bean__ = __webpack_require__(/*! ../bean */ 0);\n/**\n * @fileOverview    Retrieve data from the Gator web service\n */\n\n\n\n\n\n\n\nvar localhosts = ['localhost', '10.0.2.2'];\nvar url_base = localhosts.indexOf(window.location.hostname) >= 0 ? 'https://test.glycocode.com/api' : '/api';\nvar cloudfront_host = '';\n\nconst set_reducer = (data_by_mime, set) => {\n  var mimetype = set.metadata.mimetype;\n  if (!mimetype) {\n    return;\n  }\n  if (!data_by_mime['samples']) {\n    data_by_mime['samples'] = {};\n  }\n  set.data.forEach(dat => {\n    dat.dataset = set.dataset;\n    dat.acc = set.acc;\n    if (set.metadata.sample) {\n      dat.species = set.metadata.sample.species;\n    }\n  });\n  data_by_mime['samples'][set.dataset] = set.metadata.sample;\n\n  data_by_mime[mimetype] = (data_by_mime[mimetype] || []).concat(set.data);\n};\n\nvar data_parser = function data_parser(data) {\n  var doc = this.datasetname || (data || {}).datasetname || 'combined';\n  if (!data || !data.data) {\n    return this;\n  }\n  var actual_data = data.data.filter(function (set) {\n    return set.dataset.indexOf(doc) >= 0;\n  })[0] || { 'data': [] };\n\n  if (doc.split(',').length > 1) {\n    doc = doc.split(',');\n    var data_by_mime = {};\n    data.data.filter(set => doc.indexOf(set.dataset) >= 0).forEach(set_reducer.bind(null, data_by_mime));\n    actual_data = { 'data': data_by_mime };\n  }\n\n  if (doc == 'glycodomain') {\n    actual_data = data.data.filter(function (set) {\n      return set.metadata.mimetype == 'application/json+glycodomain';\n    })[0] || { 'data': [] };\n    console.log(actual_data);\n  }\n  if (doc == 'combined' || doc == 'homology' || doc == 'predictions') {\n    var data_by_mime = {};\n    data.data.forEach(set_reducer.bind(null, data_by_mime));\n    actual_data = { 'data': data_by_mime };\n  }\n  if (doc == 'homology') {\n    actual_data.alignments = data.data.filter(function (set) {\n      return set.dataset == 'homology_alignment';\n    })[0].data;\n  }\n  this._raw_data = actual_data;\n  return this;\n};\n\n/** Default class constructor\n */\nconst GatorDataReader = __WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */].buildService(data_parser);\n\nGatorDataReader.prototype.requestData = function () {\n  var reader_conf = {\n    type: \"GET\",\n    dataType: \"json\",\n    data: {}\n  };\n  var acc = (this._requestset || 'combined') + '/' + (this.agi || this.acc).toLowerCase();\n  var gatorURL = (this._endpointURL || GatorDataReader.server).slice(-1) == '/' ? this._endpointURL + acc : this._endpointURL + '/' + acc;\n  reader_conf.auth = __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].GATOR_AUTH_TOKEN;\n  reader_conf.api_key = __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].GATOR_CLIENT_ID;\n  reader_conf.session_cache = true;\n  reader_conf.url = gatorURL;\n  return reader_conf;\n};\n\nvar id_token;\n\nObject.defineProperty(GatorDataReader, 'server', {\n  get: function get() {\n    return url_base.replace('/api', '');\n  },\n  set: function set(url) {\n    url_base = url.replace('/$', '') + '/api';\n  }\n});\n\nObject.defineProperty(GatorDataReader, 'ID_TOKEN', {\n  get: function get() {\n    return id_token;\n  },\n  set: function set(token) {\n    id_token = token;\n    authenticating_promise = null;\n    __WEBPACK_IMPORTED_MODULE_4__bean__[\"a\" /* default */].fire(GatorDataReader, 'idtoken');\n  }\n});\n\nvar is_anonymous;\n\nObject.defineProperty(GatorDataReader, 'anonymous', {\n  get: function get() {\n    return is_anonymous;\n  },\n  set: function set(anon) {\n    is_anonymous = anon;\n    id_token = null;\n    authenticating_promise = null;\n  }\n});\n\nvar authenticating_promise;\n\nvar anonymous_login = function anonymous_login() {\n  return new Promise(function (resolve, reject) {\n    __WEBPACK_IMPORTED_MODULE_0__Service__[\"a\" /* default */].request({ 'url': url_base + '/login?cachebuster=' + new Date().getTime(),\n      'type': 'GET'\n    }, function (err, token) {\n      if (err) {\n        reject(err);\n      } else {\n        var auth_token = JSON.parse(token);\n        if (typeof auth_token == 'string') {\n          auth_token = { id_token: auth_token };\n        }\n        GatorDataReader.ID_TOKEN = auth_token.id_token;\n        resolve(url_base);\n      }\n    }, true);\n  });\n};\n\nvar reading_was_ok = true;\n\nvar reauth_reader = function reauth_reader(reader_class) {\n  var current_retrieve = reader_class.prototype.retrieve;\n  reader_class.prototype.retrieve = function () {\n    console.log('Retrieve with auth retry');\n    var current_arguments = [].slice.call(arguments);\n    var self = this;\n    this.bind('error', function (err) {\n      if (err.status == 401 || err.status == 403) {\n        if (!self.tried_auth) {\n          self.unbind('error');\n          self.tried_auth = true;\n          if (reading_was_ok) {\n            delete __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].GATOR_AUTH_TOKEN;\n            GatorDataReader.ID_TOKEN = null;\n            authenticating_promise = null;\n            __WEBPACK_IMPORTED_MODULE_4__bean__[\"a\" /* default */].fire(GatorDataReader, 'unauthorized');\n            reading_was_ok = false;\n          }\n          authenticate_gator().catch(function (err) {\n            console.log(\"Error after auth\", err);\n            throw err;\n          }).then(function () {\n            reading_was_ok = true;\n            self.retrieve.apply(self, current_arguments);\n          }).catch(function (err) {\n            console.log(\"Died on doing the reauth\", err);\n          });\n        }\n      }\n    });\n    current_retrieve.apply(self, current_arguments);\n  };\n};\n\nreauth_reader(GatorDataReader);\n\nwindow.addEventListener(\"unhandledrejection\", function (err, promise) {\n  if (err.reason && err.reason.message == 'Unauthorized' && !err.reason.handled) {\n    err.reason.handled = true;\n    __WEBPACK_IMPORTED_MODULE_4__bean__[\"a\" /* default */].fire(GatorDataReader, 'unauthorized');\n    return;\n  }\n  console.log(err);\n});\n\nvar authenticate_gator = function authenticate_gator() {\n  if (authenticating_promise) {\n    return authenticating_promise;\n  }\n  // Need to put this somewhere for the moment\n  // Temporary code until we move to a single host\n  __WEBPACK_IMPORTED_MODULE_2__ClustalRunner__[\"a\" /* default */].SERVICE_URL = url_base + '/tools/clustal';\n  __WEBPACK_IMPORTED_MODULE_3__UniprotReader__[\"a\" /* default */].SERVICE_URL = url_base + '/data/latest/uniprot';\n  if (!__WEBPACK_IMPORTED_MODULE_3__UniprotReader__[\"a\" /* default */].reauthed) {\n    reauth_reader(__WEBPACK_IMPORTED_MODULE_3__UniprotReader__[\"a\" /* default */]);\n  }\n  __WEBPACK_IMPORTED_MODULE_3__UniprotReader__[\"a\" /* default */].reauthed = true;\n\n  if (!GatorDataReader.ID_TOKEN && GatorDataReader.anonymous) {\n    console.log(\"Doing an anonymous login\");\n    authenticating_promise = anonymous_login().then(function () {\n      authenticating_promise = null;\n    }).then(authenticate_gator);\n    return authenticating_promise;\n  }\n\n  if (!GatorDataReader.ID_TOKEN && !GatorDataReader.anonymous) {\n    console.log(\"We cannot log in without an ID TOKEN, waiting for token\");\n\n    authenticating_promise = new Promise(function (resolve, reject) {\n      var resolver = function resolver() {\n        console.log(\"Got a new ID token\");\n        __WEBPACK_IMPORTED_MODULE_4__bean__[\"a\" /* default */].remove(GatorDataReader, 'idtoken', resolver);\n        __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].GATOR_AUTH_TOKEN = GatorDataReader.ID_TOKEN;\n        resolve(url_base);\n      };\n      __WEBPACK_IMPORTED_MODULE_4__bean__[\"a\" /* default */].add(GatorDataReader, 'idtoken', resolver);\n      setTimeout(function () {\n        console.log(\"Timed out logging in\");\n        reject(new Error('Timed out'));\n      }, 5000);\n    });\n    return authenticating_promise;\n  }\n\n  authenticating_promise = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      __WEBPACK_IMPORTED_MODULE_1__MASCP__[\"a\" /* default */].GATOR_AUTH_TOKEN = GatorDataReader.ID_TOKEN;\n      __WEBPACK_IMPORTED_MODULE_4__bean__[\"a\" /* default */].fire(GatorDataReader, 'auth', [url_base]);\n      resolve(url_base);\n    }, 0);\n  });\n\n  return authenticating_promise;\n};\n\nGatorDataReader.prototype.setupSequenceRenderer = function (renderer) {\n  var self = this;\n  if (this.datasetname !== 'homology') {\n    return;\n  }\n  renderer.forceTrackAccs = true;\n  renderer.addAxisScale('homology', function (pos, accession, inverse) {\n    if (!self.result || self.agi === accession.name || self.acc === accession.name) {\n      return pos;\n    }\n    if (inverse) {\n      return self.result.calculateSequencePositionFromPosition(self.agi || self.acc, accession.name.toLowerCase(), pos);\n    }\n    return self.result.calculatePositionForSequence(self.agi || self.acc, accession.name.toLowerCase(), pos);\n  });\n};\n\n(function () {\n  var normalise_insertions = function normalise_insertions(inserts) {\n    var pos;\n    var positions = [];\n    var result_data = {};\n    for (pos in inserts) {\n      if (inserts.hasOwnProperty(pos) && parseInt(pos) >= -1) {\n        positions.push(parseInt(pos));\n      }\n    }\n    positions = positions.sort(function sortfunction(a, b) {\n      return a - b;\n    });\n\n    // From highest to lowest position, loop through and\n    // subtract the lengths of previous subtratctions from\n    // the final position value.\n\n    for (var i = positions.length - 1; i >= 0; i--) {\n      var j = i - 1;\n      pos = parseInt(positions[i]);\n      var value = inserts[pos];\n      while (j >= 0) {\n        pos -= inserts[positions[j]].length;\n        j--;\n      }\n      if (!value.match(/^\\s+$/)) {\n        result_data[pos + 1] = value + (result_data[pos + 1] || '');\n      }\n    }\n    //    delete result_data[0];\n    return result_data;\n  };\n\n  var splice_char = function splice_char(seqs, index, insertions) {\n    for (var i = 0; i < seqs.length; i++) {\n      var seq = seqs[i].toString();\n      if (seq.charAt(index) != '-') {\n        if (!insertions[i]) {\n          insertions[i] = {};\n          insertions[i][-1] = '';\n        }\n        insertions[i][index - 1] = seq.charAt(index);\n        if (insertions[i][index] && insertions[i][index].match(/\\w/)) {\n          insertions[i][index - 1] += insertions[i][index];\n          delete insertions[i][index];\n        }\n      } else {\n        if (insertions[i]) {\n          insertions[i][index - 1] = ' ';\n          if ((insertions[i][index] || '').match(/^\\s+$/)) {\n            insertions[i][index - 1] += insertions[i][index];\n            delete insertions[i][index];\n          }\n        }\n      }\n      seqs[i] = seq.slice(0, index) + seq.slice(index + 1);\n    }\n  };\n\n  GatorDataReader.Result.prototype.makeSequences = function (ref_acc, alignments) {\n    var seqs = [];\n    var insertions = [];\n    var accs = [];\n    var ref_cigar = '';\n    alignments.forEach(function (align) {\n      if (!align.cigar && align.cigar_line) {\n        align.cigar = align.cigar_line;\n        delete align.cigar_line;\n      }\n      // If the cigar line hasn't already been revivified\n      if (!align.cigar.match(/^[\\-\\.]*$/)) {\n        // Expand out the cigar line replacing M with . and D with -\n        align.cigar = align.cigar.match(/\\d*[MD]/g).map(function (bit) {\n          return new Array((parseInt(bit.slice(0, -1)) || 1) + 1).join(bit.slice(-1) == 'M' ? '.' : '-');\n        }).join('');\n      }\n      if (align.uniprot !== ref_acc.toUpperCase()) {\n        accs.push(align.uniprot);\n        seqs.push(align.cigar);\n      } else {\n        ref_cigar = align.cigar;\n      }\n    });\n    var aligning_seq = ref_cigar,\n        i = aligning_seq.length - 1;\n    for (i; i >= 0; i--) {\n      if (aligning_seq.charAt(i) == '-') {\n        splice_char(seqs, i, insertions);\n      }\n    }\n    for (i = 0; i < seqs.length; i++) {\n      if (insertions[i]) {\n        insertions[i] = normalise_insertions(insertions[i]);\n        var seq = seqs[i];\n        seqs[i] = { 'sequence': seq, 'insertions': insertions[i] };\n        seqs[i].toString = function () {\n          return this.sequence;\n        };\n      }\n    }\n    var result = {};\n    accs.forEach(function (acc, idx) {\n      result[acc.toLowerCase()] = seqs[idx];\n    });\n    result[ref_acc.toLowerCase()] = ref_cigar.replace('-', '');\n    return result;\n  };\n})();\n\nGatorDataReader.Result.prototype.calculatePositionForSequence = function (ref_acc, idx, pos) {\n  if (ref_acc.toLowerCase() === idx.toLowerCase()) {\n    return pos;\n  }\n  if (!this.sequences) {\n    this.sequences = this.makeSequences(ref_acc, this._raw_data.alignments);\n  }\n\n  var inserts = this.sequences[idx.toLowerCase()].insertions || {};\n  var result = pos;\n  var actual_position = 0;\n  var seq = this.sequences[idx.toLowerCase()].toString();\n  for (var i = 0; i < seq.length; i++) {\n    if (inserts[i]) {\n      actual_position += inserts[i].length;\n    }\n    actual_position += 1;\n    if (seq.charAt(i) == '-') {\n      actual_position -= 1;\n    }\n    if (pos <= actual_position) {\n      if (pos == actual_position) {\n        return i + 1;\n      } else {\n        if (i == 0) {\n          i = 1;\n        }\n        return -1 * i;\n      }\n    }\n  }\n  return -1 * seq.length;\n};\n\nGatorDataReader.Result.prototype.calculateSequencePositionFromPosition = function (ref_acc, idx, pos) {\n  if (ref_acc.toLowerCase() === idx.toLowerCase()) {\n    return pos;\n  }\n  if (!this.sequences) {\n    this.sequences = this.makeSequences(ref_acc, this._raw_data.alignments);\n  }\n  var inserts = this.sequences[idx.toLowerCase()].insertions || {};\n  var result = pos;\n  var actual_position = 0;\n  var seq = this.sequences[idx.toLowerCase()].toString();\n  for (var i = 0; i < pos; i++) {\n    if (inserts[i]) {\n      actual_position += inserts[i].length;\n    }\n    actual_position += 1;\n    if (seq.charAt(i) == '-') {\n      actual_position -= 1;\n    }\n  }\n  if (actual_position == 0) {\n    actual_position += 1;\n  }\n  return actual_position;\n};\n\nvar default_result = GatorDataReader.Result;\n\nObject.defineProperty(GatorDataReader.prototype, 'datasetname', {\n  get: function get() {\n    return this._datasetname;\n  },\n  set: function set(value) {\n    this._datasetname = value;\n    this._requestset = value === 'homology' ? 'homology' : 'combined';\n    let alt_result = class extends default_result {\n      constructor(data) {\n        data.datasetname = value;\n        super(data);\n        return this;\n      }\n    };\n    this.Result = alt_result;\n  }\n});\nGatorDataReader.authenticate = function () {\n  return authenticate_gator();\n};\n\nvar running_promises = {};\n\nvar new_retrieve = function new_retrieve(acc) {\n  var self = this;\n  var orig_arguments = [].slice.call(arguments);\n  if (running_promises[acc + '-' + this._requestset]) {\n    running_promises[acc + '-' + this._requestset].then(function (result) {\n      GatorDataReader.prototype.retrieve.apply(self, orig_arguments);\n    }).catch(function (err) {\n      authenticate_gator().then(function () {\n        new_retrieve.apply(self, orig_arguments);\n      });\n    });\n    return;\n  }\n  running_promises[acc + '-' + this._requestset] = new Promise(function (resolve, reject) {\n    self.bind('resultReceived', resolve);\n    self.once('error', reject);\n  });\n\n  running_promises[acc + '-' + this._requestset].catch(function (err) {\n    authenticate_gator().then(function () {\n      running_promises[acc + '-' + self._requestset] = null;\n    });\n  });\n\n  GatorDataReader.prototype.retrieve.apply(self, orig_arguments);\n};\n\nGatorDataReader.createReader = function (doc) {\n  // Do the auth dance here\n\n  var reader = new GatorDataReader(null, url_base + '/data/latest/');\n  console.log(doc);\n  reader.datasetname = doc;\n  // MASCP.Service.CacheService(reader);\n\n  authenticate_gator().then(function () {\n    reader.retrieve = new_retrieve;\n    __WEBPACK_IMPORTED_MODULE_4__bean__[\"a\" /* default */].fire(reader, 'ready');\n  });\n\n  return reader;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GatorDataReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!*******************************************!*\
  !*** ../gator/js/lib/SequenceRenderer.js ***!
  \*******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bean__ = __webpack_require__(/*! ../bean */ 0);\n/**\n * @fileOverview    Read in sequences to be re-rendered in a block that can be easily annotated.\n */\n\n\n\n\n/**\n * @class   Reformatter for sequences in html pages. The object retrieves the amino acid sequence from the \n *          given element, and then reformats the display of the sequence so that rendering layers can be\n *          applied to it. \n * @author  hjjoshi\n * @param   {Element} sequenceContainer Container element that the sequence currently is found in, and also \n *                                      the container that data will be re-inserted into.\n */\nconst SequenceRenderer = function () {\n\n    /**\n     *  @lends SequenceRenderer.prototype\n     *  @property   {Array}     trackOrder  The order of tracks on the renderer, an array of layer/group names.\n     */\n    var setupTrackOrder = function setupTrackOrder(renderer) {\n        var renderer_track_order = [];\n\n        var accessors = {\n\n            getTrackOrder: function getTrackOrder() {\n                return renderer_track_order;\n            },\n\n            setTrackOrder: function setTrackOrder(in_order) {\n                var track_order = [];\n                var order = in_order;\n                if (!order instanceof Array) {\n                    order = [in_order];\n                }\n                for (var i = 0; i < order.length; i++) {\n                    var a_track = order[i];\n                    if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(a_track)) {\n                        while (track_order.indexOf(a_track) >= 0) {\n                            track_order.splice(track_order.indexOf(a_track), 1);\n                        }\n                        track_order.push(a_track);\n                    }\n                    if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(a_track)) {\n                        let insert_idx = i + 1;\n                        __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(order[i]).eachLayer(function (grp_lay) {\n                            while (track_order.indexOf(grp_lay.name) >= 0) {\n                                track_order.splice(track_order.indexOf(grp_lay.name), 1);\n                            }\n                            order.splice(insert_idx, 0, grp_lay.name);\n                            insert_idx += 1;\n                        });\n                    }\n                }\n                for (i = (renderer_track_order || []).length - 1; i >= 0; i--) {\n                    if (track_order.indexOf(renderer_track_order[i]) < 0) {\n                        this.hideLayer(renderer_track_order[i]);\n                        this.hideGroup(renderer_track_order[i]);\n                        if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(renderer_track_order[i])) {\n                            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(renderer_track_order[i]), 'removed', [renderer]);\n                        }\n                        if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(renderer_track_order[i])) {\n                            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(renderer_track_order[i]), 'removed', [renderer]);\n                        }\n                    }\n                }\n                renderer_track_order = track_order;\n\n                if (this.refresh) {\n                    this.refresh(true);\n                }\n                __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(renderer, 'orderChanged', [track_order]);\n            }\n        };\n\n        if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].IE) {\n            renderer.setTrackOrder = accessors.setTrackOrder;\n        }\n\n        if (typeof Object.defineProperty == 'function' && !__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].IE8) {\n            Object.defineProperty(renderer, \"trackOrder\", {\n                get: accessors.getTrackOrder,\n                set: accessors.setTrackOrder\n            });\n        }\n    };\n\n    return function (sequenceContainer) {\n        if (!sequenceContainer) {\n            return this;\n        }\n        if (typeof sequenceContainer !== 'undefined') {\n            this._container = sequenceContainer;\n            if (!this._container.style.position) {\n                this._container.style.position = 'relative';\n            }\n            //        this._container.style.width = '100%';\n\n            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(this, 'sequenceChange', function (e) {\n                while (sequenceContainer.firstChild) {\n                    sequenceContainer.removeChild(sequenceContainer.firstChild);\n                }\n                this._sequence_els.forEach(function (el) {\n                    sequenceContainer.appendChild(el);\n                });\n                var float_clear = document.createElement('div');\n                float_clear.setAttribute('style', 'clear: both; float: none; height: 0px; width: 100%;');\n                sequenceContainer.appendChild(float_clear);\n                sequenceContainer.style.width = this._sequence_els.length + 'em';\n                //            this.showRowNumbers();            \n            });\n\n            this.setSequence(sequenceContainer.textContent || '');\n        }\n\n        setupTrackOrder(this);\n\n        return this;\n    };\n}();\n\n/**\n * Event fired when a layer is registered with the global layer registry\n * @name    MASCP.layerRegistered\n * @event\n * @param   {Object}    e\n * @param   {Object}    layer Layer just registered\n */\n\n/**\n * Event fired when a group is registered with the global group registry\n * @name    MASCP.groupRegistered\n * @event\n * @param   {Object}    e\n * @param   {Object}    group Group just registered\n */\n\n/**\n * Event fired when the sequence is changed in a sequence renderer\n * @name    SequenceRenderer#sequenceChange\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Event fired when a result is rendered on this renderer\n * @name    SequenceRenderer#resultsRendered\n * @event\n * @param   {Object}    e\n * @param   {MASCP.Service} reader  Reader that rendered the result.\n */\n\n/**\n * @name    MASCP.Group#visibilityChange\n * @event\n * @param   {Object}    e\n * @param   {Object}    renderer\n * @param   {Boolean}   visibility\n */\n\n/**\n * @name    MASCP.Layer#visibilityChange\n * @event\n * @param   {Object}    e\n * @param   {Object}    renderer\n * @param   {Boolean}   visibility\n */\n\n/**\n *  @lends SequenceRenderer.prototype\n *  @property   {String}  sequence  Sequence to mark up.\n */\nSequenceRenderer.prototype = {\n    sequence: null\n};\n\nif (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].IE) {\n    SequenceRenderer.prototype.prototype = document.createElement('div');\n}\n\n/**\n * Set the sequence for this renderer. Fires the sequenceChange event when the sequence is set.\n * @param {String} sequence Sequence to render\n * @see SequenceRenderer#event:sequenceChange\n */\nSequenceRenderer.prototype.setSequence = function (sequence) {\n    this.sequence = this._cleanSequence(sequence);\n    var sequence_els = [];\n    var renderer = this;\n    if (!this.sequence) {\n        return;\n    }\n    var seq_chars = this.sequence.split('');\n    for (var i = 0; i < seq_chars.length; i++) {\n        var aa = seq_chars[i];\n        if (aa.match(/[A-Za-z]/)) {\n            var span_el = document.createElement('span');\n            span_el.textContent = aa;\n            sequence_els.push(span_el);\n        }\n    }\n\n    sequence_els.forEach(function (el, i) {\n        // if ( (i % 10) == 0 && i > 0 && ((i % 50) != 0)) {\n        //     this.style.margin = '0px 0px 0px 1em';\n        // }\n        // if ( (i % 50) == 0 && i > 0 ) {\n        //     if (MASCP.IE7) {\n        //         sequence_els[i-1].style.styleFloat = 'none';\n        //         sequence_els[i-1].style.width = '1em';\n        //     }\n        //     this.style.clear = 'both';\n        // }\n\n        el._index = i;\n\n        el.style.display = 'block';\n        el.style.cssFloat = 'left';\n        el.style.styleFloat = 'left';\n        el.style.height = '1.1em';\n        el.style.position = 'relative';\n\n        el.addToLayer = SequenceRenderer.addElementToLayer;\n        el.addBoxOverlay = SequenceRenderer.addBoxOverlayToElement;\n        el.addToLayerWithLink = SequenceRenderer.addElementToLayerWithLink;\n        el._renderer = renderer;\n    });\n    this._sequence_els = sequence_els;\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(this, 'sequenceChange');\n};\n\n/**\n * Color some residues on this residue\n * @param {Array} indexes Indexes to apply the given color to\n * @param {String} color Color to use to highlight the residues\n * @returns ID for the layer that is created\n * @type String\n */\nSequenceRenderer.prototype.colorResidues = function (indexes, color) {\n    var layer_id = Math.floor(Math.random() * 1000).toString();\n    __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].registerLayer(layer_id, { 'color': color || '#ff0000' });\n    var aas = this.getAminoAcidsByPosition(indexes);\n    for (var i = 0; i < aas.length; i++) {\n        aas[i].addToLayer(layer_id);\n    }\n    return __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(layer_id);\n};\n\nSequenceRenderer.prototype._cleanSequence = function (sequence) {\n    if (!sequence) {\n        return sequence;\n    }\n    var cleaned_sequence = sequence;\n    cleaned_sequence = cleaned_sequence.replace(new RegExp(String.fromCharCode(160), \"g\"), '');\n    cleaned_sequence = cleaned_sequence.replace(/[\\n\\t\\s\\d]+/mgi, '');\n    cleaned_sequence = cleaned_sequence.replace(/\\(.*\\)/g, '');\n    return cleaned_sequence;\n};\n\n/**\n * Retrieve the HTML Elements that contain the amino acids at the given positions. The first amino acid is found at position 1.\n * @param {Array} indexes Indexes to retrieve elements for\n * @returns Elements representing each amino acid at the given positions\n * @type Array\n */\nSequenceRenderer.prototype.getAminoAcidsByPosition = function (indexes) {\n    var sequence_els = this._sequence_els;\n    return indexes.map(function (index) {\n        if (index < 0) {\n            return null;\n        }\n        return sequence_els[index - 1];\n    });\n};\n\nSequenceRenderer.prototype.getAA = function (index) {\n    return this.getAminoAcidsByPosition([index]).shift();\n};\n\n/**\n * Retrieve the HTML Elements that contain the amino acids contained in the given peptide sequence.\n * @param {String} peptideSequence Peptide sequence used to look up the amino acids\n * @returns Elements representing each amino acid at the given positions\n * @type Array\n */\nSequenceRenderer.prototype.getAminoAcidsByPeptide = function (peptideSequence) {\n    var start = this.sequence.indexOf(peptideSequence);\n    var results = [];\n\n    if (start < 0) {\n        results.addToLayer = function () {};\n        return results;\n    }\n    results = results.concat(this._sequence_els.slice(start, start + peptideSequence.length));\n    if (results.length) {\n        results.addToLayer = function (layername, fraction, options) {\n            return results[0].addBoxOverlay(layername, results.length, fraction, options);\n        };\n    } else {\n        results.addToLayer = function () {};\n    }\n\n    return results;\n};\n\n/**\n * Toggle the display of the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\nSequenceRenderer.prototype.toggleLayer = function (layer, consumeChange) {\n    var layerName = layer;\n    if (typeof layer != 'string') {\n        layerName = layer.name;\n    } else {\n        layer = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers[layer];\n    }\n    this._container.classList.toggle(layerName + '_active');\n    this._container.classList.toggle(layerName + '_inactive');\n    if (!consumeChange) {\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(layer, 'visibilityChange', [this, this.isLayerActive(layer)]);\n    }\n    return this;\n};\n\n/**\n * Show the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\nSequenceRenderer.prototype.showLayer = function (lay, consumeChange) {\n    var layer = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(lay);\n\n    if (!layer || layer.disabled) {\n        return;\n    }\n    this._container.classList.add(layer.name + '_active');\n    this._container.classList.add('active_layer');\n    this._container.classList.remove(layer.name + '_inactive');\n    if (!consumeChange) {\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(layer, 'visibilityChange', [this, true]);\n    }\n    return this;\n};\n\n/**\n * Hide the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\nSequenceRenderer.prototype.hideLayer = function (lay, consumeChange) {\n    var layer = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(lay);\n\n    if (!layer || layer.disabled) {\n        return;\n    }\n\n    this._container.classList.remove(layer.name + '_active');\n    this._container.classList.remove('active_layer');\n    this._container.classList.add(layer.name + '_inactive');\n    if (!consumeChange) {\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(layer, 'visibilityChange', [this, false]);\n    }\n    return this;\n};\n\n/**\n * Register a layer with this renderer. Actually is a proxy on to the global registry method\n * @see MASCP#registerLayer\n */\nSequenceRenderer.prototype.registerLayer = function (layer, options) {\n    return __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].registerLayer(layer, options);\n};\n\n/**\n * Hide or show a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @param {Boolean} visibility True for visible, false for hidden\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.setGroupVisibility = function (grp, visibility, consumeChange) {\n    var group = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(grp);\n    if (!group) {\n        return;\n    }\n    var groupName = group.name;\n\n    var renderer = this;\n\n    group.eachLayer(function (layer) {\n        if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(layer) === layer) {\n            // We can skip explicitly setting the visibility of groups here, since\n            // any sub-groups should have a controller.\n            return;\n        }\n        if (this.disabled && visibility) {\n            renderer.hideLayer(layer.name);\n            return;\n        }\n        if (visibility === true) {\n            renderer.showLayer(layer.name);\n        } else if (visibility === false) {\n            renderer.hideLayer(layer.name);\n        } else {\n            renderer.toggleLayer(layer.name);\n        }\n    });\n    if (visibility !== null && !consumeChange) {\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(group, 'visibilityChange', [renderer, visibility]);\n    }\n};\n\n/**\n * Hide a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.hideGroup = function (group, consumeChange) {\n    this.setGroupVisibility(group, false, consumeChange);\n};\n\n/**\n * Show a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.showGroup = function (group, consumeChange) {\n    this.setGroupVisibility(group, true, consumeChange);\n};\n\n/**\n * Toggle the visibility for a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.toggleGroup = function (group, consumeChange) {\n    this.setGroupVisibility(group, consumeChange);\n};\n\n/**\n * Check if the given layer is active\n * @param {String|Object} layer Layer name, or layer object\n * @returns Whether this layer is active on this renderer\n * @type Boolean\n */\nSequenceRenderer.prototype.isLayerActive = function (layer) {\n    var layerName = layer;\n    if (typeof layer != 'string') {\n        layerName = layer.name;\n    }\n    return !layer.disabled && this._container.classList.contains(layerName + '_active');\n};\n\n/**\n * Deprecated until there's a better implementation for the CondensedSequenceRenderer\n * @private\n */\n\nSequenceRenderer.prototype._setHighlight = function (layer, isHighlighted) {\n    return;\n};\n\n/**\n * Create a layer controller for this sequence renderer. Attach the controller to the containing box, and shift the box across 20px.\n */\nSequenceRenderer.prototype.createLayerController = function () {\n    console.log(\"createLayerController is deprected\");\n    return;\n};\n\n/**\n * Create a checkbox that is used to control the given layer\n * @param {String|Object} layer Layer name or layer object that a controller should be generated for\n * @param {Object} inputElement Optional input element to bind events to. If no element is given, a new one is created.\n * @returns Checkbox element that when checked will toggle on the layer, and toggle it off when unchecked\n * @type Object\n */\nSequenceRenderer.prototype.createLayerCheckbox = function (layer, inputElement, exclusive) {\n    console.log(\"createLayerCheckbox is deprecated\");\n    return;\n};\n\nSequenceRenderer.prototype._removeOtherBindings = function (object, inputElement) {\n    var renderer = this;\n\n    for (var i = 0; i < inputElement._current_bindings.length; i++) {\n        if (inputElement._current_bindings[i].renderer != renderer) {\n            continue;\n        }\n        var cb = inputElement._current_bindings[i];\n\n        if (cb.layer && cb.layer != object.name) {\n            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(cb.layer), 'visibilityChange', cb.object_function);\n            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(inputElement, 'change', cb.input_function);\n        }\n\n        if (cb.group && cb.group != object.name) {\n            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(cb.group), 'visibilityChange', cb.object_function);\n            __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(inputElement, 'change', cb.input_function);\n        }\n        cb.group = null;\n        cb.layer = null;\n    }\n};\n\n/**\n * Create a layer based controller for a group. This layer can act as a proxy for the other layers\n * @param {Object} lay Layer to turn into a group controller\n * @param {Object} grp Group to be controlled by this layer.\n */\n\nSequenceRenderer.prototype.createGroupController = function (lay, grp) {\n    var layer = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(lay);\n    var group = __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getGroup(grp);\n\n    var self = this;\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(layer, 'visibilityChange', function (rend, visible) {\n        if (rend == self) {\n            self.setGroupVisibility(group, visible);\n            self.refresh();\n        }\n    });\n};\n\n/**\n * Function to be added to Amino acid elements to facilitate adding elements to layers\n * @private\n * @param {String} layerName The layer that this amino acid should be added to\n * @returns Itself\n * @type Element\n */\nSequenceRenderer.addElementToLayer = function (layerName) {\n    this.addBoxOverlay(layerName, 1);\n    return this;\n};\n\n/**\n * Function to be added to Amino acid elements to facilitate adding elements to layers with a link\n * @private\n * @param {String} layerName The layer that this amino acid should be added to\n * @param {String} url URL to link to\n * @returns Itself\n * @type Element\n */\nSequenceRenderer.addElementToLayerWithLink = function (layerName, url, width) {\n    this.classList.add(layerName);\n    var anchor = document.createElement('a');\n    anchor.setAttribute('href', url);\n    anchor.classList.add(layerName + '_overlay');\n    anchor.setAttribute('style', 'display: box; left: 0px; top: 0px; width: 100%; position: absolute; height: 100%;');\n    anchor.textContent = '&nbsp;';\n    this.appendChild(anchor);\n    while (width && width > 0) {\n        this._renderer._sequence_els[this._index + width].addToLayerWithLink(layerName, url);\n        width -= 1;\n    }\n    if (this._z_indexes && this._z_indexes[layerName]) {\n        anchor.style.zIndex = this._z_indexes[layerName];\n    }\n    return this;\n};\n\n/**\n * Function to be added to Amino acid elements to facilitate adding box overlays to elements\n * @private\n * @param {String} layerName The layer that this amino acid should be added to, as well as the fraction opacity to use for this overlay\n * @returns Itself\n * @type Element\n */\nSequenceRenderer.addBoxOverlayToElement = function (layerName, width, fraction) {\n    if (typeof fraction == 'undefined') {\n        fraction = 1;\n    }\n\n    this.classList.add(layerName);\n    var new_el = document.createElement('div');\n    new_el.classList.add(layerName + '_overlay');\n    new_el.setAttribute('style', 'top: 0px; width: 100%; position: absolute; height: 100%; opacity:' + fraction + ';');\n    this.appendChild(new_el);\n    while (width && width > 1) {\n        this._renderer._sequence_els[this._index + width - 1].addBoxOverlay(layerName, 0, fraction);\n        width -= 1;\n    }\n    if (this._z_indexes && this._z_indexes[layerName]) {\n        new_el.style.zIndex = this._z_indexes[layerName];\n    }\n    var event_names = ['mouseover', 'mousedown', 'mousemove', 'mouseout', 'click', 'dblclick', 'mouseup', 'mouseenter', 'mouseleave'];\n    for (var i = 0; i < event_names.length; i++) {\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(new_el, event_names[i], function () {\n            return function (e) {\n                __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].getLayer(layerName), e.type, [e, 'SequenceRenderer']);\n            };\n        }(i));\n    }\n    return this;\n};\n\n/**\n * Reset this renderer. Hide all groups and layers, disabling them in the registry.\n */\nSequenceRenderer.prototype.reset = function () {\n    while (this._container.classList.length > 0) {\n        this._container.classList.remove(this._container.classList.item(0));\n    }\n    for (var group in __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].groups) {\n        if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].groups.hasOwnProperty(group)) {\n            this.hideGroup(group);\n        }\n    }\n    for (var layer in __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers) {\n        if (__WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers.hasOwnProperty(layer)) {\n            if (!this.keeptracks) {\n                this.hideLayer(layer, true);\n                __WEBPACK_IMPORTED_MODULE_0__MASCP__[\"a\" /* default */].layers[layer].disabled = true;\n            }\n        }\n    }\n\n    if (this.resetAnnotations) {\n        this.resetAnnotations();\n    }\n};\n\n/**\n * Execute the given block of code (in the renderer context) moving the refresh method away so that it is not called\n * @param {Function} func Function that contains operations to run without refreshing the renderer\n */\nSequenceRenderer.prototype.withoutRefresh = function (func) {\n    var curr_refresh = this.refresh;\n    this.refresh = function () {};\n    this.refresh.suspended = true;\n    func.apply(this);\n    this.refresh = curr_refresh;\n};\n\n/**\n * Refresh the display for this sequence renderer\n */\nSequenceRenderer.prototype.refresh = function () {\n    var z_index = -2;\n    if (!this._z_indexes) {\n        this._z_indexes = {};\n    }\n    for (var i = 0; i < (this.trackOrder || []).length; i++) {\n        if (!this.isLayerActive(this.trackOrder[i])) {\n            continue;\n        }\n        Array.prototype.slice.call(document.querySelectorAll('.' + this.trackOrder[i] + '_overlay')).forEach(function (el) {\n            el.style.zIndex = z_index;\n        });\n        this._z_indexes[this.trackOrder[i]] = z_index;\n        z_index -= 1;\n    }\n};\n\n/**\n * Bind a function to execute on a particular event for this object\n * @param {String} ev Event name\n * @param {Function} func Function to execute\n */\n\nSequenceRenderer.prototype.bind = function (ev, func) {\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(this, ev, func);\n};\n\nSequenceRenderer.prototype.unbind = function (ev, func) {\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(this, ev, func);\n};\n\nSequenceRenderer.prototype.trigger = function (ev, args) {\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(this, ev, args);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (SequenceRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/*!**************************************************************!*\
  !*** ../gator/js/lib/CondensedSequenceRendererNavigation.js ***!
  \**************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SVGCanvas__ = __webpack_require__(/*! ./SVGCanvas */ 12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bean__ = __webpack_require__(/*! ../bean */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\n\nconst svgns = 'http://www.w3.org/2000/svg';\n\n\n\n\n\nvar touch_scale = 1,\n    touch_enabled = false;\nif (\"ontouchend\" in document) {\n    touch_scale = window.devicePixelRatio > 1 ? 2 : 1;\n    touch_enabled = true;\n}\n\nvar Navigation = function Navigation(parent_canvas, renderer) {\n    Object(__WEBPACK_IMPORTED_MODULE_0__SVGCanvas__[\"a\" /* default */])(parent_canvas);\n\n    this.win = function () {\n        return renderer.win();\n    };\n\n    buildNavPane.call(this, parent_canvas);\n\n    var track_group = parent_canvas.group();\n\n    parent_canvas.insertBefore(track_group, parent_canvas.lastChild);\n\n    var track_canvas = document.createElementNS(svgns, 'svg');\n    buildTrackPane.call(this, track_canvas, connectRenderer.call(this, renderer));\n\n    track_group.appendChild(track_canvas);\n\n    track_group.setAttribute('clip-path', 'url(#' + this.clipping_id + ')');\n\n    this.disable = function () {\n        parent_canvas.style.display = 'none';\n        track_canvas.style.display = 'none';\n    };\n\n    this.enable = function () {\n        parent_canvas.style.display = 'block';\n        track_canvas.style.display = 'block';\n    };\n\n    this.demote = function () {\n        track_canvas.hide();\n        return;\n    };\n\n    this.promote = function () {\n        if (this.visible()) {\n            track_canvas.show();\n        } else {\n            track_canvas.hide();\n        }\n    };\n\n    this.setDimensions = function (width, height) {\n        parent_canvas.setAttribute('width', width);\n        parent_canvas.setAttribute('height', height);\n    };\n};\n\nvar connectRenderer = function connectRenderer(renderer) {\n\n    /**\n     * Create a layer based controller for a group. Clicking on the nominated layer will animate out the expansion of the\n     * group.\n     * @param {Object} lay Layer to turn into a group controller\n     * @param {Object} grp Group to be controlled by this layer.\n     */\n\n    var controller_map = {};\n    var expanded_map = {};\n\n    var old_remove_track = renderer.removeTrack;\n\n    renderer.removeTrack = function (layer) {\n        old_remove_track.call(this, layer);\n        delete controller_map[layer.name];\n        delete expanded_map[layer.name];\n    };\n\n    this.isController = function (layer) {\n        if (controller_map[layer.name]) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    this.getController = function (group) {\n        for (var lay in controller_map) {\n            if (controller_map.hasOwnProperty(lay) && controller_map[lay] == group) {\n                return __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(lay);\n            }\n        }\n        return null;\n    };\n\n    this.isControllerExpanded = function (layer) {\n        return expanded_map[layer.name];\n    };\n\n    renderer.createGroupController = function (lay, grp) {\n        var layer = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(lay);\n        var group = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getGroup(grp);\n\n        if (!layer || !group) {\n            return;\n        }\n\n        if (controller_map[layer.name]) {\n            return;\n        }\n\n        controller_map[layer.name] = group;\n\n        expanded_map[layer.name] = false;\n\n        var self = this;\n\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(layer, 'removed', function (ev, rend) {\n            self.setGroupVisibility(group);\n        });\n\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(layer, 'visibilityChange', function (rend, visible) {\n            if (group.size() > 0) {\n                if (!expanded_map.hasOwnProperty(layer.name)) {\n                    expanded_map[layer.name] = false;\n                }\n                self.setGroupVisibility(group, expanded_map[layer.name] && visible, true);\n                renderer.refresh();\n            }\n        });\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(group, 'visibilityChange', function (rend, visible) {\n            if (visible) {\n                self.showLayer(layer, true);\n                expanded_map[layer.name] = true;\n            }\n        });\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].remove(layer, '_expandevent');\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(layer, '_expandevent', function (ev) {\n            expanded_map[layer.name] = !expanded_map[layer.name];\n            self.withoutRefresh(function () {\n                self.setGroupVisibility(group, expanded_map[layer.name]);\n            });\n            self.refresh(true);\n        });\n    };\n\n    return DragAndDrop(function (track, before, after) {\n        var t_order = renderer.trackOrder;\n\n        t_order.trackIndex = function (tr) {\n            if (!tr) {\n                return this.length;\n            }\n            return this.indexOf(tr.name);\n        };\n\n        if (after && !before) {\n            before = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(t_order[t_order.trackIndex(after) + 1]);\n        }\n\n        t_order.splice(t_order.trackIndex(track), 1);\n        var extra_to_push = [];\n        if (controller_map[track.name]) {\n            let layer_func = function layer_func(lay) {\n                if (__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getGroup(lay) === lay) {\n                    __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getGroup(lay).eachLayer(layer_func);\n                }\n                if (t_order.trackIndex(lay) >= 0) {\n                    extra_to_push = [t_order.splice(t_order.trackIndex(lay), 1)[0]].concat(extra_to_push);\n                }\n            };\n            __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getGroup(controller_map[track.name]).eachLayer(layer_func);\n        }\n        if (before) {\n            t_order.splice(t_order.trackIndex(before), 1, track.name, before ? before.name : undefined);\n            for (var i = 0; i < extra_to_push.length; i++) {\n                if (extra_to_push[i]) {\n                    t_order.splice(t_order.trackIndex(before), 0, extra_to_push[i]);\n                }\n            }\n        } else {\n            renderer.hideLayer(track);\n            __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(track).disabled = true;\n\n            extra_to_push.forEach(function (lay) {\n\n                renderer.hideLayer(lay);\n                __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(lay).disabled = true;\n            });\n            t_order.push(track.name);\n            t_order = t_order.concat(extra_to_push);\n        }\n\n        renderer.trackOrder = t_order;\n    });\n};\n\nvar DragAndDrop = function DragAndDrop(spliceFunction) {\n    var targets = [];\n    var in_drag = false,\n        drag_el;\n\n    var splice_before, splice_after, trackToSplice;\n\n    var last_target;\n\n    var timeouts = {};\n\n    var nav_reset_set = null;\n\n    let spliceBefore;\n    let spliceAfter;\n\n    var drag_func = function drag_func(handle, element, track, canvas) {\n        var nav = this;\n\n        var old_reset = nav.reset;\n        if (nav_reset_set === null) {\n            nav.reset = function () {\n                targets = [];\n                old_reset.call(this);\n            };\n            nav_reset_set = true;\n        }\n        var resetDrag = function resetDrag() {\n            window.clearTimeout(timeouts.anim);\n            window.clearTimeout(timeouts.hover);\n            for (var i = 0; i < targets.length; i++) {\n                if (targets[i] != drag_el) {\n                    targets[i].removeAttribute('dragging');\n                    targets[i].removeAttribute('transform');\n                    targets[i].setAttribute('pointer-events', 'all');\n                }\n            }\n        };\n\n        targets.push(element);\n        element.track = track;\n\n        var single_touch_event = function single_touch_event(fn) {\n            return function (e) {\n                if (e.touches && e.touches.length == 1) {\n                    fn.call(this, e);\n                }\n            };\n        };\n\n        var beginDragging = function beginDragging(ev, tr, lbl_grp) {\n\n            if (drag_disabled()) {\n                return;\n            }\n\n            var target = canvas.nearestViewportElement;\n\n            if (in_drag) {\n                return;\n            }\n            lbl_grp.setAttribute('dragging', 'true');\n\n            spliceBefore = null;\n            spliceAfter = null;\n\n            var p_orig = lbl_grp.nearestViewportElement.createSVGPoint();\n\n            p_orig.x = ev.clientX || window.pageXOffset + ev.touches[0].clientX;\n            p_orig.y = ev.clientY || window.pageYOffset + ev.touches[0].clientY;\n\n            var rootCTM = lbl_grp.nearestViewportElement.getScreenCTM();\n            var matrix = rootCTM.inverse();\n\n            p_orig = p_orig.matrixTransform(matrix);\n\n            var oX = p_orig.x;\n            var oY = p_orig.y;\n\n            var dragfn = function dragfn(e) {\n                var p = lbl_grp.nearestViewportElement.createSVGPoint();\n                p.x = e.clientX || window.pageXOffset + e.touches[0].clientX;\n                p.y = e.clientY || window.pageYOffset + e.touches[0].clientY;\n                p = p.matrixTransform(matrix);\n\n                var dX = p.x - oX;\n                var dY = p.y - oY;\n                var curr_transform = lbl_grp.getAttribute('transform') || '';\n                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                curr_transform += ' translate(' + dX + ',' + dY + ') ';\n                curr_transform = curr_transform.replace(/\\s*$/, '');\n                lbl_grp.setAttribute('transform', curr_transform);\n                targets.forEach(function (targ) {\n                    var bb = targ.getBBox();\n                    if (bb.y < p.y && bb.y > p.y - bb.height && bb.x < p.x && bb.x > p.x - bb.width) {\n                        el_move.call(targ, e, targ.track);\n                    }\n                });\n                e.stopPropagation();\n                e.preventDefault();\n                return false;\n            };\n            if (touch_enabled) {\n                dragfn = single_touch_event(dragfn);\n            }\n\n            var enddrag = function enddrag(e) {\n                if (e.relatedTarget && (e.relatedTarget == lbl_grp || e.relatedTarget.nearestViewportElement == lbl_grp.nearestViewportElement || e.relatedTarget.nearestViewportElement == target)) {\n                    if (in_drag && targets.indexOf(e.relatedTarget) >= 0) {\n                        resetDrag();\n                    }\n                    return;\n                }\n\n                if (in_drag && (e.type == 'mouseup' || e.type == 'touchend')) {\n                    if (spliceBefore || spliceAfter) {\n                        spliceFunction(trackToSplice, spliceBefore, spliceAfter);\n                    }\n                }\n                target.removeEventListener('touchmove', dragfn, false);\n                target.removeEventListener('mousemove', dragfn, false);\n                target.removeEventListener('touchend', enddrag, false);\n                target.removeEventListener('mouseup', enddrag, false);\n                target.removeEventListener('mouseout', enddrag, false);\n                if (in_drag) {\n                    lbl_grp.setAttributeNS(null, 'pointer-events', 'all');\n                    lbl_grp.removeAttribute('transform');\n                    resetDrag();\n                    in_drag = false;\n                    last_target = null;\n                }\n            };\n            lbl_grp.setAttributeNS(null, 'pointer-events', 'none');\n            lbl_grp.addEventListener('touchmove', dragfn, false);\n            lbl_grp.addEventListener('touchend', enddrag, false);\n            target.addEventListener('mousemove', dragfn, false);\n            target.addEventListener('mouseup', enddrag, false);\n            target.addEventListener('mouseout', enddrag, false);\n\n            in_drag = track;\n            drag_el = lbl_grp;\n        };\n\n        var handle_start = function handle_start(e) {\n            beginDragging(e, track, element);\n        };\n\n        var el_move = function el_move(e, trk) {\n            var trck = trk ? trk : track;\n            var elem = this ? this : element;\n\n            if (in_drag && in_drag != trck && trck != last_target) {\n                last_target = trck;\n                if (timeouts.hover) {\n                    window.clearTimeout(timeouts.hover);\n                }\n                timeouts.hover = window.setTimeout(function () {\n                    if ((in_drag.group || trck.group) && (in_drag.group ? trck.group : !trck.group)) {\n                        if (in_drag.group.name != trck.group.name) {\n                            return;\n                        }\n                    } else {\n                        if (in_drag.group || trck.group) {\n                            return;\n                        }\n                    }\n\n                    if (timeouts.anim) {\n                        window.clearInterval(timeouts.anim);\n                        timeouts.anim = null;\n                    }\n\n                    resetDrag();\n\n                    var current_sibling = elem;\n\n                    var elements_to_shift = [];\n\n                    while (current_sibling !== null) {\n                        if (current_sibling != drag_el && targets.indexOf(current_sibling) >= 0) {\n                            elements_to_shift.push(current_sibling);\n                        }\n                        current_sibling = current_sibling.nextSibling;\n                        if (current_sibling == drag_el) {\n                            break;\n                        }\n                    }\n\n                    current_sibling = elem.previousSibling;\n\n                    var elements_to_shift_up = [];\n\n                    while (current_sibling !== null) {\n                        if (current_sibling != drag_el && targets.indexOf(current_sibling) >= 0) {\n                            elements_to_shift_up.push(current_sibling);\n                        }\n                        current_sibling = current_sibling.previousSibling;\n                        if (current_sibling == drag_el) {\n                            break;\n                        }\n                    }\n                    var anim_steps = 1;\n                    var height = drag_el.getBBox().height / 4;\n                    timeouts.anim = window.setInterval(function () {\n                        var curr_transform,\n                            i = 0;\n\n                        if (anim_steps < 5) {\n                            for (i = 0; i < elements_to_shift.length; i++) {\n                                curr_transform = elements_to_shift[i].getAttribute('transform') || '';\n                                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                                curr_transform += ' translate(0,' + anim_steps * height + ')';\n                                elements_to_shift[i].setAttribute('transform', curr_transform);\n                            }\n\n                            for (i = 0; elements_to_shift.length > 0 && i < elements_to_shift_up.length; i++) {\n\n                                curr_transform = elements_to_shift_up[i].getAttribute('transform') || '';\n                                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                                curr_transform += ' translate(0,' + anim_steps * -1 * height + ')';\n                                elements_to_shift_up[i].setAttribute('transform', curr_transform);\n                            }\n\n                            anim_steps += 1;\n                        } else {\n                            spliceBefore = trck;\n                            trackToSplice = in_drag;\n                            window.clearInterval(timeouts.anim);\n                            timeouts.anim = null;\n                        }\n                    }, 30);\n                }, 300);\n            }\n        };\n\n        handle.addEventListener('mousedown', handle_start, false);\n        handle.addEventListener('touchstart', single_touch_event(handle_start), false);\n    };\n\n    var drag_disabled = function drag_disabled() {\n        return drag_func.disabled;\n    };\n\n    drag_func.spliceFunction = spliceFunction;\n\n    return drag_func;\n};\n\nvar setElementTransform = function setElementTransform(el, transform) {\n    var ua = window.navigator.userAgent;\n    if (ua.indexOf('Edge/') >= 0) {\n        transform = transform.replace(/px/g, '');\n        el.setAttribute('transform', transform);\n    } else {\n        el.style.transform = transform;\n    }\n};\n\nvar buildNavPane = function buildNavPane(back_canvas) {\n    var self = this;\n    self.zoom = 1;\n    self.nav_width_base = 200;\n    var nav_width = self.nav_width_base;\n    self.nav_width = self.nav_width_base;\n    var panel_back = back_canvas.group();\n    var button_group = back_canvas.group();\n\n    var rect = back_canvas.rect(-10, 0, nav_width.toString(), '100%');\n    var base_rounded_corner = [12 * touch_scale, 10 * touch_scale];\n    rect.setAttribute('rx', base_rounded_corner[0].toString());\n    rect.setAttribute('ry', base_rounded_corner[1].toString());\n    if (!touch_enabled) {\n        rect.setAttribute('opacity', '0.8');\n    }\n    rect.style.stroke = '#000000';\n    rect.style.strokeWidth = '2px';\n    rect.style.fill = '#000000';\n    rect.id = 'nav_back';\n\n    panel_back.push(rect);\n\n    self.clipping_id = 'nav_clipping' + new Date().getTime();\n    var clipping = document.createElementNS(svgns, 'clipPath');\n    clipping.id = self.clipping_id;\n    var rect2 = rect.cloneNode();\n    rect2.removeAttribute('id');\n    rect2.removeAttribute('opacity');\n    rect2.setAttribute('x', '0');\n    rect2.setAttribute('width', \"\" + (parseInt(rect2.getAttribute('width')) - 10));\n    rect2.removeAttribute('style');\n    rect2.setAttribute('height', '10000');\n\n    back_canvas.insertBefore(clipping, back_canvas.firstChild);\n    clipping.appendChild(rect2);\n\n    var close_group = back_canvas.crossed_circle(nav_width - (10 + touch_scale * 11), 12 * touch_scale, 10 * touch_scale);\n\n    close_group.style.cursor = 'pointer';\n    if (typeof matchMedia !== 'undefined') {\n        (this.win() || window).matchMedia('print').addListener(function (match) {\n            if (match.matches) {\n                close_group.setAttribute('display', 'none');\n                tracks_button.setAttribute('display', 'none');\n            } else {\n                close_group.setAttribute('display', 'block');\n                tracks_button.setAttribute('display', 'none');\n            }\n        });\n    }\n\n    button_group.push(close_group);\n\n    var tracks_button = __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].IE ? back_canvas.svgbutton(10, 5, 65, 25, 'Edit') : back_canvas.button(10, 5, 65, 25, 'Edit');\n    tracks_button.id = 'controls';\n    tracks_button.parentNode.setAttribute('clip-path', 'url(#' + self.clipping_id + ')');\n\n    panel_back.push(__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].IE ? tracks_button : tracks_button.parentNode);\n\n    tracks_button.addEventListener('click', function () {\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(self, 'toggleEdit');\n        __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(self, 'click');\n    }, false);\n\n    panel_back.setAttribute('style', 'transition: all 0.25s;');\n\n    var old_tracks_style = tracks_button.getAttribute('style');\n    var transform_origin = \"\" + (nav_width - (10 + touch_scale * 11)) + \"px \" + 12 * touch_scale + \"px\";\n    var translate = function translate(amount, rotate) {\n        var trans = \" translate3d(\" + amount + \"px,0px,0px)\";\n        if (rotate) {\n            trans = trans + \" rotate(\" + rotate + \")\";\n        }\n        return \"-webkit-transform:\" + trans + \"; -moz-transform:\" + trans + \"; -ms-transform:\" + trans.replace('3d', '').replace(',0px)', ')') + \"; transform: \" + trans + \";\";\n    };\n\n    tracks_button.setAttribute('style', old_tracks_style + \" transition: all 0.25s;\");\n    close_group.style.transition = 'all 0.25s';\n    close_group.style.transformOrigin = transform_origin;\n    var visible = true;\n\n    var toggler = function toggler(vis, interactive) {\n        visible = vis === false || vis === true ? vis : !visible;\n        var close_transform;\n        var needs_transition = interactive ? \"all ease-in-out 0.4s\" : \"\";\n        let parent_transform = back_canvas.parentNode.style.transform;\n        let scaleval;\n        let yscale = touch_scale;\n        if (scaleval = parent_transform.match(/scale\\(([\\d\\.]+)\\)/)) {\n            yscale = 1;\n        }\n        var transform_origin = \"\" + (self.nav_width_base - (10 + touch_scale * 11)) + \"px \" + 12 * yscale + \"px\";\n\n        if (visible) {\n            self.promote();\n            setElementTransform(panel_back, 'translate(0,0)');\n            panel_back.style.transition = needs_transition;\n\n            close_group._button.removeAttribute('filter');\n            if (\"ontouchend\" in window || window.getComputedStyle(close_group).getPropertyValue(\"-ms-transform\")) {\n                setElementTransform(close_group, '');\n            }\n            setElementTransform(close_group, 'translate(0,0)');\n            close_group.style.transition = needs_transition;\n            close_group.style.transformOrigin = close_group.getBoundingClientRect().left + 'px ' + close_group.getBoundingClientRect().top + ' px';\n            self.refresh();\n        } else {\n            self.demote();\n            // Chrome bug Jan 2015 with the drop shadow\n            //close_group._button.setAttribute('filter','url(#drop_shadow)');\n            close_group.style.transition = needs_transition;\n            close_group.style.transition = needs_transition;\n            // close_group.style.transformOrigin = transform_origin;\n            close_group.style.transformOrigin = close_group.getBoundingClientRect().left + 'px ' + close_group.getBoundingClientRect().top + ' px';\n\n            setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(405deg)');\n            if (\"ontouchend\" in window) {\n                // No longer special casing IE\n                setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(45,' + (self.nav_width_base - (10 + touch_scale * 11)) + 'px,' + 12 * touch_scale + 'px)');\n                setElementTransform(panel_back, 'translate(' + -1 * self.nav_width * self.zoom + 'px,0)');\n                panel_back.style.transition = needs_transition;\n            } else {\n                setElementTransform(panel_back, 'translate(' + -1 * self.nav_width * self.zoom + 'px,0)');\n                panel_back.style.transition = needs_transition;\n            }\n        }\n        return true;\n    };\n\n    self.move_closer = function () {\n        if (visible) {\n            return;\n        }\n        setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(405deg)');\n        if (\"ontouchend\" in window) {\n            // No longer special casing IE\n            setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(45,' + (self.nav_width_base - (10 + touch_scale * 11)) + 'px,' + 12 * touch_scale + 'px)');\n        }\n    };\n\n    self.hide = function (interactive) {\n        toggler.call(this, false, interactive);\n    };\n    self.show = function (interactive) {\n        toggler.call(this, true, interactive);\n    };\n\n    self.visible = function () {\n        return visible;\n    };\n\n    self.setZoom = function (zoom) {\n        self.nav_width = self.nav_width_base / zoom;\n        close_group.setAttribute('transform', 'scale(' + zoom + ',' + zoom + ') ');\n        let parent_transform = back_canvas.parentNode.style.transform;\n        let scaleval;\n        let yscale = touch_scale;\n        if (scaleval = parent_transform.match(/scale\\(([\\d\\.]+)\\)/)) {\n            yscale = 1;\n        }\n        var transform_origin = \"\" + (self.nav_width_base - (10 + touch_scale * 11)).toFixed(2) + \"px \" + 12 * yscale + \"px\";\n\n        close_group.style.transformOrigin = transform_origin;\n\n        close_group.move(self.nav_width_base - (10 + touch_scale * 11), 12 * touch_scale);\n        rect.setAttribute('transform', 'scale(' + zoom + ',1) ');\n        rect.setAttribute('ry', base_rounded_corner[1].toString());\n        rect.setAttribute('rx', (base_rounded_corner[0] / zoom).toString());\n        rect.setAttribute('x', parseInt(-10 / zoom).toString());\n        rect.setAttribute('width', self.nav_width.toString());\n        self.zoom = zoom;\n        toggler.call(this, visible);\n        self.refresh();\n    };\n\n    close_group.addEventListener('click', function () {\n        if (visible) {\n            self.hide(true);\n        } else {\n            self.show(true);\n        }\n    }, false);\n};\n\nvar buildTrackPane = function buildTrackPane(track_canvas, draganddrop) {\n    var self = this;\n\n    var close_buttons, controller_buttons, edit_enabled;\n\n    var nav_width_track_canvas_ctm = 0;\n\n    Object(__WEBPACK_IMPORTED_MODULE_0__SVGCanvas__[\"a\" /* default */])(track_canvas);\n    track_canvas.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n\n    var track_rects = [];\n\n    self.reset = function () {\n        while (track_canvas.firstChild) {\n            track_canvas.removeChild(track_canvas.firstChild);\n        }\n        track_rects = [];\n        ctm_refresh = [];\n        //            self.refresh();\n    };\n\n    var ctm_refresh = [];\n\n    self.isEditing = function () {\n        return edit_enabled;\n    };\n\n    self.refresh = function () {\n        (close_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'visible' : 'hidden');\n        });\n        (controller_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'hidden' : 'visible');\n        });\n        if (edit_enabled) {\n            toggleMouseEvents.call(this, true);\n        } else {\n            toggleMouseEvents.call(this, false);\n        }\n\n        if (track_canvas.getAttribute('display') == 'none' || track_canvas.style.display == 'none') {\n            return;\n        }\n        if (ctm_refresh.length < 1) {\n            return;\n        }\n        var nav_back = track_canvas.ownerSVGElement.getElementById('nav_back');\n\n        var ctm = nav_back.getScreenCTM().inverse().multiply(track_canvas.getScreenCTM()).inverse();\n        var back_width = nav_back.getBBox().width + nav_back.getBBox().x;\n        var point = track_canvas.createSVGPoint();\n        point.x = back_width;\n        point.y = 0;\n        nav_width_track_canvas_ctm = point.matrixTransform(ctm).x;\n        ctm_refresh.forEach(function (el) {\n            var width = 0;\n            try {\n                width = el.getBBox().width;\n            } catch (err) {\n                // This is a bug with Firefox on some elements getting\n                // the bounding box. We silently fail here, as I can't\n                // figure out why the call to getBBox fails.\n            }\n            if (width > 0) {\n                var a_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(el.getAttribute('transform') || '');\n                if (typeof a_y != 'undefined') {\n                    a_y = a_y[2];\n                } else {\n                    return;\n                }\n\n                var new_x = nav_width_track_canvas_ctm - 1.5 * parseInt(el.getAttribute('width'), 10);\n                el.setAttribute('transform', 'translate(' + new_x + ',' + a_y + ')');\n            }\n        });\n    };\n\n    var toggleMouseEvents = function toggleMouseEvents(on) {\n        if (track_rects) {\n            (track_rects || []).forEach(function (el) {\n                el.setAttribute('opacity', on ? '1' : touch_enabled ? \"0.5\" : \"0.1\");\n                el.setAttribute('pointer-events', on ? 'all' : 'none');\n                on ? el.parentNode.setAttribute('dragenabled', 'true') : el.parentNode.removeAttribute('dragenabled');\n            });\n        }\n    };\n\n    __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].add(self, 'toggleEdit', function () {\n        edit_enabled = typeof edit_enabled == 'undefined' ? true : !edit_enabled;\n        draganddrop.disabled = !edit_enabled;\n        toggleMouseEvents.call(self, edit_enabled);\n\n        self.hide();\n        self.show();\n\n        (close_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'visible' : 'hidden');\n        });\n        (controller_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'hidden' : 'visible');\n        });\n    });\n\n    this.setViewBox = function (viewBox) {\n        track_canvas.setAttribute('viewBox', viewBox);\n    };\n\n    track_canvas.style.height = '100%';\n    track_canvas.style.width = '100%';\n    track_canvas.setAttribute('height', '100%');\n    track_canvas.setAttribute('width', '100%');\n\n    this.renderTrack = function (track, y, height, options) {\n        var label_group = track_canvas.group();\n        var a_rect = track_canvas.rect(0, y, '100%', height);\n        a_rect.setAttribute('stroke', '#000000');\n        a_rect.setAttribute('stroke-width', '2');\n        a_rect.setAttribute('fill', 'url(#simple_gradient)');\n        a_rect.setAttribute('opacity', touch_enabled ? '0.5' : '0.1');\n        a_rect.setAttribute('pointer-events', 'none');\n        track_rects = track_rects || [];\n\n        track_rects.push(a_rect);\n\n        label_group.push(a_rect);\n\n        // Use these for debugging positioning\n\n        // var r = track_canvas.rect(0,y-height,height,height);\n        // r.setAttribute('fill','#ff0000');\n        // label_group.push(r);\n        // \n        // r = track_canvas.rect(0,y+height,height,height);\n        // r.setAttribute('fill','#ff0000');\n        // label_group.push(r);\n\n\n        var text_scale = options && options['font-scale'] ? options['font-scale'] : 1;\n        var text_left = 4 / 3 * touch_scale * height * text_scale;\n        var a_text = track_canvas.text(text_left, y + 0.5 * height, track.fullname || track.name);\n        a_text.setAttribute('height', height);\n        a_text.setAttribute('width', height);\n        a_text.setAttribute('font-size', 0.6 * height * text_scale);\n        a_text.setAttribute('fill', '#ffffff');\n        a_text.setAttribute('stroke', '#ffffff');\n        a_text.setAttribute('stroke-width', '0');\n        a_text.firstChild.setAttribute('dy', '0.5ex');\n\n        // r = track_canvas.rect(3*height*text_scale,y+0.5*height,2*height,2*height);\n        // r.setAttribute('fill','#00ff00');\n        // label_group.push(r);\n\n        label_group.push(a_text);\n\n        a_text.setAttribute('pointer-events', 'none');\n\n        var circ;\n\n        if (track.href) {\n            a_anchor = track_canvas.a(track.href);\n            var icon_name = null;\n            var icon_metrics = [0.5 * height * text_scale, 0, height * text_scale * touch_scale];\n            icon_metrics[1] = -0.5 * (icon_metrics[2] - height);\n\n            circ = track_canvas.circle(icon_metrics[0] + 0.5 * icon_metrics[2], 0.5 * height, 0.5 * icon_metrics[2]);\n            circ.setAttribute('fill', '#ffffff');\n            circ.setAttribute('opacity', '0.1');\n            a_anchor.appendChild(circ);\n\n            var url_type = track.href;\n            if (typeof url_type === 'string' && url_type.match(/^javascript\\:/)) {\n                icon_name = '#plus_icon';\n            } else if (typeof url_type === 'function') {\n                icon_name = '#plus_icon';\n                a_anchor.setAttribute('href', '#');\n                a_anchor.removeAttribute('target');\n                a_anchor.addEventListener('click', function (e) {\n                    url_type.call();\n\n                    if (e.preventDefault) {\n                        e.preventDefault();\n                    } else {\n                        e.returnResult = false;\n                    }\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                    } else {\n                        e.cancelBubble = true;\n                    }\n\n                    return false;\n                }, false);\n            } else {\n                icon_name = '#new_link_icon';\n            }\n            if (track.icon) {\n                icon_name = track.icon;\n            }\n            var a_use = track_canvas.use(icon_name, icon_metrics[0], icon_metrics[1], icon_metrics[2], icon_metrics[2]);\n            a_use.style.cursor = 'pointer';\n            a_anchor.appendChild(a_use);\n            a_anchor.setAttribute('transform', 'translate(' + (nav_width_track_canvas_ctm - 1.5 * icon_metrics[2]) + ',' + y + ')');\n            a_anchor.setAttribute('width', icon_metrics[2].toString());\n            ctm_refresh.push(a_anchor);\n        }\n\n        label_group.addEventListener('touchstart', function () {\n            label_group.onmouseover = undefined;\n            label_group.onmouseout = undefined;\n        }, false);\n\n        label_group.addEventListener('touchend', function () {\n            label_group.onmouseover = undefined;\n            label_group.onmouseout = undefined;\n        }, false);\n\n        draganddrop.call(this, a_rect, label_group, track, track_canvas);\n\n        (function () {\n\n            if (track.group) {\n                return;\n            }\n\n            var t_height = 0.5 * height * touch_scale;\n\n            if (!close_buttons) {\n                close_buttons = [];\n            }\n\n            var closer = track_canvas.crossed_circle(1.5 * t_height, 0, t_height);\n            closer.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n            closer.firstChild.setAttribute('fill', 'url(#red_3d)');\n            for (var nodes = closer.childNodes, i = 0, len = nodes.length; i < len; i++) {\n                nodes[i].setAttribute('stroke-width', (t_height / 4).toString());\n            }\n            closer.addEventListener('click', function () {\n                draganddrop.spliceFunction(track);\n            }, false);\n            label_group.push(closer);\n            close_buttons.push(closer);\n            closer.setAttribute('visibility', 'hidden');\n        })();\n        if (this.isController(track)) {\n            if (!controller_buttons) {\n                controller_buttons = [];\n            }\n\n            var t_height = 0.5 * height * touch_scale;\n            var expander = track_canvas.group();\n            circ = track_canvas.circle(1.5 * t_height, 0, t_height);\n            circ.setAttribute('fill', '#ffffff');\n            circ.setAttribute('opacity', '0.1');\n            expander.push(circ);\n\n            var t_metrics = [1.1 * t_height, -1.25 * t_height, 2.25 * t_height, -0.5 * t_height, 1.1 * t_height, 0.25 * t_height];\n\n            t_metrics[1] += 0.5 * (t_height - 0 * height);\n            t_metrics[3] += 0.5 * (t_height - 0 * height);\n            t_metrics[5] += 0.5 * (t_height - 0 * height);\n\n            var group_toggler = track_canvas.poly('' + t_metrics[0] + ',' + t_metrics[1] + ' ' + t_metrics[2] + ',' + t_metrics[3] + ' ' + t_metrics[4] + ',' + t_metrics[5]);\n            if (this.isControllerExpanded(track)) {\n                expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ') rotate(90,' + 1.5 * t_height + ',' + t_metrics[3] + ')');\n            } else {\n                expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n            }\n            group_toggler.setAttribute('height', 1.75 * t_height);\n            group_toggler.setAttribute('font-size', 1.5 * t_height);\n            group_toggler.setAttribute('fill', '#ffffff');\n            group_toggler.setAttribute('pointer-events', 'none');\n\n            expander.push(group_toggler);\n\n            expander.style.cursor = 'pointer';\n            expander.addEventListener('click', function (e) {\n                e.stopPropagation();\n                __WEBPACK_IMPORTED_MODULE_1__bean__[\"a\" /* default */].fire(track, '_expandevent');\n                if (self.isControllerExpanded(track)) {\n                    expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ') rotate(90,' + 1.5 * t_height + ',' + t_metrics[3] + ')');\n                } else {\n                    expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n                }\n            }, false);\n            label_group.push(expander);\n\n            controller_buttons.push(expander);\n            expander.setAttribute('visibility', 'hidden');\n        }\n    };\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Navigation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/*!*****************************!*\
  !*** ../gator/js/hammer.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {/*! Hammer.JS - v1.0.7dev - 2014-01-15\n * http://eightmedia.github.com/hammer.js\n *\n * Copyright (c) 2014 Jorik Tangelder <j.tangelder@gmail.com>;\n * Licensed under the MIT license */\n\nconst Hammer = function (window, undefined) {\n  'use strict';\n\n  /**\n   * Hammer\n   * use this to create instances\n   * @param   {HTMLElement}   element\n   * @param   {Object}        options\n   * @returns {Hammer.Instance}\n   * @constructor\n   */\n\n  var Hammer = function Hammer(element, options) {\n    return new Hammer.Instance(element, options || {});\n  };\n\n  // default settings\n  Hammer.defaults = {\n    // add styles and attributes to the element to prevent the browser from doing\n    // its native behavior. this doesnt prevent the scrolling, but cancels\n    // the contextmenu, tap highlighting etc\n    // set to false to disable this\n    stop_browser_behavior: {\n      // this also triggers onselectstart=false for IE\n      userSelect: 'none',\n      // this makes the element blocking in IE10 >, you could experiment with the value\n      // see for more options this issue; https://github.com/EightMedia/hammer.js/issues/241\n      touchAction: 'none',\n      touchCallout: 'none',\n      contentZooming: 'none',\n      userDrag: 'none',\n      tapHighlightColor: 'rgba(0,0,0,0)'\n\n      //\n      // more settings are defined per gesture at gestures.js\n      //\n    } };\n\n  // detect touchevents\n  Hammer.HAS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;\n  Hammer.HAS_TOUCHEVENTS = 'ontouchstart' in window;\n\n  // dont use mouseevents on mobile devices\n  Hammer.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;\n  Hammer.NO_MOUSEEVENTS = Hammer.HAS_TOUCHEVENTS && window.navigator.userAgent.match(Hammer.MOBILE_REGEX);\n\n  // eventtypes per touchevent (start, move, end)\n  // are filled by Hammer.event.determineEventTypes on setup\n  Hammer.EVENT_TYPES = {};\n\n  // direction defines\n  Hammer.DIRECTION_DOWN = 'down';\n  Hammer.DIRECTION_LEFT = 'left';\n  Hammer.DIRECTION_UP = 'up';\n  Hammer.DIRECTION_RIGHT = 'right';\n\n  // pointer type\n  Hammer.POINTER_MOUSE = 'mouse';\n  Hammer.POINTER_TOUCH = 'touch';\n  Hammer.POINTER_PEN = 'pen';\n\n  // touch event defines\n  Hammer.EVENT_START = 'start';\n  Hammer.EVENT_MOVE = 'move';\n  Hammer.EVENT_END = 'end';\n\n  // hammer document where the base events are added at\n  Hammer.DOCUMENT = window.document;\n\n  // plugins and gestures namespaces\n  Hammer.plugins = Hammer.plugins || {};\n  Hammer.gestures = Hammer.gestures || {};\n\n  // if the window events are set...\n  Hammer.READY = false;\n\n  /**\n   * setup events to detect gestures on the document\n   */\n  function setup() {\n    if (Hammer.READY) {\n      return;\n    }\n\n    // find what eventtypes we add listeners to\n    Hammer.event.determineEventTypes();\n\n    // Register all gestures inside Hammer.gestures\n    Hammer.utils.each(Hammer.gestures, function (gesture) {\n      Hammer.detection.register(gesture);\n    });\n\n    // Add touch events on the document\n    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_MOVE, Hammer.detection.detect);\n    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_END, Hammer.detection.detect);\n\n    // Hammer is ready...!\n    Hammer.READY = true;\n  }\n\n  Hammer.utils = {\n    /**\n     * extend method,\n     * also used for cloning when dest is an empty object\n     * @param   {Object}    dest\n     * @param   {Object}    src\n     * @parm  {Boolean}  merge    do a merge\n     * @returns {Object}    dest\n     */\n    extend: function extend(dest, src, merge) {\n      for (var key in src) {\n        if (dest[key] !== undefined && merge) {\n          continue;\n        }\n        dest[key] = src[key];\n      }\n      return dest;\n    },\n\n    /**\n     * for each\n     * @param obj\n     * @param iterator\n     */\n    each: function each(obj, iterator, context) {\n      var i, length;\n      // native forEach on arrays\n      if ('forEach' in obj) {\n        obj.forEach(iterator, context);\n      }\n      // arrays\n      else if (obj.length !== undefined) {\n          for (i = 0, length = obj.length; i < length; i++) {\n            if (iterator.call(context, obj[i], i, obj) === false) {\n              return;\n            }\n          }\n        }\n        // objects\n        else {\n            for (i in obj) {\n              if (obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj) === false) {\n                return;\n              }\n            }\n          }\n    },\n\n    /**\n     * find if a node is in the given parent\n     * used for event delegation tricks\n     * @param   {HTMLElement}   node\n     * @param   {HTMLElement}   parent\n     * @returns {boolean}       has_parent\n     */\n    hasParent: function hasParent(node, parent) {\n      while (node) {\n        if (node == parent) {\n          return true;\n        }\n        node = node.parentNode;\n      }\n      return false;\n    },\n\n    /**\n     * get the center of all the touches\n     * @param   {Array}     touches\n     * @returns {Object}    center\n     */\n    getCenter: function getCenter(touches) {\n      var valuesX = [],\n          valuesY = [];\n\n      Hammer.utils.each(touches, function (touch) {\n        // I prefer clientX because it ignore the scrolling position\n        valuesX.push(typeof touch.clientX !== 'undefined' ? touch.clientX : touch.pageX);\n        valuesY.push(typeof touch.clientY !== 'undefined' ? touch.clientY : touch.pageY);\n      });\n\n      return {\n        pageX: (Math.min.apply(Math, valuesX) + Math.max.apply(Math, valuesX)) / 2,\n        pageY: (Math.min.apply(Math, valuesY) + Math.max.apply(Math, valuesY)) / 2\n      };\n    },\n\n    /**\n     * calculate the velocity between two points\n     * @param   {Number}    delta_time\n     * @param   {Number}    delta_x\n     * @param   {Number}    delta_y\n     * @returns {Object}    velocity\n     */\n    getVelocity: function getVelocity(delta_time, delta_x, delta_y) {\n      return {\n        x: Math.abs(delta_x / delta_time) || 0,\n        y: Math.abs(delta_y / delta_time) || 0\n      };\n    },\n\n    /**\n     * calculate the angle between two coordinates\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {Number}    angle\n     */\n    getAngle: function getAngle(touch1, touch2) {\n      var y = touch2.pageY - touch1.pageY,\n          x = touch2.pageX - touch1.pageX;\n      return Math.atan2(y, x) * 180 / Math.PI;\n    },\n\n    /**\n     * angle to direction define\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {String}    direction constant, like Hammer.DIRECTION_LEFT\n     */\n    getDirection: function getDirection(touch1, touch2) {\n      var x = Math.abs(touch1.pageX - touch2.pageX),\n          y = Math.abs(touch1.pageY - touch2.pageY);\n\n      if (x >= y) {\n        return touch1.pageX - touch2.pageX > 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;\n      } else {\n        return touch1.pageY - touch2.pageY > 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;\n      }\n    },\n\n    /**\n     * calculate the distance between two touches\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {Number}    distance\n     */\n    getDistance: function getDistance(touch1, touch2) {\n      var x = touch2.pageX - touch1.pageX,\n          y = touch2.pageY - touch1.pageY;\n      return Math.sqrt(x * x + y * y);\n    },\n\n    /**\n     * calculate the scale factor between two touchLists (fingers)\n     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n     * @param   {Array}     start\n     * @param   {Array}     end\n     * @returns {Number}    scale\n     */\n    getScale: function getScale(start, end) {\n      // need two fingers...\n      if (start.length >= 2 && end.length >= 2) {\n        return this.getDistance(end[0], end[1]) / this.getDistance(start[0], start[1]);\n      }\n      return 1;\n    },\n\n    /**\n     * calculate the rotation degrees between two touchLists (fingers)\n     * @param   {Array}     start\n     * @param   {Array}     end\n     * @returns {Number}    rotation\n     */\n    getRotation: function getRotation(start, end) {\n      // need two fingers\n      if (start.length >= 2 && end.length >= 2) {\n        return this.getAngle(end[1], end[0]) - this.getAngle(start[1], start[0]);\n      }\n      return 0;\n    },\n\n    /**\n     * boolean if the direction is vertical\n     * @param    {String}    direction\n     * @returns  {Boolean}   is_vertical\n     */\n    isVertical: function isVertical(direction) {\n      return direction == Hammer.DIRECTION_UP || direction == Hammer.DIRECTION_DOWN;\n    },\n\n    /**\n     * stop browser default behavior with css props\n     * @param   {HtmlElement}   element\n     * @param   {Object}        css_props\n     */\n    stopDefaultBrowserBehavior: function stopDefaultBrowserBehavior(element, css_props) {\n      if (!css_props || !element || !element.style) {\n        return;\n      }\n\n      // with css properties for modern browsers\n      Hammer.utils.each(['webkit', 'khtml', 'moz', 'Moz', 'ms', 'o', ''], function (vendor) {\n        Hammer.utils.each(css_props, function (value, prop) {\n          // vender prefix at the property\n          if (vendor) {\n            prop = vendor + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n          }\n          // set the style\n          if (prop in element.style) {\n            element.style[prop] = value;\n          }\n        });\n      });\n\n      // also the disable onselectstart\n      if (css_props.userSelect == 'none') {\n        element.onselectstart = function () {\n          return false;\n        };\n      }\n\n      // and disable ondragstart\n      if (css_props.userDrag == 'none') {\n        element.ondragstart = function () {\n          return false;\n        };\n      }\n    }\n  };\n\n  /**\n   * create new hammer instance\n   * all methods should return the instance itself, so it is chainable.\n   * @param   {HTMLElement}       element\n   * @param   {Object}            [options={}]\n   * @returns {Hammer.Instance}\n   * @constructor\n   */\n  Hammer.Instance = function (element, options) {\n    var self = this;\n\n    // setup HammerJS window events and register all gestures\n    // this also sets up the default options\n    setup();\n\n    this.element = element;\n\n    // start/stop detection option\n    this.enabled = true;\n\n    // merge options\n    this.options = Hammer.utils.extend(Hammer.utils.extend({}, Hammer.defaults), options || {});\n\n    // add some css to the element to prevent the browser from doing its native behavoir\n    if (this.options.stop_browser_behavior) {\n      Hammer.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);\n    }\n\n    // start detection on touchstart\n    Hammer.event.onTouch(element, Hammer.EVENT_START, function (ev) {\n      if (self.enabled) {\n        Hammer.detection.startDetect(self, ev);\n      }\n    });\n\n    // return instance\n    return this;\n  };\n\n  Hammer.Instance.prototype = {\n    /**\n     * bind events to the instance\n     * @param   {String}      gesture\n     * @param   {Function}    handler\n     * @returns {Hammer.Instance}\n     */\n    on: function onEvent(gesture, handler) {\n      var gestures = gesture.split(' ');\n      Hammer.utils.each(gestures, function (gesture) {\n        this.element.addEventListener(gesture, handler, false);\n      }, this);\n      return this;\n    },\n\n    /**\n     * unbind events to the instance\n     * @param   {String}      gesture\n     * @param   {Function}    handler\n     * @returns {Hammer.Instance}\n     */\n    off: function offEvent(gesture, handler) {\n      var gestures = gesture.split(' ');\n      Hammer.utils.each(gestures, function (gesture) {\n        this.element.removeEventListener(gesture, handler, false);\n      }, this);\n      return this;\n    },\n\n    /**\n     * trigger gesture event\n     * @param   {String}      gesture\n     * @param   {Object}      [eventData]\n     * @returns {Hammer.Instance}\n     */\n    trigger: function triggerEvent(gesture, eventData) {\n      // optional\n      if (!eventData) {\n        eventData = {};\n      }\n\n      // create DOM event\n      var event = Hammer.DOCUMENT.createEvent('Event');\n      event.initEvent(gesture, true, true);\n      event.gesture = eventData;\n\n      // trigger on the target if it is in the instance element,\n      // this is for event delegation tricks\n      var element = this.element;\n      if (Hammer.utils.hasParent(eventData.target, element)) {\n        element = eventData.target;\n      }\n\n      element.dispatchEvent(event);\n      return this;\n    },\n\n    /**\n     * enable of disable hammer.js detection\n     * @param   {Boolean}   state\n     * @returns {Hammer.Instance}\n     */\n    enable: function enable(state) {\n      this.enabled = state;\n      return this;\n    }\n  };\n\n  /**\n   * this holds the last move event,\n   * used to fix empty touchend issue\n   * see the onTouch event for an explanation\n   * @type {Object}\n   */\n  var last_move_event = null;\n\n  /**\n   * when the mouse is hold down, this is true\n   * @type {Boolean}\n   */\n  var enable_detect = false;\n\n  /**\n   * when touch events have been fired, this is true\n   * @type {Boolean}\n   */\n  var touch_triggered = false;\n\n  Hammer.event = {\n    /**\n     * simple addEventListener\n     * @param   {HTMLElement}   element\n     * @param   {String}        type\n     * @param   {Function}      handler\n     */\n    bindDom: function bindDom(element, type, handler) {\n      var types = type.split(' ');\n      Hammer.utils.each(types, function (type) {\n        element.addEventListener(type, handler, false);\n      });\n    },\n\n    /**\n     * touch events with mouse fallback\n     * @param   {HTMLElement}   element\n     * @param   {String}        eventType        like Hammer.EVENT_MOVE\n     * @param   {Function}      handler\n     */\n    onTouch: function onTouch(element, eventType, handler) {\n      var self = this;\n\n      this.bindDom(element, Hammer.EVENT_TYPES[eventType], function bindDomOnTouch(ev) {\n        var sourceEventType = ev.type.toLowerCase();\n\n        // onmouseup, but when touchend has been fired we do nothing.\n        // this is for touchdevices which also fire a mouseup on touchend\n        if (sourceEventType.match(/mouse/) && touch_triggered) {\n          return;\n        }\n\n        // mousebutton must be down or a touch event\n        else if (sourceEventType.match(/touch/) || // touch events are always on screen\n          sourceEventType.match(/pointerdown/) || // pointerevents touch\n          sourceEventType.match(/mouse/) && ev.which === 1 // mouse is pressed\n          ) {\n              enable_detect = true;\n            }\n\n            // mouse isn't pressed\n          else if (sourceEventType.match(/mouse/) && !ev.which) {\n              enable_detect = false;\n            }\n\n        // we are in a touch event, set the touch triggered bool to true,\n        // this for the conflicts that may occur on ios and android\n        if (sourceEventType.match(/touch|pointer/)) {\n          touch_triggered = true;\n        }\n\n        // count the total touches on the screen\n        var count_touches = 0;\n\n        // when touch has been triggered in this detection session\n        // and we are now handling a mouse event, we stop that to prevent conflicts\n        if (enable_detect) {\n          // update pointerevent\n          if (Hammer.HAS_POINTEREVENTS && eventType != Hammer.EVENT_END) {\n            count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);\n          }\n          // touch\n          else if (sourceEventType.match(/touch/)) {\n              count_touches = ev.touches.length;\n            }\n            // mouse\n            else if (!touch_triggered) {\n                count_touches = sourceEventType.match(/up/) ? 0 : 1;\n              }\n\n          // if we are in a end event, but when we remove one touch and\n          // we still have enough, set eventType to move\n          if (count_touches > 0 && eventType == Hammer.EVENT_END) {\n            eventType = Hammer.EVENT_MOVE;\n          }\n          // no touches, force the end event\n          else if (!count_touches) {\n              eventType = Hammer.EVENT_END;\n            }\n\n          // store the last move event\n          if (count_touches || last_move_event === null) {\n            last_move_event = ev;\n          }\n\n          // trigger the handler\n          handler.call(Hammer.detection, self.collectEventData(element, eventType, self.getTouchList(last_move_event, eventType), ev));\n\n          // remove pointerevent from list\n          if (Hammer.HAS_POINTEREVENTS && eventType == Hammer.EVENT_END) {\n            count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);\n          }\n        }\n\n        // on the end we reset everything\n        if (!count_touches) {\n          last_move_event = null;\n          enable_detect = false;\n          touch_triggered = false;\n          Hammer.PointerEvent.reset();\n        }\n      }, { passive: true });\n      // FIXME - PASSIVE\n    },\n\n    /**\n     * we have different events for each device/browser\n     * determine what we need and set them in the Hammer.EVENT_TYPES constant\n     */\n    determineEventTypes: function determineEventTypes() {\n      // determine the eventtype we want to set\n      var types;\n\n      // pointerEvents magic\n      if (Hammer.HAS_POINTEREVENTS) {\n        types = Hammer.PointerEvent.getEvents();\n      }\n      // on Android, iOS, blackberry, windows mobile we dont want any mouseevents\n      else if (Hammer.NO_MOUSEEVENTS) {\n          types = ['touchstart', 'touchmove', 'touchend touchcancel'];\n        }\n        // for non pointer events browsers and mixed browsers,\n        // like chrome on windows8 touch laptop\n        else {\n            types = ['touchstart mousedown', 'touchmove mousemove', 'touchend touchcancel mouseup'];\n          }\n\n      Hammer.EVENT_TYPES[Hammer.EVENT_START] = types[0];\n      Hammer.EVENT_TYPES[Hammer.EVENT_MOVE] = types[1];\n      Hammer.EVENT_TYPES[Hammer.EVENT_END] = types[2];\n    },\n\n    /**\n     * create touchlist depending on the event\n     * @param   {Object}    ev\n     * @param   {String}    eventType   used by the fakemultitouch plugin\n     */\n    getTouchList: function getTouchList(ev /*, eventType*/) {\n      // get the fake pointerEvent touchlist\n      if (Hammer.HAS_POINTEREVENTS) {\n        return Hammer.PointerEvent.getTouchList();\n      }\n      // get the touchlist\n      else if (ev.touches) {\n          return ev.touches;\n        }\n        // make fake touchlist from mouse position\n        else {\n            ev.identifier = 1;\n            return [ev];\n          }\n    },\n\n    /**\n     * collect event data for Hammer js\n     * @param   {HTMLElement}   element\n     * @param   {String}        eventType        like Hammer.EVENT_MOVE\n     * @param   {Object}        eventData\n     */\n    collectEventData: function collectEventData(element, eventType, touches, ev) {\n      // find out pointerType\n      var pointerType = Hammer.POINTER_TOUCH;\n      if (ev.type.match(/mouse/) || Hammer.PointerEvent.matchType(Hammer.POINTER_MOUSE, ev)) {\n        pointerType = Hammer.POINTER_MOUSE;\n      }\n\n      return {\n        center: Hammer.utils.getCenter(touches),\n        timeStamp: new Date().getTime(),\n        target: ev.target,\n        touches: touches,\n        eventType: eventType,\n        pointerType: pointerType,\n        srcEvent: ev,\n\n        /**\n         * prevent the browser default actions\n         * mostly used to disable scrolling of the browser\n         */\n        preventDefault: function preventDefault() {\n          if (this.srcEvent.preventManipulation) {\n            this.srcEvent.preventManipulation();\n          }\n\n          if (this.srcEvent.preventDefault) {\n            this.srcEvent.preventDefault();\n          }\n        },\n\n        /**\n         * stop bubbling the event up to its parents\n         */\n        stopPropagation: function stopPropagation() {\n          this.srcEvent.stopPropagation();\n        },\n\n        /**\n         * immediately stop gesture detection\n         * might be useful after a swipe was detected\n         * @return {*}\n         */\n        stopDetect: function stopDetect() {\n          return Hammer.detection.stopDetect();\n        }\n      };\n    }\n  };\n\n  Hammer.PointerEvent = {\n    /**\n     * holds all pointers\n     * @type {Object}\n     */\n    pointers: {},\n\n    /**\n     * get a list of pointers\n     * @returns {Array}     touchlist\n     */\n    getTouchList: function getTouchList() {\n      var self = this;\n      var touchlist = [];\n\n      // we can use forEach since pointerEvents only is in IE10\n      Hammer.utils.each(self.pointers, function (pointer) {\n        touchlist.push(pointer);\n      });\n\n      return touchlist;\n    },\n\n    /**\n     * update the position of a pointer\n     * @param   {String}   type             Hammer.EVENT_END\n     * @param   {Object}   pointerEvent\n     */\n    updatePointer: function updatePointer(type, pointerEvent) {\n      if (type == Hammer.EVENT_END) {\n        this.pointers = {};\n      } else {\n        pointerEvent.identifier = pointerEvent.pointerId;\n        this.pointers[pointerEvent.pointerId] = pointerEvent;\n      }\n\n      return Object.keys(this.pointers).length;\n    },\n\n    /**\n     * check if ev matches pointertype\n     * @param   {String}        pointerType     Hammer.POINTER_MOUSE\n     * @param   {PointerEvent}  ev\n     */\n    matchType: function matchType(pointerType, ev) {\n      if (!ev.pointerType) {\n        return false;\n      }\n\n      var pt = ev.pointerType,\n          types = {};\n      types[Hammer.POINTER_MOUSE] = pt === ev.MSPOINTER_TYPE_MOUSE || pt === Hammer.POINTER_MOUSE;\n      types[Hammer.POINTER_TOUCH] = pt === ev.MSPOINTER_TYPE_TOUCH || pt === Hammer.POINTER_TOUCH;\n      types[Hammer.POINTER_PEN] = pt === ev.MSPOINTER_TYPE_PEN || pt === Hammer.POINTER_PEN;\n      return types[pointerType];\n    },\n\n    /**\n     * get events\n     */\n    getEvents: function getEvents() {\n      return ['pointerdown MSPointerDown', 'pointermove MSPointerMove', 'pointerup pointercancel MSPointerUp MSPointerCancel'];\n    },\n\n    /**\n     * reset the list\n     */\n    reset: function reset() {\n      this.pointers = {};\n    }\n  };\n\n  Hammer.detection = {\n    // contains all registred Hammer.gestures in the correct order\n    gestures: [],\n\n    // data of the current Hammer.gesture detection session\n    current: null,\n\n    // the previous Hammer.gesture session data\n    // is a full clone of the previous gesture.current object\n    previous: null,\n\n    // when this becomes true, no gestures are fired\n    stopped: false,\n\n    /**\n     * start Hammer.gesture detection\n     * @param   {Hammer.Instance}   inst\n     * @param   {Object}            eventData\n     */\n    startDetect: function startDetect(inst, eventData) {\n      // already busy with a Hammer.gesture detection on an element\n      if (this.current) {\n        return;\n      }\n\n      this.stopped = false;\n\n      this.current = {\n        inst: inst, // reference to HammerInstance we're working for\n        startEvent: Hammer.utils.extend({}, eventData), // start eventData for distances, timing etc\n        lastEvent: false, // last eventData\n        name: '' // current gesture we're in/detected, can be 'tap', 'hold' etc\n      };\n\n      this.detect(eventData);\n    },\n\n    /**\n     * Hammer.gesture detection\n     * @param   {Object}    eventData\n     */\n    detect: function detect(eventData) {\n      if (!this.current || this.stopped) {\n        return;\n      }\n\n      // extend event data with calculations about scale, distance etc\n      eventData = this.extendEventData(eventData);\n\n      // instance options\n      var inst_options = this.current.inst.options;\n\n      // call Hammer.gesture handlers\n      Hammer.utils.each(this.gestures, function (gesture) {\n        // only when the instance options have enabled this gesture\n        if (!this.stopped && inst_options[gesture.name] !== false) {\n          // if a handler returns false, we stop with the detection\n          if (gesture.handler.call(gesture, eventData, this.current.inst) === false) {\n            this.stopDetect();\n            return false;\n          }\n        }\n      }, this);\n\n      // store as previous event event\n      if (this.current) {\n        this.current.lastEvent = eventData;\n      }\n\n      // endevent, but not the last touch, so dont stop\n      if (eventData.eventType == Hammer.EVENT_END && !eventData.touches.length - 1) {\n        this.stopDetect();\n      }\n\n      return eventData;\n    },\n\n    /**\n     * clear the Hammer.gesture vars\n     * this is called on endDetect, but can also be used when a final Hammer.gesture has been detected\n     * to stop other Hammer.gestures from being fired\n     */\n    stopDetect: function stopDetect() {\n      // clone current data to the store as the previous gesture\n      // used for the double tap gesture, since this is an other gesture detect session\n      this.previous = Hammer.utils.extend({}, this.current);\n\n      // reset the current\n      this.current = null;\n\n      // stopped!\n      this.stopped = true;\n    },\n\n    /**\n     * extend eventData for Hammer.gestures\n     * @param   {Object}   ev\n     * @returns {Object}   ev\n     */\n    extendEventData: function extendEventData(ev) {\n      var startEv = this.current.startEvent;\n\n      // if the touches change, set the new touches over the startEvent touches\n      // this because touchevents don't have all the touches on touchstart, or the\n      // user must place his fingers at the EXACT same time on the screen, which is not realistic\n      // but, sometimes it happens that both fingers are touching at the EXACT same time\n      if (startEv && (ev.touches.length != startEv.touches.length || ev.touches === startEv.touches)) {\n        // extend 1 level deep to get the touchlist with the touch objects\n        startEv.touches = [];\n        Hammer.utils.each(ev.touches, function (touch) {\n          startEv.touches.push(Hammer.utils.extend({}, touch));\n        });\n      }\n\n      var delta_time = ev.timeStamp - startEv.timeStamp,\n          delta_x = ev.center.pageX - startEv.center.pageX,\n          delta_y = ev.center.pageY - startEv.center.pageY,\n          velocity = Hammer.utils.getVelocity(delta_time, delta_x, delta_y),\n          interimAngle,\n          interimDirection;\n\n      // end events (e.g. dragend) don't have useful values for interimDirection & interimAngle\n      // because the previous event has exactly the same coordinates\n      // so for end events, take the previous values of interimDirection & interimAngle\n      // instead of recalculating them and getting a spurious '0'\n      if (ev.eventType === 'end') {\n        interimAngle = this.current.lastEvent && this.current.lastEvent.interimAngle;\n        interimDirection = this.current.lastEvent && this.current.lastEvent.interimDirection;\n      } else {\n        interimAngle = this.current.lastEvent && Hammer.utils.getAngle(this.current.lastEvent.center, ev.center);\n        interimDirection = this.current.lastEvent && Hammer.utils.getDirection(this.current.lastEvent.center, ev.center);\n      }\n\n      Hammer.utils.extend(ev, {\n        deltaTime: delta_time,\n\n        deltaX: delta_x,\n        deltaY: delta_y,\n\n        velocityX: velocity.x,\n        velocityY: velocity.y,\n\n        distance: Hammer.utils.getDistance(startEv.center, ev.center),\n\n        angle: Hammer.utils.getAngle(startEv.center, ev.center),\n        interimAngle: interimAngle,\n\n        direction: Hammer.utils.getDirection(startEv.center, ev.center),\n        interimDirection: interimDirection,\n\n        scale: Hammer.utils.getScale(startEv.touches, ev.touches),\n        rotation: Hammer.utils.getRotation(startEv.touches, ev.touches),\n\n        startEvent: startEv\n      });\n\n      return ev;\n    },\n\n    /**\n     * register new gesture\n     * @param   {Object}    gesture object, see gestures.js for documentation\n     * @returns {Array}     gestures\n     */\n    register: function register(gesture) {\n      // add an enable gesture options if there is no given\n      var options = gesture.defaults || {};\n      if (options[gesture.name] === undefined) {\n        options[gesture.name] = true;\n      }\n\n      // extend Hammer default options with the Hammer.gesture options\n      Hammer.utils.extend(Hammer.defaults, options, true);\n\n      // set its index\n      gesture.index = gesture.index || 1000;\n\n      // add Hammer.gesture to the list\n      this.gestures.push(gesture);\n\n      // sort the list by index\n      this.gestures.sort(function (a, b) {\n        if (a.index < b.index) {\n          return -1;\n        }\n        if (a.index > b.index) {\n          return 1;\n        }\n        return 0;\n      });\n\n      return this.gestures;\n    }\n  };\n\n  /**\n   * Drag\n   * Move with x fingers (default 1) around on the page. Blocking the scrolling when\n   * moving left and right is a good practice. When all the drag events are blocking\n   * you disable scrolling on that area.\n   * @events  drag, drapleft, dragright, dragup, dragdown\n   */\n  Hammer.gestures.Drag = {\n    name: 'drag',\n    index: 50,\n    defaults: {\n      drag_min_distance: 10,\n\n      // Set correct_for_drag_min_distance to true to make the starting point of the drag\n      // be calculated from where the drag was triggered, not from where the touch started.\n      // Useful to avoid a jerk-starting drag, which can make fine-adjustments\n      // through dragging difficult, and be visually unappealing.\n      correct_for_drag_min_distance: true,\n\n      // set 0 for unlimited, but this can conflict with transform\n      drag_max_touches: 1,\n\n      // prevent default browser behavior when dragging occurs\n      // be careful with it, it makes the element a blocking element\n      // when you are using the drag gesture, it is a good practice to set this true\n      drag_block_horizontal: false,\n      drag_block_vertical: false,\n\n      // drag_lock_to_axis keeps the drag gesture on the axis that it started on,\n      // It disallows vertical directions if the initial direction was horizontal, and vice versa.\n      drag_lock_to_axis: false,\n\n      // drag lock only kicks in when distance > drag_lock_min_distance\n      // This way, locking occurs only when the distance has become large enough to reliably determine the direction\n      drag_lock_min_distance: 25\n    },\n\n    triggered: false,\n    handler: function dragGesture(ev, inst) {\n      // current gesture isnt drag, but dragged is true\n      // this means an other gesture is busy. now call dragend\n      if (Hammer.detection.current.name != this.name && this.triggered) {\n        inst.trigger(this.name + 'end', ev);\n        this.triggered = false;\n        return;\n      }\n\n      // max touches\n      if (inst.options.drag_max_touches > 0 && ev.touches.length > inst.options.drag_max_touches) {\n        return;\n      }\n\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          this.triggered = false;\n          break;\n\n        case Hammer.EVENT_MOVE:\n          // when the distance we moved is too small we skip this gesture\n          // or we can be already in dragging\n          if (ev.distance < inst.options.drag_min_distance && Hammer.detection.current.name != this.name) {\n            return;\n          }\n\n          // we are dragging!\n          if (Hammer.detection.current.name != this.name) {\n            Hammer.detection.current.name = this.name;\n            if (inst.options.correct_for_drag_min_distance && ev.distance > 0) {\n              // When a drag is triggered, set the event center to drag_min_distance pixels from the original event center.\n              // Without this correction, the dragged distance would jumpstart at drag_min_distance pixels instead of at 0.\n              // It might be useful to save the original start point somewhere\n              var factor = Math.abs(inst.options.drag_min_distance / ev.distance);\n              Hammer.detection.current.startEvent.center.pageX += ev.deltaX * factor;\n              Hammer.detection.current.startEvent.center.pageY += ev.deltaY * factor;\n\n              // recalculate event data using new start point\n              ev = Hammer.detection.extendEventData(ev);\n            }\n          }\n\n          // lock drag to axis?\n          if (Hammer.detection.current.lastEvent.drag_locked_to_axis || inst.options.drag_lock_to_axis && inst.options.drag_lock_min_distance <= ev.distance) {\n            ev.drag_locked_to_axis = true;\n          }\n          var last_direction = Hammer.detection.current.lastEvent.direction;\n          if (ev.drag_locked_to_axis && last_direction !== ev.direction) {\n            // keep direction on the axis that the drag gesture started on\n            if (Hammer.utils.isVertical(last_direction)) {\n              ev.direction = ev.deltaY < 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;\n            } else {\n              ev.direction = ev.deltaX < 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;\n            }\n          }\n\n          // first time, trigger dragstart event\n          if (!this.triggered) {\n            inst.trigger(this.name + 'start', ev);\n            this.triggered = true;\n          }\n\n          // trigger normal event\n          inst.trigger(this.name, ev);\n\n          // direction event, like dragdown\n          inst.trigger(this.name + ev.direction, ev);\n\n          // block the browser events\n          if (inst.options.drag_block_vertical && Hammer.utils.isVertical(ev.direction) || inst.options.drag_block_horizontal && !Hammer.utils.isVertical(ev.direction)) {\n            ev.preventDefault();\n          }\n          break;\n\n        case Hammer.EVENT_END:\n          // trigger dragend\n          if (this.triggered) {\n            inst.trigger(this.name + 'end', ev);\n          }\n\n          this.triggered = false;\n          break;\n      }\n    }\n  };\n\n  /**\n   * Hold\n   * Touch stays at the same place for x time\n   * @events  hold\n   */\n  Hammer.gestures.Hold = {\n    name: 'hold',\n    index: 10,\n    defaults: {\n      hold_timeout: 500,\n      hold_threshold: 1\n    },\n    timer: null,\n    handler: function holdGesture(ev, inst) {\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          // clear any running timers\n          clearTimeout(this.timer);\n\n          // set the gesture so we can check in the timeout if it still is\n          Hammer.detection.current.name = this.name;\n\n          // set timer and if after the timeout it still is hold,\n          // we trigger the hold event\n          this.timer = setTimeout(function () {\n            if (Hammer.detection.current.name == 'hold') {\n              inst.trigger('hold', ev);\n            }\n          }, inst.options.hold_timeout);\n          break;\n\n        // when you move or end we clear the timer\n        case Hammer.EVENT_MOVE:\n          if (ev.distance > inst.options.hold_threshold) {\n            clearTimeout(this.timer);\n          }\n          break;\n\n        case Hammer.EVENT_END:\n          clearTimeout(this.timer);\n          break;\n      }\n    }\n  };\n\n  /**\n   * Release\n   * Called as last, tells the user has released the screen\n   * @events  release\n   */\n  Hammer.gestures.Release = {\n    name: 'release',\n    index: Infinity,\n    handler: function releaseGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END) {\n        inst.trigger(this.name, ev);\n      }\n    }\n  };\n\n  /**\n   * Swipe\n   * triggers swipe events when the end velocity is above the threshold\n   * @events  swipe, swipeleft, swiperight, swipeup, swipedown\n   */\n  Hammer.gestures.Swipe = {\n    name: 'swipe',\n    index: 40,\n    defaults: {\n      // set 0 for unlimited, but this can conflict with transform\n      swipe_min_touches: 1,\n      swipe_max_touches: 1,\n      swipe_velocity: 0.7\n    },\n    handler: function swipeGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END) {\n        // max touches\n        if (inst.options.swipe_max_touches > 0 && ev.touches.length < inst.options.swipe_min_touches && ev.touches.length > inst.options.swipe_max_touches) {\n          return;\n        }\n\n        // when the distance we moved is too small we skip this gesture\n        // or we can be already in dragging\n        if (ev.velocityX > inst.options.swipe_velocity || ev.velocityY > inst.options.swipe_velocity) {\n          // trigger swipe events\n          inst.trigger(this.name, ev);\n          inst.trigger(this.name + ev.direction, ev);\n        }\n      }\n    }\n  };\n\n  /**\n   * Tap/DoubleTap\n   * Quick touch at a place or double at the same place\n   * @events  tap, doubletap\n   */\n  Hammer.gestures.Tap = {\n    name: 'tap',\n    index: 100,\n    defaults: {\n      tap_max_touchtime: 250,\n      tap_max_distance: 10,\n      tap_always: true,\n      doubletap_distance: 20,\n      doubletap_interval: 300\n    },\n    handler: function tapGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END && ev.srcEvent.type != 'touchcancel') {\n        // previous gesture, for the double tap since these are two different gesture detections\n        var prev = Hammer.detection.previous,\n            did_doubletap = false;\n\n        // when the touchtime is higher then the max touch time\n        // or when the moving distance is too much\n        if (ev.deltaTime > inst.options.tap_max_touchtime || ev.distance > inst.options.tap_max_distance) {\n          return;\n        }\n\n        // check if double tap\n        if (prev && prev.name == 'tap' && ev.timeStamp - prev.lastEvent.timeStamp < inst.options.doubletap_interval && ev.distance < inst.options.doubletap_distance) {\n          inst.trigger('doubletap', ev);\n          did_doubletap = true;\n        }\n\n        // do a single tap\n        if (!did_doubletap || inst.options.tap_always) {\n          Hammer.detection.current.name = 'tap';\n          inst.trigger(Hammer.detection.current.name, ev);\n        }\n      }\n    }\n  };\n\n  /**\n   * Touch\n   * Called as first, tells the user has touched the screen\n   * @events  touch\n   */\n  Hammer.gestures.Touch = {\n    name: 'touch',\n    index: -Infinity,\n    defaults: {\n      // call preventDefault at touchstart, and makes the element blocking by\n      // disabling the scrolling of the page, but it improves gestures like\n      // transforming and dragging.\n      // be careful with using this, it can be very annoying for users to be stuck\n      // on the page\n      prevent_default: false,\n\n      // disable mouse events, so only touch (or pen!) input triggers events\n      prevent_mouseevents: false\n    },\n    handler: function touchGesture(ev, inst) {\n      if (inst.options.prevent_mouseevents && ev.pointerType == Hammer.POINTER_MOUSE) {\n        ev.stopDetect();\n        return;\n      }\n\n      if (inst.options.prevent_default) {\n        ev.preventDefault();\n      }\n\n      if (ev.eventType == Hammer.EVENT_START) {\n        inst.trigger(this.name, ev);\n      }\n    }\n  };\n\n  /**\n   * Transform\n   * User want to scale or rotate with 2 fingers\n   * @events  transform, pinch, pinchin, pinchout, rotate\n   */\n  Hammer.gestures.Transform = {\n    name: 'transform',\n    index: 45,\n    defaults: {\n      // factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1\n      transform_min_scale: 0.01,\n      // rotation in degrees\n      transform_min_rotation: 1,\n      // prevent default browser behavior when two touches are on the screen\n      // but it makes the element a blocking element\n      // when you are using the transform gesture, it is a good practice to set this true\n      transform_always_block: false\n    },\n    triggered: false,\n    handler: function transformGesture(ev, inst) {\n      // current gesture isnt drag, but dragged is true\n      // this means an other gesture is busy. now call dragend\n      if (Hammer.detection.current.name != this.name && this.triggered) {\n        inst.trigger(this.name + 'end', ev);\n        this.triggered = false;\n        return;\n      }\n\n      // atleast multitouch\n      if (ev.touches.length < 2) {\n        return;\n      }\n\n      // prevent default when two fingers are on the screen\n      if (inst.options.transform_always_block) {\n        ev.preventDefault();\n      }\n\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          this.triggered = false;\n          break;\n\n        case Hammer.EVENT_MOVE:\n          var scale_threshold = Math.abs(1 - ev.scale);\n          var rotation_threshold = Math.abs(ev.rotation);\n\n          // when the distance we moved is too small we skip this gesture\n          // or we can be already in dragging\n          if (scale_threshold < inst.options.transform_min_scale && rotation_threshold < inst.options.transform_min_rotation) {\n            return;\n          }\n\n          // we are transforming!\n          Hammer.detection.current.name = this.name;\n\n          // first time, trigger dragstart event\n          if (!this.triggered) {\n            inst.trigger(this.name + 'start', ev);\n            this.triggered = true;\n          }\n\n          inst.trigger(this.name, ev); // basic transform event\n\n          // trigger rotate event\n          if (rotation_threshold > inst.options.transform_min_rotation) {\n            inst.trigger('rotate', ev);\n          }\n\n          // trigger pinch event\n          if (scale_threshold > inst.options.transform_min_scale) {\n            inst.trigger('pinch', ev);\n            inst.trigger('pinch' + (ev.scale < 1 ? 'in' : 'out'), ev);\n          }\n          break;\n\n        case Hammer.EVENT_END:\n          // trigger dragend\n          if (this.triggered) {\n            inst.trigger(this.name + 'end', ev);\n          }\n\n          this.triggered = false;\n          break;\n      }\n    }\n  };\n\n  // Based off Lo-Dash's excellent UMD wrapper (slightly modified) - https://github.com/bestiejs/lodash/blob/master/lodash.js#L5515-L5543\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n  if (typeof define == 'function' && __webpack_require__(/*! !webpack amd options */ 22)) {\n    // define as an anonymous module\n    define(function () {\n      return Hammer;\n    });\n  }\n\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (typeof module === 'object' && module.exports) {\n      module.exports = Hammer;\n    } else {\n      window.Hammer = Hammer;\n    }\n\n  return Hammer;\n}(window);\n\n/* unused harmony default export */ var _unused_webpack_default_export = (Hammer);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(/*! ./../../shinyGator/node_modules/.registry.npmjs.org/webpack/3.12.0/node_modules/webpack/buildin/harmony-module.js */ 6)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZ2F0b3IvanMvaGFtbWVyLmpzP2YwMGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEhhbW1lci5KUyAtIHYxLjAuN2RldiAtIDIwMTQtMDEtMTVcbiAqIGh0dHA6Ly9laWdodG1lZGlhLmdpdGh1Yi5jb20vaGFtbWVyLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IEpvcmlrIFRhbmdlbGRlciA8ai50YW5nZWxkZXJAZ21haWwuY29tPjtcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAqL1xuXG5jb25zdCBIYW1tZXIgPSAoZnVuY3Rpb24od2luZG93LCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEhhbW1lclxuICogdXNlIHRoaXMgdG8gY3JlYXRlIGluc3RhbmNlc1xuICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgIGVsZW1lbnRcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJucyB7SGFtbWVyLkluc3RhbmNlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBIYW1tZXIgPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSGFtbWVyLkluc3RhbmNlKGVsZW1lbnQsIG9wdGlvbnMgfHwge30pO1xufTtcblxuLy8gZGVmYXVsdCBzZXR0aW5nc1xuSGFtbWVyLmRlZmF1bHRzID0ge1xuICAvLyBhZGQgc3R5bGVzIGFuZCBhdHRyaWJ1dGVzIHRvIHRoZSBlbGVtZW50IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIgZnJvbSBkb2luZ1xuICAvLyBpdHMgbmF0aXZlIGJlaGF2aW9yLiB0aGlzIGRvZXNudCBwcmV2ZW50IHRoZSBzY3JvbGxpbmcsIGJ1dCBjYW5jZWxzXG4gIC8vIHRoZSBjb250ZXh0bWVudSwgdGFwIGhpZ2hsaWdodGluZyBldGNcbiAgLy8gc2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhpc1xuICBzdG9wX2Jyb3dzZXJfYmVoYXZpb3I6IHtcbiAgICAvLyB0aGlzIGFsc28gdHJpZ2dlcnMgb25zZWxlY3RzdGFydD1mYWxzZSBmb3IgSUVcbiAgICB1c2VyU2VsZWN0ICAgICAgIDogJ25vbmUnLFxuICAgIC8vIHRoaXMgbWFrZXMgdGhlIGVsZW1lbnQgYmxvY2tpbmcgaW4gSUUxMCA+LCB5b3UgY291bGQgZXhwZXJpbWVudCB3aXRoIHRoZSB2YWx1ZVxuICAgIC8vIHNlZSBmb3IgbW9yZSBvcHRpb25zIHRoaXMgaXNzdWU7IGh0dHBzOi8vZ2l0aHViLmNvbS9FaWdodE1lZGlhL2hhbW1lci5qcy9pc3N1ZXMvMjQxXG4gICAgdG91Y2hBY3Rpb24gICAgICA6ICdub25lJyxcbiAgICB0b3VjaENhbGxvdXQgICAgIDogJ25vbmUnLFxuICAgIGNvbnRlbnRab29taW5nICAgOiAnbm9uZScsXG4gICAgdXNlckRyYWcgICAgICAgICA6ICdub25lJyxcbiAgICB0YXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknXG4gIH1cblxuICAvL1xuICAvLyBtb3JlIHNldHRpbmdzIGFyZSBkZWZpbmVkIHBlciBnZXN0dXJlIGF0IGdlc3R1cmVzLmpzXG4gIC8vXG59O1xuXG4vLyBkZXRlY3QgdG91Y2hldmVudHNcbkhhbW1lci5IQVNfUE9JTlRFUkVWRU5UUyA9IHdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkO1xuSGFtbWVyLkhBU19UT1VDSEVWRU5UUyA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpO1xuXG4vLyBkb250IHVzZSBtb3VzZWV2ZW50cyBvbiBtb2JpbGUgZGV2aWNlc1xuSGFtbWVyLk1PQklMRV9SRUdFWCA9IC9tb2JpbGV8dGFibGV0fGlwKGFkfGhvbmV8b2QpfGFuZHJvaWR8c2lsay9pO1xuSGFtbWVyLk5PX01PVVNFRVZFTlRTID0gSGFtbWVyLkhBU19UT1VDSEVWRU5UUyAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChIYW1tZXIuTU9CSUxFX1JFR0VYKTtcblxuLy8gZXZlbnR0eXBlcyBwZXIgdG91Y2hldmVudCAoc3RhcnQsIG1vdmUsIGVuZClcbi8vIGFyZSBmaWxsZWQgYnkgSGFtbWVyLmV2ZW50LmRldGVybWluZUV2ZW50VHlwZXMgb24gc2V0dXBcbkhhbW1lci5FVkVOVF9UWVBFUyA9IHt9O1xuXG4vLyBkaXJlY3Rpb24gZGVmaW5lc1xuSGFtbWVyLkRJUkVDVElPTl9ET1dOID0gJ2Rvd24nO1xuSGFtbWVyLkRJUkVDVElPTl9MRUZUID0gJ2xlZnQnO1xuSGFtbWVyLkRJUkVDVElPTl9VUCA9ICd1cCc7XG5IYW1tZXIuRElSRUNUSU9OX1JJR0hUID0gJ3JpZ2h0JztcblxuLy8gcG9pbnRlciB0eXBlXG5IYW1tZXIuUE9JTlRFUl9NT1VTRSA9ICdtb3VzZSc7XG5IYW1tZXIuUE9JTlRFUl9UT1VDSCA9ICd0b3VjaCc7XG5IYW1tZXIuUE9JTlRFUl9QRU4gPSAncGVuJztcblxuLy8gdG91Y2ggZXZlbnQgZGVmaW5lc1xuSGFtbWVyLkVWRU5UX1NUQVJUID0gJ3N0YXJ0JztcbkhhbW1lci5FVkVOVF9NT1ZFID0gJ21vdmUnO1xuSGFtbWVyLkVWRU5UX0VORCA9ICdlbmQnO1xuXG4vLyBoYW1tZXIgZG9jdW1lbnQgd2hlcmUgdGhlIGJhc2UgZXZlbnRzIGFyZSBhZGRlZCBhdFxuSGFtbWVyLkRPQ1VNRU5UID0gd2luZG93LmRvY3VtZW50O1xuXG4vLyBwbHVnaW5zIGFuZCBnZXN0dXJlcyBuYW1lc3BhY2VzXG5IYW1tZXIucGx1Z2lucyA9IEhhbW1lci5wbHVnaW5zIHx8IHt9O1xuSGFtbWVyLmdlc3R1cmVzID0gSGFtbWVyLmdlc3R1cmVzIHx8IHt9O1xuXG4vLyBpZiB0aGUgd2luZG93IGV2ZW50cyBhcmUgc2V0Li4uXG5IYW1tZXIuUkVBRFkgPSBmYWxzZTtcblxuLyoqXG4gKiBzZXR1cCBldmVudHMgdG8gZGV0ZWN0IGdlc3R1cmVzIG9uIHRoZSBkb2N1bWVudFxuICovXG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgaWYoSGFtbWVyLlJFQURZKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZmluZCB3aGF0IGV2ZW50dHlwZXMgd2UgYWRkIGxpc3RlbmVycyB0b1xuICBIYW1tZXIuZXZlbnQuZGV0ZXJtaW5lRXZlbnRUeXBlcygpO1xuXG4gIC8vIFJlZ2lzdGVyIGFsbCBnZXN0dXJlcyBpbnNpZGUgSGFtbWVyLmdlc3R1cmVzXG4gIEhhbW1lci51dGlscy5lYWNoKEhhbW1lci5nZXN0dXJlcywgZnVuY3Rpb24oZ2VzdHVyZSl7XG4gICAgSGFtbWVyLmRldGVjdGlvbi5yZWdpc3RlcihnZXN0dXJlKTtcbiAgfSk7XG5cbiAgLy8gQWRkIHRvdWNoIGV2ZW50cyBvbiB0aGUgZG9jdW1lbnRcbiAgSGFtbWVyLmV2ZW50Lm9uVG91Y2goSGFtbWVyLkRPQ1VNRU5ULCBIYW1tZXIuRVZFTlRfTU9WRSwgSGFtbWVyLmRldGVjdGlvbi5kZXRlY3QpO1xuICBIYW1tZXIuZXZlbnQub25Ub3VjaChIYW1tZXIuRE9DVU1FTlQsIEhhbW1lci5FVkVOVF9FTkQsIEhhbW1lci5kZXRlY3Rpb24uZGV0ZWN0KTtcblxuICAvLyBIYW1tZXIgaXMgcmVhZHkuLi4hXG4gIEhhbW1lci5SRUFEWSA9IHRydWU7XG59XG5cbkhhbW1lci51dGlscyA9IHtcbiAgLyoqXG4gICAqIGV4dGVuZCBtZXRob2QsXG4gICAqIGFsc28gdXNlZCBmb3IgY2xvbmluZyB3aGVuIGRlc3QgaXMgYW4gZW1wdHkgb2JqZWN0XG4gICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGRlc3RcbiAgICogQHBhcmFtICAge09iamVjdH0gICAgc3JjXG4gICAqIEBwYXJtICB7Qm9vbGVhbn0gIG1lcmdlICAgIGRvIGEgbWVyZ2VcbiAgICogQHJldHVybnMge09iamVjdH0gICAgZGVzdFxuICAgKi9cbiAgZXh0ZW5kOiBmdW5jdGlvbiBleHRlbmQoZGVzdCwgc3JjLCBtZXJnZSkge1xuICAgIGZvcih2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYoZGVzdFtrZXldICE9PSB1bmRlZmluZWQgJiYgbWVyZ2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBkZXN0W2tleV0gPSBzcmNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG4gIH0sXG5cblxuICAvKipcbiAgICogZm9yIGVhY2hcbiAgICogQHBhcmFtIG9ialxuICAgKiBAcGFyYW0gaXRlcmF0b3JcbiAgICovXG4gIGVhY2g6IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuICAgIC8vIG5hdGl2ZSBmb3JFYWNoIG9uIGFycmF5c1xuICAgIGlmICgnZm9yRWFjaCcgaW4gb2JqKSB7XG4gICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgfVxuICAgIC8vIGFycmF5c1xuICAgIGVsc2UgaWYob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBvYmplY3RzXG4gICAgZWxzZSB7XG4gICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBmaW5kIGlmIGEgbm9kZSBpcyBpbiB0aGUgZ2l2ZW4gcGFyZW50XG4gICAqIHVzZWQgZm9yIGV2ZW50IGRlbGVnYXRpb24gdHJpY2tzXG4gICAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gICBub2RlXG4gICAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gICBwYXJlbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW59ICAgICAgIGhhc19wYXJlbnRcbiAgICovXG4gIGhhc1BhcmVudDogZnVuY3Rpb24obm9kZSwgcGFyZW50KSB7XG4gICAgd2hpbGUobm9kZSkge1xuICAgICAgaWYobm9kZSA9PSBwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cblxuICAvKipcbiAgICogZ2V0IHRoZSBjZW50ZXIgb2YgYWxsIHRoZSB0b3VjaGVzXG4gICAqIEBwYXJhbSAgIHtBcnJheX0gICAgIHRvdWNoZXNcbiAgICogQHJldHVybnMge09iamVjdH0gICAgY2VudGVyXG4gICAqL1xuICBnZXRDZW50ZXI6IGZ1bmN0aW9uIGdldENlbnRlcih0b3VjaGVzKSB7XG4gICAgdmFyIHZhbHVlc1ggPSBbXSwgdmFsdWVzWSA9IFtdO1xuXG4gICAgSGFtbWVyLnV0aWxzLmVhY2godG91Y2hlcywgZnVuY3Rpb24odG91Y2gpIHtcbiAgICAgIC8vIEkgcHJlZmVyIGNsaWVudFggYmVjYXVzZSBpdCBpZ25vcmUgdGhlIHNjcm9sbGluZyBwb3NpdGlvblxuICAgICAgdmFsdWVzWC5wdXNoKHR5cGVvZiB0b3VjaC5jbGllbnRYICE9PSAndW5kZWZpbmVkJyA/IHRvdWNoLmNsaWVudFggOiB0b3VjaC5wYWdlWCApO1xuICAgICAgdmFsdWVzWS5wdXNoKHR5cGVvZiB0b3VjaC5jbGllbnRZICE9PSAndW5kZWZpbmVkJyA/IHRvdWNoLmNsaWVudFkgOiB0b3VjaC5wYWdlWSApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2VYOiAoKE1hdGgubWluLmFwcGx5KE1hdGgsIHZhbHVlc1gpICsgTWF0aC5tYXguYXBwbHkoTWF0aCwgdmFsdWVzWCkpIC8gMiksXG4gICAgICBwYWdlWTogKChNYXRoLm1pbi5hcHBseShNYXRoLCB2YWx1ZXNZKSArIE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlc1kpKSAvIDIpXG4gICAgfTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBjYWxjdWxhdGUgdGhlIHZlbG9jaXR5IGJldHdlZW4gdHdvIHBvaW50c1xuICAgKiBAcGFyYW0gICB7TnVtYmVyfSAgICBkZWx0YV90aW1lXG4gICAqIEBwYXJhbSAgIHtOdW1iZXJ9ICAgIGRlbHRhX3hcbiAgICogQHBhcmFtICAge051bWJlcn0gICAgZGVsdGFfeVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAgICB2ZWxvY2l0eVxuICAgKi9cbiAgZ2V0VmVsb2NpdHk6IGZ1bmN0aW9uIGdldFZlbG9jaXR5KGRlbHRhX3RpbWUsIGRlbHRhX3gsIGRlbHRhX3kpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5hYnMoZGVsdGFfeCAvIGRlbHRhX3RpbWUpIHx8IDAsXG4gICAgICB5OiBNYXRoLmFicyhkZWx0YV95IC8gZGVsdGFfdGltZSkgfHwgMFxuICAgIH07XG4gIH0sXG5cblxuICAvKipcbiAgICogY2FsY3VsYXRlIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byBjb29yZGluYXRlc1xuICAgKiBAcGFyYW0gICB7VG91Y2h9ICAgICB0b3VjaDFcbiAgICogQHBhcmFtICAge1RvdWNofSAgICAgdG91Y2gyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9ICAgIGFuZ2xlXG4gICAqL1xuICBnZXRBbmdsZTogZnVuY3Rpb24gZ2V0QW5nbGUodG91Y2gxLCB0b3VjaDIpIHtcbiAgICB2YXIgeSA9IHRvdWNoMi5wYWdlWSAtIHRvdWNoMS5wYWdlWSxcbiAgICAgIHggPSB0b3VjaDIucGFnZVggLSB0b3VjaDEucGFnZVg7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAxODAgLyBNYXRoLlBJO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIGFuZ2xlIHRvIGRpcmVjdGlvbiBkZWZpbmVcbiAgICogQHBhcmFtICAge1RvdWNofSAgICAgdG91Y2gxXG4gICAqIEBwYXJhbSAgIHtUb3VjaH0gICAgIHRvdWNoMlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAgICBkaXJlY3Rpb24gY29uc3RhbnQsIGxpa2UgSGFtbWVyLkRJUkVDVElPTl9MRUZUXG4gICAqL1xuICBnZXREaXJlY3Rpb246IGZ1bmN0aW9uIGdldERpcmVjdGlvbih0b3VjaDEsIHRvdWNoMikge1xuICAgIHZhciB4ID0gTWF0aC5hYnModG91Y2gxLnBhZ2VYIC0gdG91Y2gyLnBhZ2VYKSxcbiAgICAgIHkgPSBNYXRoLmFicyh0b3VjaDEucGFnZVkgLSB0b3VjaDIucGFnZVkpO1xuXG4gICAgaWYoeCA+PSB5KSB7XG4gICAgICByZXR1cm4gdG91Y2gxLnBhZ2VYIC0gdG91Y2gyLnBhZ2VYID4gMCA/IEhhbW1lci5ESVJFQ1RJT05fTEVGVCA6IEhhbW1lci5ESVJFQ1RJT05fUklHSFQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHRvdWNoMS5wYWdlWSAtIHRvdWNoMi5wYWdlWSA+IDAgPyBIYW1tZXIuRElSRUNUSU9OX1VQIDogSGFtbWVyLkRJUkVDVElPTl9ET1dOO1xuICAgIH1cbiAgfSxcblxuXG4gIC8qKlxuICAgKiBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHRvdWNoZXNcbiAgICogQHBhcmFtICAge1RvdWNofSAgICAgdG91Y2gxXG4gICAqIEBwYXJhbSAgIHtUb3VjaH0gICAgIHRvdWNoMlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSAgICBkaXN0YW5jZVxuICAgKi9cbiAgZ2V0RGlzdGFuY2U6IGZ1bmN0aW9uIGdldERpc3RhbmNlKHRvdWNoMSwgdG91Y2gyKSB7XG4gICAgdmFyIHggPSB0b3VjaDIucGFnZVggLSB0b3VjaDEucGFnZVgsXG4gICAgICB5ID0gdG91Y2gyLnBhZ2VZIC0gdG91Y2gxLnBhZ2VZO1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIGNhbGN1bGF0ZSB0aGUgc2NhbGUgZmFjdG9yIGJldHdlZW4gdHdvIHRvdWNoTGlzdHMgKGZpbmdlcnMpXG4gICAqIG5vIHNjYWxlIGlzIDEsIGFuZCBnb2VzIGRvd24gdG8gMCB3aGVuIHBpbmNoZWQgdG9nZXRoZXIsIGFuZCBiaWdnZXIgd2hlbiBwaW5jaGVkIG91dFxuICAgKiBAcGFyYW0gICB7QXJyYXl9ICAgICBzdGFydFxuICAgKiBAcGFyYW0gICB7QXJyYXl9ICAgICBlbmRcbiAgICogQHJldHVybnMge051bWJlcn0gICAgc2NhbGVcbiAgICovXG4gIGdldFNjYWxlOiBmdW5jdGlvbiBnZXRTY2FsZShzdGFydCwgZW5kKSB7XG4gICAgLy8gbmVlZCB0d28gZmluZ2Vycy4uLlxuICAgIGlmKHN0YXJ0Lmxlbmd0aCA+PSAyICYmIGVuZC5sZW5ndGggPj0gMikge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGlzdGFuY2UoZW5kWzBdLCBlbmRbMV0pIC9cbiAgICAgICAgdGhpcy5nZXREaXN0YW5jZShzdGFydFswXSwgc3RhcnRbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gMTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBjYWxjdWxhdGUgdGhlIHJvdGF0aW9uIGRlZ3JlZXMgYmV0d2VlbiB0d28gdG91Y2hMaXN0cyAoZmluZ2VycylcbiAgICogQHBhcmFtICAge0FycmF5fSAgICAgc3RhcnRcbiAgICogQHBhcmFtICAge0FycmF5fSAgICAgZW5kXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9ICAgIHJvdGF0aW9uXG4gICAqL1xuICBnZXRSb3RhdGlvbjogZnVuY3Rpb24gZ2V0Um90YXRpb24oc3RhcnQsIGVuZCkge1xuICAgIC8vIG5lZWQgdHdvIGZpbmdlcnNcbiAgICBpZihzdGFydC5sZW5ndGggPj0gMiAmJiBlbmQubGVuZ3RoID49IDIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEFuZ2xlKGVuZFsxXSwgZW5kWzBdKSAtXG4gICAgICAgIHRoaXMuZ2V0QW5nbGUoc3RhcnRbMV0sIHN0YXJ0WzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cblxuICAvKipcbiAgICogYm9vbGVhbiBpZiB0aGUgZGlyZWN0aW9uIGlzIHZlcnRpY2FsXG4gICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBkaXJlY3Rpb25cbiAgICogQHJldHVybnMgIHtCb29sZWFufSAgIGlzX3ZlcnRpY2FsXG4gICAqL1xuICBpc1ZlcnRpY2FsOiBmdW5jdGlvbiBpc1ZlcnRpY2FsKGRpcmVjdGlvbikge1xuICAgIHJldHVybiAoZGlyZWN0aW9uID09IEhhbW1lci5ESVJFQ1RJT05fVVAgfHwgZGlyZWN0aW9uID09IEhhbW1lci5ESVJFQ1RJT05fRE9XTik7XG4gIH0sXG5cblxuICAvKipcbiAgICogc3RvcCBicm93c2VyIGRlZmF1bHQgYmVoYXZpb3Igd2l0aCBjc3MgcHJvcHNcbiAgICogQHBhcmFtICAge0h0bWxFbGVtZW50fSAgIGVsZW1lbnRcbiAgICogQHBhcmFtICAge09iamVjdH0gICAgICAgIGNzc19wcm9wc1xuICAgKi9cbiAgc3RvcERlZmF1bHRCcm93c2VyQmVoYXZpb3I6IGZ1bmN0aW9uIHN0b3BEZWZhdWx0QnJvd3NlckJlaGF2aW9yKGVsZW1lbnQsIGNzc19wcm9wcykge1xuICAgIGlmKCFjc3NfcHJvcHMgfHwgIWVsZW1lbnQgfHwgIWVsZW1lbnQuc3R5bGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyB3aXRoIGNzcyBwcm9wZXJ0aWVzIGZvciBtb2Rlcm4gYnJvd3NlcnNcbiAgICBIYW1tZXIudXRpbHMuZWFjaChbJ3dlYmtpdCcsICdraHRtbCcsICdtb3onLCAnTW96JywgJ21zJywgJ28nLCAnJ10sIGZ1bmN0aW9uKHZlbmRvcikge1xuICAgICAgSGFtbWVyLnV0aWxzLmVhY2goY3NzX3Byb3BzLCBmdW5jdGlvbih2YWx1ZSwgcHJvcCkge1xuICAgICAgICAgIC8vIHZlbmRlciBwcmVmaXggYXQgdGhlIHByb3BlcnR5XG4gICAgICAgICAgaWYodmVuZG9yKSB7XG4gICAgICAgICAgICBwcm9wID0gdmVuZG9yICsgcHJvcC5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHByb3Auc3Vic3RyaW5nKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzZXQgdGhlIHN0eWxlXG4gICAgICAgICAgaWYocHJvcCBpbiBlbGVtZW50LnN0eWxlKSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBhbHNvIHRoZSBkaXNhYmxlIG9uc2VsZWN0c3RhcnRcbiAgICBpZihjc3NfcHJvcHMudXNlclNlbGVjdCA9PSAnbm9uZScpIHtcbiAgICAgIGVsZW1lbnQub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIGFuZCBkaXNhYmxlIG9uZHJhZ3N0YXJ0XG4gICAgaWYoY3NzX3Byb3BzLnVzZXJEcmFnID09ICdub25lJykge1xuICAgICAgZWxlbWVudC5vbmRyYWdzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIGNyZWF0ZSBuZXcgaGFtbWVyIGluc3RhbmNlXG4gKiBhbGwgbWV0aG9kcyBzaG91bGQgcmV0dXJuIHRoZSBpbnN0YW5jZSBpdHNlbGYsIHNvIGl0IGlzIGNoYWluYWJsZS5cbiAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gICAgICAgZWxlbWVudFxuICogQHBhcmFtICAge09iamVjdH0gICAgICAgICAgICBbb3B0aW9ucz17fV1cbiAqIEByZXR1cm5zIHtIYW1tZXIuSW5zdGFuY2V9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuSGFtbWVyLkluc3RhbmNlID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gc2V0dXAgSGFtbWVySlMgd2luZG93IGV2ZW50cyBhbmQgcmVnaXN0ZXIgYWxsIGdlc3R1cmVzXG4gIC8vIHRoaXMgYWxzbyBzZXRzIHVwIHRoZSBkZWZhdWx0IG9wdGlvbnNcbiAgc2V0dXAoKTtcblxuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gIC8vIHN0YXJ0L3N0b3AgZGV0ZWN0aW9uIG9wdGlvblxuICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG4gIC8vIG1lcmdlIG9wdGlvbnNcbiAgdGhpcy5vcHRpb25zID0gSGFtbWVyLnV0aWxzLmV4dGVuZChcbiAgICBIYW1tZXIudXRpbHMuZXh0ZW5kKHt9LCBIYW1tZXIuZGVmYXVsdHMpLFxuICAgIG9wdGlvbnMgfHwge30pO1xuXG4gIC8vIGFkZCBzb21lIGNzcyB0byB0aGUgZWxlbWVudCB0byBwcmV2ZW50IHRoZSBicm93c2VyIGZyb20gZG9pbmcgaXRzIG5hdGl2ZSBiZWhhdm9pclxuICBpZih0aGlzLm9wdGlvbnMuc3RvcF9icm93c2VyX2JlaGF2aW9yKSB7XG4gICAgSGFtbWVyLnV0aWxzLnN0b3BEZWZhdWx0QnJvd3NlckJlaGF2aW9yKHRoaXMuZWxlbWVudCwgdGhpcy5vcHRpb25zLnN0b3BfYnJvd3Nlcl9iZWhhdmlvcik7XG4gIH1cblxuICAvLyBzdGFydCBkZXRlY3Rpb24gb24gdG91Y2hzdGFydFxuICBIYW1tZXIuZXZlbnQub25Ub3VjaChlbGVtZW50LCBIYW1tZXIuRVZFTlRfU1RBUlQsIGZ1bmN0aW9uKGV2KSB7XG4gICAgaWYoc2VsZi5lbmFibGVkKSB7XG4gICAgICBIYW1tZXIuZGV0ZWN0aW9uLnN0YXJ0RGV0ZWN0KHNlbGYsIGV2KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHJldHVybiBpbnN0YW5jZVxuICByZXR1cm4gdGhpcztcbn07XG5cblxuSGFtbWVyLkluc3RhbmNlLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIGJpbmQgZXZlbnRzIHRvIHRoZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgIGdlc3R1cmVcbiAgICogQHBhcmFtICAge0Z1bmN0aW9ufSAgICBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtIYW1tZXIuSW5zdGFuY2V9XG4gICAqL1xuICBvbjogZnVuY3Rpb24gb25FdmVudChnZXN0dXJlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGdlc3R1cmVzID0gZ2VzdHVyZS5zcGxpdCgnICcpO1xuICAgIEhhbW1lci51dGlscy5lYWNoKGdlc3R1cmVzLCBmdW5jdGlvbihnZXN0dXJlKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihnZXN0dXJlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cblxuICAvKipcbiAgICogdW5iaW5kIGV2ZW50cyB0byB0aGUgaW5zdGFuY2VcbiAgICogQHBhcmFtICAge1N0cmluZ30gICAgICBnZXN0dXJlXG4gICAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gICAgaGFuZGxlclxuICAgKiBAcmV0dXJucyB7SGFtbWVyLkluc3RhbmNlfVxuICAgKi9cbiAgb2ZmOiBmdW5jdGlvbiBvZmZFdmVudChnZXN0dXJlLCBoYW5kbGVyKSB7XG4gICAgdmFyIGdlc3R1cmVzID0gZ2VzdHVyZS5zcGxpdCgnICcpO1xuICAgIEhhbW1lci51dGlscy5lYWNoKGdlc3R1cmVzLCBmdW5jdGlvbihnZXN0dXJlKSB7XG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihnZXN0dXJlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cblxuICAvKipcbiAgICogdHJpZ2dlciBnZXN0dXJlIGV2ZW50XG4gICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgZ2VzdHVyZVxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSAgICAgIFtldmVudERhdGFdXG4gICAqIEByZXR1cm5zIHtIYW1tZXIuSW5zdGFuY2V9XG4gICAqL1xuICB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoZ2VzdHVyZSwgZXZlbnREYXRhKSB7XG4gICAgLy8gb3B0aW9uYWxcbiAgICBpZighZXZlbnREYXRhKSB7XG4gICAgICBldmVudERhdGEgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgRE9NIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gSGFtbWVyLkRPQ1VNRU5ULmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LmluaXRFdmVudChnZXN0dXJlLCB0cnVlLCB0cnVlKTtcbiAgICBldmVudC5nZXN0dXJlID0gZXZlbnREYXRhO1xuXG4gICAgLy8gdHJpZ2dlciBvbiB0aGUgdGFyZ2V0IGlmIGl0IGlzIGluIHRoZSBpbnN0YW5jZSBlbGVtZW50LFxuICAgIC8vIHRoaXMgaXMgZm9yIGV2ZW50IGRlbGVnYXRpb24gdHJpY2tzXG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgaWYoSGFtbWVyLnV0aWxzLmhhc1BhcmVudChldmVudERhdGEudGFyZ2V0LCBlbGVtZW50KSkge1xuICAgICAgZWxlbWVudCA9IGV2ZW50RGF0YS50YXJnZXQ7XG4gICAgfVxuXG4gICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBlbmFibGUgb2YgZGlzYWJsZSBoYW1tZXIuanMgZGV0ZWN0aW9uXG4gICAqIEBwYXJhbSAgIHtCb29sZWFufSAgIHN0YXRlXG4gICAqIEByZXR1cm5zIHtIYW1tZXIuSW5zdGFuY2V9XG4gICAqL1xuICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZShzdGF0ZSkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHN0YXRlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5cbi8qKlxuICogdGhpcyBob2xkcyB0aGUgbGFzdCBtb3ZlIGV2ZW50LFxuICogdXNlZCB0byBmaXggZW1wdHkgdG91Y2hlbmQgaXNzdWVcbiAqIHNlZSB0aGUgb25Ub3VjaCBldmVudCBmb3IgYW4gZXhwbGFuYXRpb25cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBsYXN0X21vdmVfZXZlbnQgPSBudWxsO1xuXG5cbi8qKlxuICogd2hlbiB0aGUgbW91c2UgaXMgaG9sZCBkb3duLCB0aGlzIGlzIHRydWVcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG52YXIgZW5hYmxlX2RldGVjdCA9IGZhbHNlO1xuXG5cbi8qKlxuICogd2hlbiB0b3VjaCBldmVudHMgaGF2ZSBiZWVuIGZpcmVkLCB0aGlzIGlzIHRydWVcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG52YXIgdG91Y2hfdHJpZ2dlcmVkID0gZmFsc2U7XG5cblxuSGFtbWVyLmV2ZW50ID0ge1xuICAvKipcbiAgICogc2ltcGxlIGFkZEV2ZW50TGlzdGVuZXJcbiAgICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgIGVsZW1lbnRcbiAgICogQHBhcmFtICAge1N0cmluZ30gICAgICAgIHR5cGVcbiAgICogQHBhcmFtICAge0Z1bmN0aW9ufSAgICAgIGhhbmRsZXJcbiAgICovXG4gIGJpbmREb206IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGhhbmRsZXIpIHtcbiAgICB2YXIgdHlwZXMgPSB0eXBlLnNwbGl0KCcgJyk7XG4gICAgSGFtbWVyLnV0aWxzLmVhY2godHlwZXMsIGZ1bmN0aW9uKHR5cGUpe1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICB9KTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiB0b3VjaCBldmVudHMgd2l0aCBtb3VzZSBmYWxsYmFja1xuICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICAgZWxlbWVudFxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgZXZlbnRUeXBlICAgICAgICBsaWtlIEhhbW1lci5FVkVOVF9NT1ZFXG4gICAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gICAgICBoYW5kbGVyXG4gICAqL1xuICBvblRvdWNoOiBmdW5jdGlvbiBvblRvdWNoKGVsZW1lbnQsIGV2ZW50VHlwZSwgaGFuZGxlcikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuYmluZERvbShlbGVtZW50LCBIYW1tZXIuRVZFTlRfVFlQRVNbZXZlbnRUeXBlXSwgZnVuY3Rpb24gYmluZERvbU9uVG91Y2goZXYpIHtcbiAgICAgIHZhciBzb3VyY2VFdmVudFR5cGUgPSBldi50eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIC8vIG9ubW91c2V1cCwgYnV0IHdoZW4gdG91Y2hlbmQgaGFzIGJlZW4gZmlyZWQgd2UgZG8gbm90aGluZy5cbiAgICAgIC8vIHRoaXMgaXMgZm9yIHRvdWNoZGV2aWNlcyB3aGljaCBhbHNvIGZpcmUgYSBtb3VzZXVwIG9uIHRvdWNoZW5kXG4gICAgICBpZihzb3VyY2VFdmVudFR5cGUubWF0Y2goL21vdXNlLykgJiYgdG91Y2hfdHJpZ2dlcmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gbW91c2VidXR0b24gbXVzdCBiZSBkb3duIG9yIGEgdG91Y2ggZXZlbnRcbiAgICAgIGVsc2UgaWYoc291cmNlRXZlbnRUeXBlLm1hdGNoKC90b3VjaC8pIHx8ICAgLy8gdG91Y2ggZXZlbnRzIGFyZSBhbHdheXMgb24gc2NyZWVuXG4gICAgICAgIHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvcG9pbnRlcmRvd24vKSB8fCAvLyBwb2ludGVyZXZlbnRzIHRvdWNoXG4gICAgICAgIChzb3VyY2VFdmVudFR5cGUubWF0Y2goL21vdXNlLykgJiYgZXYud2hpY2ggPT09IDEpICAgLy8gbW91c2UgaXMgcHJlc3NlZFxuICAgICAgICApIHtcbiAgICAgICAgZW5hYmxlX2RldGVjdCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIG1vdXNlIGlzbid0IHByZXNzZWRcbiAgICAgIGVsc2UgaWYoc291cmNlRXZlbnRUeXBlLm1hdGNoKC9tb3VzZS8pICYmICFldi53aGljaCkge1xuICAgICAgICBlbmFibGVfZGV0ZWN0ID0gZmFsc2U7XG4gICAgICB9XG5cblxuICAgICAgLy8gd2UgYXJlIGluIGEgdG91Y2ggZXZlbnQsIHNldCB0aGUgdG91Y2ggdHJpZ2dlcmVkIGJvb2wgdG8gdHJ1ZSxcbiAgICAgIC8vIHRoaXMgZm9yIHRoZSBjb25mbGljdHMgdGhhdCBtYXkgb2NjdXIgb24gaW9zIGFuZCBhbmRyb2lkXG4gICAgICBpZihzb3VyY2VFdmVudFR5cGUubWF0Y2goL3RvdWNofHBvaW50ZXIvKSkge1xuICAgICAgICB0b3VjaF90cmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBjb3VudCB0aGUgdG90YWwgdG91Y2hlcyBvbiB0aGUgc2NyZWVuXG4gICAgICB2YXIgY291bnRfdG91Y2hlcyA9IDA7XG5cbiAgICAgIC8vIHdoZW4gdG91Y2ggaGFzIGJlZW4gdHJpZ2dlcmVkIGluIHRoaXMgZGV0ZWN0aW9uIHNlc3Npb25cbiAgICAgIC8vIGFuZCB3ZSBhcmUgbm93IGhhbmRsaW5nIGEgbW91c2UgZXZlbnQsIHdlIHN0b3AgdGhhdCB0byBwcmV2ZW50IGNvbmZsaWN0c1xuICAgICAgaWYoZW5hYmxlX2RldGVjdCkge1xuICAgICAgICAvLyB1cGRhdGUgcG9pbnRlcmV2ZW50XG4gICAgICAgIGlmKEhhbW1lci5IQVNfUE9JTlRFUkVWRU5UUyAmJiBldmVudFR5cGUgIT0gSGFtbWVyLkVWRU5UX0VORCkge1xuICAgICAgICAgIGNvdW50X3RvdWNoZXMgPSBIYW1tZXIuUG9pbnRlckV2ZW50LnVwZGF0ZVBvaW50ZXIoZXZlbnRUeXBlLCBldik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdG91Y2hcbiAgICAgICAgZWxzZSBpZihzb3VyY2VFdmVudFR5cGUubWF0Y2goL3RvdWNoLykpIHtcbiAgICAgICAgICBjb3VudF90b3VjaGVzID0gZXYudG91Y2hlcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbW91c2VcbiAgICAgICAgZWxzZSBpZighdG91Y2hfdHJpZ2dlcmVkKSB7XG4gICAgICAgICAgY291bnRfdG91Y2hlcyA9IHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvdXAvKSA/IDAgOiAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgd2UgYXJlIGluIGEgZW5kIGV2ZW50LCBidXQgd2hlbiB3ZSByZW1vdmUgb25lIHRvdWNoIGFuZFxuICAgICAgICAvLyB3ZSBzdGlsbCBoYXZlIGVub3VnaCwgc2V0IGV2ZW50VHlwZSB0byBtb3ZlXG4gICAgICAgIGlmKGNvdW50X3RvdWNoZXMgPiAwICYmIGV2ZW50VHlwZSA9PSBIYW1tZXIuRVZFTlRfRU5EKSB7XG4gICAgICAgICAgZXZlbnRUeXBlID0gSGFtbWVyLkVWRU5UX01PVkU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gdG91Y2hlcywgZm9yY2UgdGhlIGVuZCBldmVudFxuICAgICAgICBlbHNlIGlmKCFjb3VudF90b3VjaGVzKSB7XG4gICAgICAgICAgZXZlbnRUeXBlID0gSGFtbWVyLkVWRU5UX0VORDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0b3JlIHRoZSBsYXN0IG1vdmUgZXZlbnRcbiAgICAgICAgaWYoY291bnRfdG91Y2hlcyB8fCBsYXN0X21vdmVfZXZlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICBsYXN0X21vdmVfZXZlbnQgPSBldjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyaWdnZXIgdGhlIGhhbmRsZXJcbiAgICAgICAgaGFuZGxlci5jYWxsKEhhbW1lci5kZXRlY3Rpb24sIHNlbGYuY29sbGVjdEV2ZW50RGF0YShlbGVtZW50LCBldmVudFR5cGUsIHNlbGYuZ2V0VG91Y2hMaXN0KGxhc3RfbW92ZV9ldmVudCwgZXZlbnRUeXBlKSwgZXYpKTtcblxuICAgICAgICAvLyByZW1vdmUgcG9pbnRlcmV2ZW50IGZyb20gbGlzdFxuICAgICAgICBpZihIYW1tZXIuSEFTX1BPSU5URVJFVkVOVFMgJiYgZXZlbnRUeXBlID09IEhhbW1lci5FVkVOVF9FTkQpIHtcbiAgICAgICAgICBjb3VudF90b3VjaGVzID0gSGFtbWVyLlBvaW50ZXJFdmVudC51cGRhdGVQb2ludGVyKGV2ZW50VHlwZSwgZXYpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIG9uIHRoZSBlbmQgd2UgcmVzZXQgZXZlcnl0aGluZ1xuICAgICAgaWYoIWNvdW50X3RvdWNoZXMpIHtcbiAgICAgICAgbGFzdF9tb3ZlX2V2ZW50ID0gbnVsbDtcbiAgICAgICAgZW5hYmxlX2RldGVjdCA9IGZhbHNlO1xuICAgICAgICB0b3VjaF90cmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgSGFtbWVyLlBvaW50ZXJFdmVudC5yZXNldCgpO1xuICAgICAgfVxuICAgIH0se3Bhc3NpdmU6dHJ1ZX0pO1xuICAgIC8vIEZJWE1FIC0gUEFTU0lWRVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIHdlIGhhdmUgZGlmZmVyZW50IGV2ZW50cyBmb3IgZWFjaCBkZXZpY2UvYnJvd3NlclxuICAgKiBkZXRlcm1pbmUgd2hhdCB3ZSBuZWVkIGFuZCBzZXQgdGhlbSBpbiB0aGUgSGFtbWVyLkVWRU5UX1RZUEVTIGNvbnN0YW50XG4gICAqL1xuICBkZXRlcm1pbmVFdmVudFR5cGVzOiBmdW5jdGlvbiBkZXRlcm1pbmVFdmVudFR5cGVzKCkge1xuICAgIC8vIGRldGVybWluZSB0aGUgZXZlbnR0eXBlIHdlIHdhbnQgdG8gc2V0XG4gICAgdmFyIHR5cGVzO1xuXG4gICAgLy8gcG9pbnRlckV2ZW50cyBtYWdpY1xuICAgIGlmKEhhbW1lci5IQVNfUE9JTlRFUkVWRU5UUykge1xuICAgICAgdHlwZXMgPSBIYW1tZXIuUG9pbnRlckV2ZW50LmdldEV2ZW50cygpO1xuICAgIH1cbiAgICAvLyBvbiBBbmRyb2lkLCBpT1MsIGJsYWNrYmVycnksIHdpbmRvd3MgbW9iaWxlIHdlIGRvbnQgd2FudCBhbnkgbW91c2VldmVudHNcbiAgICBlbHNlIGlmKEhhbW1lci5OT19NT1VTRUVWRU5UUykge1xuICAgICAgdHlwZXMgPSBbXG4gICAgICAgICd0b3VjaHN0YXJ0JyxcbiAgICAgICAgJ3RvdWNobW92ZScsXG4gICAgICAgICd0b3VjaGVuZCB0b3VjaGNhbmNlbCddO1xuICAgIH1cbiAgICAvLyBmb3Igbm9uIHBvaW50ZXIgZXZlbnRzIGJyb3dzZXJzIGFuZCBtaXhlZCBicm93c2VycyxcbiAgICAvLyBsaWtlIGNocm9tZSBvbiB3aW5kb3dzOCB0b3VjaCBsYXB0b3BcbiAgICBlbHNlIHtcbiAgICAgIHR5cGVzID0gW1xuICAgICAgICAndG91Y2hzdGFydCBtb3VzZWRvd24nLFxuICAgICAgICAndG91Y2htb3ZlIG1vdXNlbW92ZScsXG4gICAgICAgICd0b3VjaGVuZCB0b3VjaGNhbmNlbCBtb3VzZXVwJ107XG4gICAgfVxuXG4gICAgSGFtbWVyLkVWRU5UX1RZUEVTW0hhbW1lci5FVkVOVF9TVEFSVF0gPSB0eXBlc1swXTtcbiAgICBIYW1tZXIuRVZFTlRfVFlQRVNbSGFtbWVyLkVWRU5UX01PVkVdID0gdHlwZXNbMV07XG4gICAgSGFtbWVyLkVWRU5UX1RZUEVTW0hhbW1lci5FVkVOVF9FTkRdID0gdHlwZXNbMl07XG4gIH0sXG5cblxuICAvKipcbiAgICogY3JlYXRlIHRvdWNobGlzdCBkZXBlbmRpbmcgb24gdGhlIGV2ZW50XG4gICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGV2XG4gICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgIGV2ZW50VHlwZSAgIHVzZWQgYnkgdGhlIGZha2VtdWx0aXRvdWNoIHBsdWdpblxuICAgKi9cbiAgZ2V0VG91Y2hMaXN0OiBmdW5jdGlvbiBnZXRUb3VjaExpc3QoZXYvKiwgZXZlbnRUeXBlKi8pIHtcbiAgICAvLyBnZXQgdGhlIGZha2UgcG9pbnRlckV2ZW50IHRvdWNobGlzdFxuICAgIGlmKEhhbW1lci5IQVNfUE9JTlRFUkVWRU5UUykge1xuICAgICAgcmV0dXJuIEhhbW1lci5Qb2ludGVyRXZlbnQuZ2V0VG91Y2hMaXN0KCk7XG4gICAgfVxuICAgIC8vIGdldCB0aGUgdG91Y2hsaXN0XG4gICAgZWxzZSBpZihldi50b3VjaGVzKSB7XG4gICAgICByZXR1cm4gZXYudG91Y2hlcztcbiAgICB9XG4gICAgLy8gbWFrZSBmYWtlIHRvdWNobGlzdCBmcm9tIG1vdXNlIHBvc2l0aW9uXG4gICAgZWxzZSB7XG4gICAgICBldi5pZGVudGlmaWVyID0gMTtcbiAgICAgIHJldHVybiBbZXZdO1xuICAgIH1cbiAgfSxcblxuXG4gIC8qKlxuICAgKiBjb2xsZWN0IGV2ZW50IGRhdGEgZm9yIEhhbW1lciBqc1xuICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICAgZWxlbWVudFxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgZXZlbnRUeXBlICAgICAgICBsaWtlIEhhbW1lci5FVkVOVF9NT1ZFXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgICAgICBldmVudERhdGFcbiAgICovXG4gIGNvbGxlY3RFdmVudERhdGE6IGZ1bmN0aW9uIGNvbGxlY3RFdmVudERhdGEoZWxlbWVudCwgZXZlbnRUeXBlLCB0b3VjaGVzLCBldikge1xuICAgIC8vIGZpbmQgb3V0IHBvaW50ZXJUeXBlXG4gICAgdmFyIHBvaW50ZXJUeXBlID0gSGFtbWVyLlBPSU5URVJfVE9VQ0g7XG4gICAgaWYoZXYudHlwZS5tYXRjaCgvbW91c2UvKSB8fCBIYW1tZXIuUG9pbnRlckV2ZW50Lm1hdGNoVHlwZShIYW1tZXIuUE9JTlRFUl9NT1VTRSwgZXYpKSB7XG4gICAgICBwb2ludGVyVHlwZSA9IEhhbW1lci5QT0lOVEVSX01PVVNFO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjZW50ZXIgICAgIDogSGFtbWVyLnV0aWxzLmdldENlbnRlcih0b3VjaGVzKSxcbiAgICAgIHRpbWVTdGFtcCAgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgIHRhcmdldCAgICAgOiBldi50YXJnZXQsXG4gICAgICB0b3VjaGVzICAgIDogdG91Y2hlcyxcbiAgICAgIGV2ZW50VHlwZSAgOiBldmVudFR5cGUsXG4gICAgICBwb2ludGVyVHlwZTogcG9pbnRlclR5cGUsXG4gICAgICBzcmNFdmVudCAgIDogZXYsXG5cbiAgICAgIC8qKlxuICAgICAgICogcHJldmVudCB0aGUgYnJvd3NlciBkZWZhdWx0IGFjdGlvbnNcbiAgICAgICAqIG1vc3RseSB1c2VkIHRvIGRpc2FibGUgc2Nyb2xsaW5nIG9mIHRoZSBicm93c2VyXG4gICAgICAgKi9cbiAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5zcmNFdmVudC5wcmV2ZW50TWFuaXB1bGF0aW9uKSB7XG4gICAgICAgICAgdGhpcy5zcmNFdmVudC5wcmV2ZW50TWFuaXB1bGF0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLnNyY0V2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgdGhpcy5zcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIHN0b3AgYnViYmxpbmcgdGhlIGV2ZW50IHVwIHRvIGl0cyBwYXJlbnRzXG4gICAgICAgKi9cbiAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc3JjRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIGltbWVkaWF0ZWx5IHN0b3AgZ2VzdHVyZSBkZXRlY3Rpb25cbiAgICAgICAqIG1pZ2h0IGJlIHVzZWZ1bCBhZnRlciBhIHN3aXBlIHdhcyBkZXRlY3RlZFxuICAgICAgICogQHJldHVybiB7Kn1cbiAgICAgICAqL1xuICAgICAgc3RvcERldGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBIYW1tZXIuZGV0ZWN0aW9uLnN0b3BEZXRlY3QoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5IYW1tZXIuUG9pbnRlckV2ZW50ID0ge1xuICAvKipcbiAgICogaG9sZHMgYWxsIHBvaW50ZXJzXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBwb2ludGVyczoge30sXG5cbiAgLyoqXG4gICAqIGdldCBhIGxpc3Qgb2YgcG9pbnRlcnNcbiAgICogQHJldHVybnMge0FycmF5fSAgICAgdG91Y2hsaXN0XG4gICAqL1xuICBnZXRUb3VjaExpc3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgdG91Y2hsaXN0ID0gW107XG5cbiAgICAvLyB3ZSBjYW4gdXNlIGZvckVhY2ggc2luY2UgcG9pbnRlckV2ZW50cyBvbmx5IGlzIGluIElFMTBcbiAgICBIYW1tZXIudXRpbHMuZWFjaChzZWxmLnBvaW50ZXJzLCBmdW5jdGlvbihwb2ludGVyKXtcbiAgICAgIHRvdWNobGlzdC5wdXNoKHBvaW50ZXIpO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiB0b3VjaGxpc3Q7XG4gIH0sXG5cbiAgLyoqXG4gICAqIHVwZGF0ZSB0aGUgcG9zaXRpb24gb2YgYSBwb2ludGVyXG4gICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgdHlwZSAgICAgICAgICAgICBIYW1tZXIuRVZFTlRfRU5EXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgcG9pbnRlckV2ZW50XG4gICAqL1xuICB1cGRhdGVQb2ludGVyOiBmdW5jdGlvbih0eXBlLCBwb2ludGVyRXZlbnQpIHtcbiAgICBpZih0eXBlID09IEhhbW1lci5FVkVOVF9FTkQpIHtcbiAgICAgIHRoaXMucG9pbnRlcnMgPSB7fTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBwb2ludGVyRXZlbnQuaWRlbnRpZmllciA9IHBvaW50ZXJFdmVudC5wb2ludGVySWQ7XG4gICAgICB0aGlzLnBvaW50ZXJzW3BvaW50ZXJFdmVudC5wb2ludGVySWRdID0gcG9pbnRlckV2ZW50O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnBvaW50ZXJzKS5sZW5ndGg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGNoZWNrIGlmIGV2IG1hdGNoZXMgcG9pbnRlcnR5cGVcbiAgICogQHBhcmFtICAge1N0cmluZ30gICAgICAgIHBvaW50ZXJUeXBlICAgICBIYW1tZXIuUE9JTlRFUl9NT1VTRVxuICAgKiBAcGFyYW0gICB7UG9pbnRlckV2ZW50fSAgZXZcbiAgICovXG4gIG1hdGNoVHlwZTogZnVuY3Rpb24ocG9pbnRlclR5cGUsIGV2KSB7XG4gICAgaWYoIWV2LnBvaW50ZXJUeXBlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHB0ID0gZXYucG9pbnRlclR5cGUsXG4gICAgICB0eXBlcyA9IHt9O1xuICAgIHR5cGVzW0hhbW1lci5QT0lOVEVSX01PVVNFXSA9IChwdCA9PT0gZXYuTVNQT0lOVEVSX1RZUEVfTU9VU0UgfHwgcHQgPT09IEhhbW1lci5QT0lOVEVSX01PVVNFKTtcbiAgICB0eXBlc1tIYW1tZXIuUE9JTlRFUl9UT1VDSF0gPSAocHQgPT09IGV2Lk1TUE9JTlRFUl9UWVBFX1RPVUNIIHx8IHB0ID09PSBIYW1tZXIuUE9JTlRFUl9UT1VDSCk7XG4gICAgdHlwZXNbSGFtbWVyLlBPSU5URVJfUEVOXSA9IChwdCA9PT0gZXYuTVNQT0lOVEVSX1RZUEVfUEVOIHx8IHB0ID09PSBIYW1tZXIuUE9JTlRFUl9QRU4pO1xuICAgIHJldHVybiB0eXBlc1twb2ludGVyVHlwZV07XG4gIH0sXG5cblxuICAvKipcbiAgICogZ2V0IGV2ZW50c1xuICAgKi9cbiAgZ2V0RXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ3BvaW50ZXJkb3duIE1TUG9pbnRlckRvd24nLFxuICAgICAgJ3BvaW50ZXJtb3ZlIE1TUG9pbnRlck1vdmUnLFxuICAgICAgJ3BvaW50ZXJ1cCBwb2ludGVyY2FuY2VsIE1TUG9pbnRlclVwIE1TUG9pbnRlckNhbmNlbCdcbiAgICBdO1xuICB9LFxuXG4gIC8qKlxuICAgKiByZXNldCB0aGUgbGlzdFxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucG9pbnRlcnMgPSB7fTtcbiAgfVxufTtcblxuXG5IYW1tZXIuZGV0ZWN0aW9uID0ge1xuICAvLyBjb250YWlucyBhbGwgcmVnaXN0cmVkIEhhbW1lci5nZXN0dXJlcyBpbiB0aGUgY29ycmVjdCBvcmRlclxuICBnZXN0dXJlczogW10sXG5cbiAgLy8gZGF0YSBvZiB0aGUgY3VycmVudCBIYW1tZXIuZ2VzdHVyZSBkZXRlY3Rpb24gc2Vzc2lvblxuICBjdXJyZW50IDogbnVsbCxcblxuICAvLyB0aGUgcHJldmlvdXMgSGFtbWVyLmdlc3R1cmUgc2Vzc2lvbiBkYXRhXG4gIC8vIGlzIGEgZnVsbCBjbG9uZSBvZiB0aGUgcHJldmlvdXMgZ2VzdHVyZS5jdXJyZW50IG9iamVjdFxuICBwcmV2aW91czogbnVsbCxcblxuICAvLyB3aGVuIHRoaXMgYmVjb21lcyB0cnVlLCBubyBnZXN0dXJlcyBhcmUgZmlyZWRcbiAgc3RvcHBlZCA6IGZhbHNlLFxuXG5cbiAgLyoqXG4gICAqIHN0YXJ0IEhhbW1lci5nZXN0dXJlIGRldGVjdGlvblxuICAgKiBAcGFyYW0gICB7SGFtbWVyLkluc3RhbmNlfSAgIGluc3RcbiAgICogQHBhcmFtICAge09iamVjdH0gICAgICAgICAgICBldmVudERhdGFcbiAgICovXG4gIHN0YXJ0RGV0ZWN0OiBmdW5jdGlvbiBzdGFydERldGVjdChpbnN0LCBldmVudERhdGEpIHtcbiAgICAvLyBhbHJlYWR5IGJ1c3kgd2l0aCBhIEhhbW1lci5nZXN0dXJlIGRldGVjdGlvbiBvbiBhbiBlbGVtZW50XG4gICAgaWYodGhpcy5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdG9wcGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB7XG4gICAgICBpbnN0ICAgICAgOiBpbnN0LCAvLyByZWZlcmVuY2UgdG8gSGFtbWVySW5zdGFuY2Ugd2UncmUgd29ya2luZyBmb3JcbiAgICAgIHN0YXJ0RXZlbnQ6IEhhbW1lci51dGlscy5leHRlbmQoe30sIGV2ZW50RGF0YSksIC8vIHN0YXJ0IGV2ZW50RGF0YSBmb3IgZGlzdGFuY2VzLCB0aW1pbmcgZXRjXG4gICAgICBsYXN0RXZlbnQgOiBmYWxzZSwgLy8gbGFzdCBldmVudERhdGFcbiAgICAgIG5hbWUgICAgICA6ICcnIC8vIGN1cnJlbnQgZ2VzdHVyZSB3ZSdyZSBpbi9kZXRlY3RlZCwgY2FuIGJlICd0YXAnLCAnaG9sZCcgZXRjXG4gICAgfTtcblxuICAgIHRoaXMuZGV0ZWN0KGV2ZW50RGF0YSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogSGFtbWVyLmdlc3R1cmUgZGV0ZWN0aW9uXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGV2ZW50RGF0YVxuICAgKi9cbiAgZGV0ZWN0OiBmdW5jdGlvbiBkZXRlY3QoZXZlbnREYXRhKSB7XG4gICAgaWYoIXRoaXMuY3VycmVudCB8fCB0aGlzLnN0b3BwZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBleHRlbmQgZXZlbnQgZGF0YSB3aXRoIGNhbGN1bGF0aW9ucyBhYm91dCBzY2FsZSwgZGlzdGFuY2UgZXRjXG4gICAgZXZlbnREYXRhID0gdGhpcy5leHRlbmRFdmVudERhdGEoZXZlbnREYXRhKTtcblxuICAgIC8vIGluc3RhbmNlIG9wdGlvbnNcbiAgICB2YXIgaW5zdF9vcHRpb25zID0gdGhpcy5jdXJyZW50Lmluc3Qub3B0aW9ucztcblxuICAgIC8vIGNhbGwgSGFtbWVyLmdlc3R1cmUgaGFuZGxlcnNcbiAgICBIYW1tZXIudXRpbHMuZWFjaCh0aGlzLmdlc3R1cmVzLCBmdW5jdGlvbihnZXN0dXJlKSB7XG4gICAgICAvLyBvbmx5IHdoZW4gdGhlIGluc3RhbmNlIG9wdGlvbnMgaGF2ZSBlbmFibGVkIHRoaXMgZ2VzdHVyZVxuICAgICAgaWYoIXRoaXMuc3RvcHBlZCAmJiBpbnN0X29wdGlvbnNbZ2VzdHVyZS5uYW1lXSAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gaWYgYSBoYW5kbGVyIHJldHVybnMgZmFsc2UsIHdlIHN0b3Agd2l0aCB0aGUgZGV0ZWN0aW9uXG4gICAgICAgIGlmKGdlc3R1cmUuaGFuZGxlci5jYWxsKGdlc3R1cmUsIGV2ZW50RGF0YSwgdGhpcy5jdXJyZW50Lmluc3QpID09PSBmYWxzZSkge1xuICAgICAgICAgIHRoaXMuc3RvcERldGVjdCgpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgLy8gc3RvcmUgYXMgcHJldmlvdXMgZXZlbnQgZXZlbnRcbiAgICBpZih0aGlzLmN1cnJlbnQpIHtcbiAgICAgIHRoaXMuY3VycmVudC5sYXN0RXZlbnQgPSBldmVudERhdGE7XG4gICAgfVxuXG4gICAgLy8gZW5kZXZlbnQsIGJ1dCBub3QgdGhlIGxhc3QgdG91Y2gsIHNvIGRvbnQgc3RvcFxuICAgIGlmKGV2ZW50RGF0YS5ldmVudFR5cGUgPT0gSGFtbWVyLkVWRU5UX0VORCAmJiAhZXZlbnREYXRhLnRvdWNoZXMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5zdG9wRGV0ZWN0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50RGF0YTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBjbGVhciB0aGUgSGFtbWVyLmdlc3R1cmUgdmFyc1xuICAgKiB0aGlzIGlzIGNhbGxlZCBvbiBlbmREZXRlY3QsIGJ1dCBjYW4gYWxzbyBiZSB1c2VkIHdoZW4gYSBmaW5hbCBIYW1tZXIuZ2VzdHVyZSBoYXMgYmVlbiBkZXRlY3RlZFxuICAgKiB0byBzdG9wIG90aGVyIEhhbW1lci5nZXN0dXJlcyBmcm9tIGJlaW5nIGZpcmVkXG4gICAqL1xuICBzdG9wRGV0ZWN0OiBmdW5jdGlvbiBzdG9wRGV0ZWN0KCkge1xuICAgIC8vIGNsb25lIGN1cnJlbnQgZGF0YSB0byB0aGUgc3RvcmUgYXMgdGhlIHByZXZpb3VzIGdlc3R1cmVcbiAgICAvLyB1c2VkIGZvciB0aGUgZG91YmxlIHRhcCBnZXN0dXJlLCBzaW5jZSB0aGlzIGlzIGFuIG90aGVyIGdlc3R1cmUgZGV0ZWN0IHNlc3Npb25cbiAgICB0aGlzLnByZXZpb3VzID0gSGFtbWVyLnV0aWxzLmV4dGVuZCh7fSwgdGhpcy5jdXJyZW50KTtcblxuICAgIC8vIHJlc2V0IHRoZSBjdXJyZW50XG4gICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcblxuICAgIC8vIHN0b3BwZWQhXG4gICAgdGhpcy5zdG9wcGVkID0gdHJ1ZTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBleHRlbmQgZXZlbnREYXRhIGZvciBIYW1tZXIuZ2VzdHVyZXNcbiAgICogQHBhcmFtICAge09iamVjdH0gICBldlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAgIGV2XG4gICAqL1xuICBleHRlbmRFdmVudERhdGE6IGZ1bmN0aW9uIGV4dGVuZEV2ZW50RGF0YShldikge1xuICAgIHZhciBzdGFydEV2ID0gdGhpcy5jdXJyZW50LnN0YXJ0RXZlbnQ7XG5cbiAgICAvLyBpZiB0aGUgdG91Y2hlcyBjaGFuZ2UsIHNldCB0aGUgbmV3IHRvdWNoZXMgb3ZlciB0aGUgc3RhcnRFdmVudCB0b3VjaGVzXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRvdWNoZXZlbnRzIGRvbid0IGhhdmUgYWxsIHRoZSB0b3VjaGVzIG9uIHRvdWNoc3RhcnQsIG9yIHRoZVxuICAgIC8vIHVzZXIgbXVzdCBwbGFjZSBoaXMgZmluZ2VycyBhdCB0aGUgRVhBQ1Qgc2FtZSB0aW1lIG9uIHRoZSBzY3JlZW4sIHdoaWNoIGlzIG5vdCByZWFsaXN0aWNcbiAgICAvLyBidXQsIHNvbWV0aW1lcyBpdCBoYXBwZW5zIHRoYXQgYm90aCBmaW5nZXJzIGFyZSB0b3VjaGluZyBhdCB0aGUgRVhBQ1Qgc2FtZSB0aW1lXG4gICAgaWYoc3RhcnRFdiAmJiAoZXYudG91Y2hlcy5sZW5ndGggIT0gc3RhcnRFdi50b3VjaGVzLmxlbmd0aCB8fCBldi50b3VjaGVzID09PSBzdGFydEV2LnRvdWNoZXMpKSB7XG4gICAgICAvLyBleHRlbmQgMSBsZXZlbCBkZWVwIHRvIGdldCB0aGUgdG91Y2hsaXN0IHdpdGggdGhlIHRvdWNoIG9iamVjdHNcbiAgICAgIHN0YXJ0RXYudG91Y2hlcyA9IFtdO1xuICAgICAgSGFtbWVyLnV0aWxzLmVhY2goZXYudG91Y2hlcywgZnVuY3Rpb24odG91Y2gpIHtcbiAgICAgICAgc3RhcnRFdi50b3VjaGVzLnB1c2goSGFtbWVyLnV0aWxzLmV4dGVuZCh7fSwgdG91Y2gpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBkZWx0YV90aW1lID0gZXYudGltZVN0YW1wIC0gc3RhcnRFdi50aW1lU3RhbXBcbiAgICAgICwgZGVsdGFfeCA9IGV2LmNlbnRlci5wYWdlWCAtIHN0YXJ0RXYuY2VudGVyLnBhZ2VYXG4gICAgICAsIGRlbHRhX3kgPSBldi5jZW50ZXIucGFnZVkgLSBzdGFydEV2LmNlbnRlci5wYWdlWVxuICAgICAgLCB2ZWxvY2l0eSA9IEhhbW1lci51dGlscy5nZXRWZWxvY2l0eShkZWx0YV90aW1lLCBkZWx0YV94LCBkZWx0YV95KVxuICAgICAgLCBpbnRlcmltQW5nbGVcbiAgICAgICwgaW50ZXJpbURpcmVjdGlvbjtcblxuICAgIC8vIGVuZCBldmVudHMgKGUuZy4gZHJhZ2VuZCkgZG9uJ3QgaGF2ZSB1c2VmdWwgdmFsdWVzIGZvciBpbnRlcmltRGlyZWN0aW9uICYgaW50ZXJpbUFuZ2xlXG4gICAgLy8gYmVjYXVzZSB0aGUgcHJldmlvdXMgZXZlbnQgaGFzIGV4YWN0bHkgdGhlIHNhbWUgY29vcmRpbmF0ZXNcbiAgICAvLyBzbyBmb3IgZW5kIGV2ZW50cywgdGFrZSB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGludGVyaW1EaXJlY3Rpb24gJiBpbnRlcmltQW5nbGVcbiAgICAvLyBpbnN0ZWFkIG9mIHJlY2FsY3VsYXRpbmcgdGhlbSBhbmQgZ2V0dGluZyBhIHNwdXJpb3VzICcwJ1xuICAgIGlmKGV2LmV2ZW50VHlwZSA9PT0gJ2VuZCcpIHtcbiAgICAgIGludGVyaW1BbmdsZSA9IHRoaXMuY3VycmVudC5sYXN0RXZlbnQgJiYgdGhpcy5jdXJyZW50Lmxhc3RFdmVudC5pbnRlcmltQW5nbGU7XG4gICAgICBpbnRlcmltRGlyZWN0aW9uID0gdGhpcy5jdXJyZW50Lmxhc3RFdmVudCAmJiB0aGlzLmN1cnJlbnQubGFzdEV2ZW50LmludGVyaW1EaXJlY3Rpb247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaW50ZXJpbUFuZ2xlID0gdGhpcy5jdXJyZW50Lmxhc3RFdmVudCAmJiBIYW1tZXIudXRpbHMuZ2V0QW5nbGUodGhpcy5jdXJyZW50Lmxhc3RFdmVudC5jZW50ZXIsIGV2LmNlbnRlcik7XG4gICAgICBpbnRlcmltRGlyZWN0aW9uID0gdGhpcy5jdXJyZW50Lmxhc3RFdmVudCAmJiBIYW1tZXIudXRpbHMuZ2V0RGlyZWN0aW9uKHRoaXMuY3VycmVudC5sYXN0RXZlbnQuY2VudGVyLCBldi5jZW50ZXIpO1xuICAgIH1cblxuICAgIEhhbW1lci51dGlscy5leHRlbmQoZXYsIHtcbiAgICAgIGRlbHRhVGltZTogZGVsdGFfdGltZSxcblxuICAgICAgZGVsdGFYOiBkZWx0YV94LFxuICAgICAgZGVsdGFZOiBkZWx0YV95LFxuXG4gICAgICB2ZWxvY2l0eVg6IHZlbG9jaXR5LngsXG4gICAgICB2ZWxvY2l0eVk6IHZlbG9jaXR5LnksXG5cbiAgICAgIGRpc3RhbmNlOiBIYW1tZXIudXRpbHMuZ2V0RGlzdGFuY2Uoc3RhcnRFdi5jZW50ZXIsIGV2LmNlbnRlciksXG5cbiAgICAgIGFuZ2xlOiBIYW1tZXIudXRpbHMuZ2V0QW5nbGUoc3RhcnRFdi5jZW50ZXIsIGV2LmNlbnRlciksXG4gICAgICBpbnRlcmltQW5nbGU6IGludGVyaW1BbmdsZSxcblxuICAgICAgZGlyZWN0aW9uOiBIYW1tZXIudXRpbHMuZ2V0RGlyZWN0aW9uKHN0YXJ0RXYuY2VudGVyLCBldi5jZW50ZXIpLFxuICAgICAgaW50ZXJpbURpcmVjdGlvbjogaW50ZXJpbURpcmVjdGlvbixcblxuICAgICAgc2NhbGU6IEhhbW1lci51dGlscy5nZXRTY2FsZShzdGFydEV2LnRvdWNoZXMsIGV2LnRvdWNoZXMpLFxuICAgICAgcm90YXRpb246IEhhbW1lci51dGlscy5nZXRSb3RhdGlvbihzdGFydEV2LnRvdWNoZXMsIGV2LnRvdWNoZXMpLFxuXG4gICAgICBzdGFydEV2ZW50OiBzdGFydEV2XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXY7XG4gIH0sXG5cblxuICAvKipcbiAgICogcmVnaXN0ZXIgbmV3IGdlc3R1cmVcbiAgICogQHBhcmFtICAge09iamVjdH0gICAgZ2VzdHVyZSBvYmplY3QsIHNlZSBnZXN0dXJlcy5qcyBmb3IgZG9jdW1lbnRhdGlvblxuICAgKiBAcmV0dXJucyB7QXJyYXl9ICAgICBnZXN0dXJlc1xuICAgKi9cbiAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGdlc3R1cmUpIHtcbiAgICAvLyBhZGQgYW4gZW5hYmxlIGdlc3R1cmUgb3B0aW9ucyBpZiB0aGVyZSBpcyBubyBnaXZlblxuICAgIHZhciBvcHRpb25zID0gZ2VzdHVyZS5kZWZhdWx0cyB8fCB7fTtcbiAgICBpZihvcHRpb25zW2dlc3R1cmUubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9uc1tnZXN0dXJlLm5hbWVdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBleHRlbmQgSGFtbWVyIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHRoZSBIYW1tZXIuZ2VzdHVyZSBvcHRpb25zXG4gICAgSGFtbWVyLnV0aWxzLmV4dGVuZChIYW1tZXIuZGVmYXVsdHMsIG9wdGlvbnMsIHRydWUpO1xuXG4gICAgLy8gc2V0IGl0cyBpbmRleFxuICAgIGdlc3R1cmUuaW5kZXggPSBnZXN0dXJlLmluZGV4IHx8IDEwMDA7XG5cbiAgICAvLyBhZGQgSGFtbWVyLmdlc3R1cmUgdG8gdGhlIGxpc3RcbiAgICB0aGlzLmdlc3R1cmVzLnB1c2goZ2VzdHVyZSk7XG5cbiAgICAvLyBzb3J0IHRoZSBsaXN0IGJ5IGluZGV4XG4gICAgdGhpcy5nZXN0dXJlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGlmKGEuaW5kZXggPCBiLmluZGV4KSB7IHJldHVybiAtMTsgfVxuICAgICAgaWYoYS5pbmRleCA+IGIuaW5kZXgpIHsgcmV0dXJuIDE7IH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2VzdHVyZXM7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBEcmFnXG4gKiBNb3ZlIHdpdGggeCBmaW5nZXJzIChkZWZhdWx0IDEpIGFyb3VuZCBvbiB0aGUgcGFnZS4gQmxvY2tpbmcgdGhlIHNjcm9sbGluZyB3aGVuXG4gKiBtb3ZpbmcgbGVmdCBhbmQgcmlnaHQgaXMgYSBnb29kIHByYWN0aWNlLiBXaGVuIGFsbCB0aGUgZHJhZyBldmVudHMgYXJlIGJsb2NraW5nXG4gKiB5b3UgZGlzYWJsZSBzY3JvbGxpbmcgb24gdGhhdCBhcmVhLlxuICogQGV2ZW50cyAgZHJhZywgZHJhcGxlZnQsIGRyYWdyaWdodCwgZHJhZ3VwLCBkcmFnZG93blxuICovXG5IYW1tZXIuZ2VzdHVyZXMuRHJhZyA9IHtcbiAgbmFtZSAgICAgOiAnZHJhZycsXG4gIGluZGV4ICAgIDogNTAsXG4gIGRlZmF1bHRzIDoge1xuICAgIGRyYWdfbWluX2Rpc3RhbmNlICAgICAgICAgICAgOiAxMCxcblxuICAgIC8vIFNldCBjb3JyZWN0X2Zvcl9kcmFnX21pbl9kaXN0YW5jZSB0byB0cnVlIHRvIG1ha2UgdGhlIHN0YXJ0aW5nIHBvaW50IG9mIHRoZSBkcmFnXG4gICAgLy8gYmUgY2FsY3VsYXRlZCBmcm9tIHdoZXJlIHRoZSBkcmFnIHdhcyB0cmlnZ2VyZWQsIG5vdCBmcm9tIHdoZXJlIHRoZSB0b3VjaCBzdGFydGVkLlxuICAgIC8vIFVzZWZ1bCB0byBhdm9pZCBhIGplcmstc3RhcnRpbmcgZHJhZywgd2hpY2ggY2FuIG1ha2UgZmluZS1hZGp1c3RtZW50c1xuICAgIC8vIHRocm91Z2ggZHJhZ2dpbmcgZGlmZmljdWx0LCBhbmQgYmUgdmlzdWFsbHkgdW5hcHBlYWxpbmcuXG4gICAgY29ycmVjdF9mb3JfZHJhZ19taW5fZGlzdGFuY2U6IHRydWUsXG5cbiAgICAvLyBzZXQgMCBmb3IgdW5saW1pdGVkLCBidXQgdGhpcyBjYW4gY29uZmxpY3Qgd2l0aCB0cmFuc2Zvcm1cbiAgICBkcmFnX21heF90b3VjaGVzICAgICAgICAgICAgIDogMSxcblxuICAgIC8vIHByZXZlbnQgZGVmYXVsdCBicm93c2VyIGJlaGF2aW9yIHdoZW4gZHJhZ2dpbmcgb2NjdXJzXG4gICAgLy8gYmUgY2FyZWZ1bCB3aXRoIGl0LCBpdCBtYWtlcyB0aGUgZWxlbWVudCBhIGJsb2NraW5nIGVsZW1lbnRcbiAgICAvLyB3aGVuIHlvdSBhcmUgdXNpbmcgdGhlIGRyYWcgZ2VzdHVyZSwgaXQgaXMgYSBnb29kIHByYWN0aWNlIHRvIHNldCB0aGlzIHRydWVcbiAgICBkcmFnX2Jsb2NrX2hvcml6b250YWwgICAgICAgIDogZmFsc2UsXG4gICAgZHJhZ19ibG9ja192ZXJ0aWNhbCAgICAgICAgICA6IGZhbHNlLFxuXG4gICAgLy8gZHJhZ19sb2NrX3RvX2F4aXMga2VlcHMgdGhlIGRyYWcgZ2VzdHVyZSBvbiB0aGUgYXhpcyB0aGF0IGl0IHN0YXJ0ZWQgb24sXG4gICAgLy8gSXQgZGlzYWxsb3dzIHZlcnRpY2FsIGRpcmVjdGlvbnMgaWYgdGhlIGluaXRpYWwgZGlyZWN0aW9uIHdhcyBob3Jpem9udGFsLCBhbmQgdmljZSB2ZXJzYS5cbiAgICBkcmFnX2xvY2tfdG9fYXhpcyAgICAgICAgICAgIDogZmFsc2UsXG5cbiAgICAvLyBkcmFnIGxvY2sgb25seSBraWNrcyBpbiB3aGVuIGRpc3RhbmNlID4gZHJhZ19sb2NrX21pbl9kaXN0YW5jZVxuICAgIC8vIFRoaXMgd2F5LCBsb2NraW5nIG9jY3VycyBvbmx5IHdoZW4gdGhlIGRpc3RhbmNlIGhhcyBiZWNvbWUgbGFyZ2UgZW5vdWdoIHRvIHJlbGlhYmx5IGRldGVybWluZSB0aGUgZGlyZWN0aW9uXG4gICAgZHJhZ19sb2NrX21pbl9kaXN0YW5jZSAgICAgICA6IDI1XG4gIH0sXG5cbiAgdHJpZ2dlcmVkOiBmYWxzZSxcbiAgaGFuZGxlciAgOiBmdW5jdGlvbiBkcmFnR2VzdHVyZShldiwgaW5zdCkge1xuICAgIC8vIGN1cnJlbnQgZ2VzdHVyZSBpc250IGRyYWcsIGJ1dCBkcmFnZ2VkIGlzIHRydWVcbiAgICAvLyB0aGlzIG1lYW5zIGFuIG90aGVyIGdlc3R1cmUgaXMgYnVzeS4gbm93IGNhbGwgZHJhZ2VuZFxuICAgIGlmKEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5uYW1lICE9IHRoaXMubmFtZSAmJiB0aGlzLnRyaWdnZXJlZCkge1xuICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSArICdlbmQnLCBldik7XG4gICAgICB0aGlzLnRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIG1heCB0b3VjaGVzXG4gICAgaWYoaW5zdC5vcHRpb25zLmRyYWdfbWF4X3RvdWNoZXMgPiAwICYmXG4gICAgICBldi50b3VjaGVzLmxlbmd0aCA+IGluc3Qub3B0aW9ucy5kcmFnX21heF90b3VjaGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoKGV2LmV2ZW50VHlwZSkge1xuICAgICAgY2FzZSBIYW1tZXIuRVZFTlRfU1RBUlQ6XG4gICAgICAgIHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEhhbW1lci5FVkVOVF9NT1ZFOlxuICAgICAgICAvLyB3aGVuIHRoZSBkaXN0YW5jZSB3ZSBtb3ZlZCBpcyB0b28gc21hbGwgd2Ugc2tpcCB0aGlzIGdlc3R1cmVcbiAgICAgICAgLy8gb3Igd2UgY2FuIGJlIGFscmVhZHkgaW4gZHJhZ2dpbmdcbiAgICAgICAgaWYoZXYuZGlzdGFuY2UgPCBpbnN0Lm9wdGlvbnMuZHJhZ19taW5fZGlzdGFuY2UgJiZcbiAgICAgICAgICBIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQubmFtZSAhPSB0aGlzLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSBhcmUgZHJhZ2dpbmchXG4gICAgICAgIGlmKEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5uYW1lICE9IHRoaXMubmFtZSkge1xuICAgICAgICAgIEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5uYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICAgIGlmKGluc3Qub3B0aW9ucy5jb3JyZWN0X2Zvcl9kcmFnX21pbl9kaXN0YW5jZSAmJiBldi5kaXN0YW5jZSA+IDApIHtcbiAgICAgICAgICAgIC8vIFdoZW4gYSBkcmFnIGlzIHRyaWdnZXJlZCwgc2V0IHRoZSBldmVudCBjZW50ZXIgdG8gZHJhZ19taW5fZGlzdGFuY2UgcGl4ZWxzIGZyb20gdGhlIG9yaWdpbmFsIGV2ZW50IGNlbnRlci5cbiAgICAgICAgICAgIC8vIFdpdGhvdXQgdGhpcyBjb3JyZWN0aW9uLCB0aGUgZHJhZ2dlZCBkaXN0YW5jZSB3b3VsZCBqdW1wc3RhcnQgYXQgZHJhZ19taW5fZGlzdGFuY2UgcGl4ZWxzIGluc3RlYWQgb2YgYXQgMC5cbiAgICAgICAgICAgIC8vIEl0IG1pZ2h0IGJlIHVzZWZ1bCB0byBzYXZlIHRoZSBvcmlnaW5hbCBzdGFydCBwb2ludCBzb21ld2hlcmVcbiAgICAgICAgICAgIHZhciBmYWN0b3IgPSBNYXRoLmFicyhpbnN0Lm9wdGlvbnMuZHJhZ19taW5fZGlzdGFuY2UgLyBldi5kaXN0YW5jZSk7XG4gICAgICAgICAgICBIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQuc3RhcnRFdmVudC5jZW50ZXIucGFnZVggKz0gZXYuZGVsdGFYICogZmFjdG9yO1xuICAgICAgICAgICAgSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50LnN0YXJ0RXZlbnQuY2VudGVyLnBhZ2VZICs9IGV2LmRlbHRhWSAqIGZhY3RvcjtcblxuICAgICAgICAgICAgLy8gcmVjYWxjdWxhdGUgZXZlbnQgZGF0YSB1c2luZyBuZXcgc3RhcnQgcG9pbnRcbiAgICAgICAgICAgIGV2ID0gSGFtbWVyLmRldGVjdGlvbi5leHRlbmRFdmVudERhdGEoZXYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxvY2sgZHJhZyB0byBheGlzP1xuICAgICAgICBpZihIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQubGFzdEV2ZW50LmRyYWdfbG9ja2VkX3RvX2F4aXMgfHwgKGluc3Qub3B0aW9ucy5kcmFnX2xvY2tfdG9fYXhpcyAmJiBpbnN0Lm9wdGlvbnMuZHJhZ19sb2NrX21pbl9kaXN0YW5jZSA8PSBldi5kaXN0YW5jZSkpIHtcbiAgICAgICAgICBldi5kcmFnX2xvY2tlZF90b19heGlzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGFzdF9kaXJlY3Rpb24gPSBIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQubGFzdEV2ZW50LmRpcmVjdGlvbjtcbiAgICAgICAgaWYoZXYuZHJhZ19sb2NrZWRfdG9fYXhpcyAmJiBsYXN0X2RpcmVjdGlvbiAhPT0gZXYuZGlyZWN0aW9uKSB7XG4gICAgICAgICAgLy8ga2VlcCBkaXJlY3Rpb24gb24gdGhlIGF4aXMgdGhhdCB0aGUgZHJhZyBnZXN0dXJlIHN0YXJ0ZWQgb25cbiAgICAgICAgICBpZihIYW1tZXIudXRpbHMuaXNWZXJ0aWNhbChsYXN0X2RpcmVjdGlvbikpIHtcbiAgICAgICAgICAgIGV2LmRpcmVjdGlvbiA9IChldi5kZWx0YVkgPCAwKSA/IEhhbW1lci5ESVJFQ1RJT05fVVAgOiBIYW1tZXIuRElSRUNUSU9OX0RPV047XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXYuZGlyZWN0aW9uID0gKGV2LmRlbHRhWCA8IDApID8gSGFtbWVyLkRJUkVDVElPTl9MRUZUIDogSGFtbWVyLkRJUkVDVElPTl9SSUdIVDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJzdCB0aW1lLCB0cmlnZ2VyIGRyYWdzdGFydCBldmVudFxuICAgICAgICBpZighdGhpcy50cmlnZ2VyZWQpIHtcbiAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lICsgJ3N0YXJ0JywgZXYpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyaWdnZXIgbm9ybWFsIGV2ZW50XG4gICAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUsIGV2KTtcblxuICAgICAgICAvLyBkaXJlY3Rpb24gZXZlbnQsIGxpa2UgZHJhZ2Rvd25cbiAgICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSArIGV2LmRpcmVjdGlvbiwgZXYpO1xuXG4gICAgICAgIC8vIGJsb2NrIHRoZSBicm93c2VyIGV2ZW50c1xuICAgICAgICBpZigoaW5zdC5vcHRpb25zLmRyYWdfYmxvY2tfdmVydGljYWwgJiYgSGFtbWVyLnV0aWxzLmlzVmVydGljYWwoZXYuZGlyZWN0aW9uKSkgfHxcbiAgICAgICAgICAoaW5zdC5vcHRpb25zLmRyYWdfYmxvY2tfaG9yaXpvbnRhbCAmJiAhSGFtbWVyLnV0aWxzLmlzVmVydGljYWwoZXYuZGlyZWN0aW9uKSkpIHtcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEhhbW1lci5FVkVOVF9FTkQ6XG4gICAgICAgIC8vIHRyaWdnZXIgZHJhZ2VuZFxuICAgICAgICBpZih0aGlzLnRyaWdnZXJlZCkge1xuICAgICAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUgKyAnZW5kJywgZXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhvbGRcbiAqIFRvdWNoIHN0YXlzIGF0IHRoZSBzYW1lIHBsYWNlIGZvciB4IHRpbWVcbiAqIEBldmVudHMgIGhvbGRcbiAqL1xuSGFtbWVyLmdlc3R1cmVzLkhvbGQgPSB7XG4gIG5hbWUgICAgOiAnaG9sZCcsXG4gIGluZGV4ICAgOiAxMCxcbiAgZGVmYXVsdHM6IHtcbiAgICBob2xkX3RpbWVvdXQgIDogNTAwLFxuICAgIGhvbGRfdGhyZXNob2xkOiAxXG4gIH0sXG4gIHRpbWVyICAgOiBudWxsLFxuICBoYW5kbGVyIDogZnVuY3Rpb24gaG9sZEdlc3R1cmUoZXYsIGluc3QpIHtcbiAgICBzd2l0Y2goZXYuZXZlbnRUeXBlKSB7XG4gICAgICBjYXNlIEhhbW1lci5FVkVOVF9TVEFSVDpcbiAgICAgICAgLy8gY2xlYXIgYW55IHJ1bm5pbmcgdGltZXJzXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcblxuICAgICAgICAvLyBzZXQgdGhlIGdlc3R1cmUgc28gd2UgY2FuIGNoZWNrIGluIHRoZSB0aW1lb3V0IGlmIGl0IHN0aWxsIGlzXG4gICAgICAgIEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5uYW1lID0gdGhpcy5uYW1lO1xuXG4gICAgICAgIC8vIHNldCB0aW1lciBhbmQgaWYgYWZ0ZXIgdGhlIHRpbWVvdXQgaXQgc3RpbGwgaXMgaG9sZCxcbiAgICAgICAgLy8gd2UgdHJpZ2dlciB0aGUgaG9sZCBldmVudFxuICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZihIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQubmFtZSA9PSAnaG9sZCcpIHtcbiAgICAgICAgICAgIGluc3QudHJpZ2dlcignaG9sZCcsIGV2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGluc3Qub3B0aW9ucy5ob2xkX3RpbWVvdXQpO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gd2hlbiB5b3UgbW92ZSBvciBlbmQgd2UgY2xlYXIgdGhlIHRpbWVyXG4gICAgICBjYXNlIEhhbW1lci5FVkVOVF9NT1ZFOlxuICAgICAgICBpZihldi5kaXN0YW5jZSA+IGluc3Qub3B0aW9ucy5ob2xkX3RocmVzaG9sZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBIYW1tZXIuRVZFTlRfRU5EOlxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBSZWxlYXNlXG4gKiBDYWxsZWQgYXMgbGFzdCwgdGVsbHMgdGhlIHVzZXIgaGFzIHJlbGVhc2VkIHRoZSBzY3JlZW5cbiAqIEBldmVudHMgIHJlbGVhc2VcbiAqL1xuSGFtbWVyLmdlc3R1cmVzLlJlbGVhc2UgPSB7XG4gIG5hbWUgICA6ICdyZWxlYXNlJyxcbiAgaW5kZXggIDogSW5maW5pdHksXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIHJlbGVhc2VHZXN0dXJlKGV2LCBpbnN0KSB7XG4gICAgaWYoZXYuZXZlbnRUeXBlID09IEhhbW1lci5FVkVOVF9FTkQpIHtcbiAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUsIGV2KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogU3dpcGVcbiAqIHRyaWdnZXJzIHN3aXBlIGV2ZW50cyB3aGVuIHRoZSBlbmQgdmVsb2NpdHkgaXMgYWJvdmUgdGhlIHRocmVzaG9sZFxuICogQGV2ZW50cyAgc3dpcGUsIHN3aXBlbGVmdCwgc3dpcGVyaWdodCwgc3dpcGV1cCwgc3dpcGVkb3duXG4gKi9cbkhhbW1lci5nZXN0dXJlcy5Td2lwZSA9IHtcbiAgbmFtZSAgICA6ICdzd2lwZScsXG4gIGluZGV4ICAgOiA0MCxcbiAgZGVmYXVsdHM6IHtcbiAgICAvLyBzZXQgMCBmb3IgdW5saW1pdGVkLCBidXQgdGhpcyBjYW4gY29uZmxpY3Qgd2l0aCB0cmFuc2Zvcm1cbiAgICBzd2lwZV9taW5fdG91Y2hlczogMSxcbiAgICBzd2lwZV9tYXhfdG91Y2hlczogMSxcbiAgICBzd2lwZV92ZWxvY2l0eSAgIDogMC43XG4gIH0sXG4gIGhhbmRsZXIgOiBmdW5jdGlvbiBzd2lwZUdlc3R1cmUoZXYsIGluc3QpIHtcbiAgICBpZihldi5ldmVudFR5cGUgPT0gSGFtbWVyLkVWRU5UX0VORCkge1xuICAgICAgLy8gbWF4IHRvdWNoZXNcbiAgICAgIGlmKGluc3Qub3B0aW9ucy5zd2lwZV9tYXhfdG91Y2hlcyA+IDAgJiZcbiAgICAgICAgZXYudG91Y2hlcy5sZW5ndGggPCBpbnN0Lm9wdGlvbnMuc3dpcGVfbWluX3RvdWNoZXMgJiZcbiAgICAgICAgZXYudG91Y2hlcy5sZW5ndGggPiBpbnN0Lm9wdGlvbnMuc3dpcGVfbWF4X3RvdWNoZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyB3aGVuIHRoZSBkaXN0YW5jZSB3ZSBtb3ZlZCBpcyB0b28gc21hbGwgd2Ugc2tpcCB0aGlzIGdlc3R1cmVcbiAgICAgIC8vIG9yIHdlIGNhbiBiZSBhbHJlYWR5IGluIGRyYWdnaW5nXG4gICAgICBpZihldi52ZWxvY2l0eVggPiBpbnN0Lm9wdGlvbnMuc3dpcGVfdmVsb2NpdHkgfHxcbiAgICAgICAgZXYudmVsb2NpdHlZID4gaW5zdC5vcHRpb25zLnN3aXBlX3ZlbG9jaXR5KSB7XG4gICAgICAgIC8vIHRyaWdnZXIgc3dpcGUgZXZlbnRzXG4gICAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUsIGV2KTtcbiAgICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSArIGV2LmRpcmVjdGlvbiwgZXYpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBUYXAvRG91YmxlVGFwXG4gKiBRdWljayB0b3VjaCBhdCBhIHBsYWNlIG9yIGRvdWJsZSBhdCB0aGUgc2FtZSBwbGFjZVxuICogQGV2ZW50cyAgdGFwLCBkb3VibGV0YXBcbiAqL1xuSGFtbWVyLmdlc3R1cmVzLlRhcCA9IHtcbiAgbmFtZSAgICA6ICd0YXAnLFxuICBpbmRleCAgIDogMTAwLFxuICBkZWZhdWx0czoge1xuICAgIHRhcF9tYXhfdG91Y2h0aW1lIDogMjUwLFxuICAgIHRhcF9tYXhfZGlzdGFuY2UgIDogMTAsXG4gICAgdGFwX2Fsd2F5cyAgICAgICAgOiB0cnVlLFxuICAgIGRvdWJsZXRhcF9kaXN0YW5jZTogMjAsXG4gICAgZG91YmxldGFwX2ludGVydmFsOiAzMDBcbiAgfSxcbiAgaGFuZGxlciA6IGZ1bmN0aW9uIHRhcEdlc3R1cmUoZXYsIGluc3QpIHtcbiAgICBpZihldi5ldmVudFR5cGUgPT0gSGFtbWVyLkVWRU5UX0VORCAmJiBldi5zcmNFdmVudC50eXBlICE9ICd0b3VjaGNhbmNlbCcpIHtcbiAgICAgIC8vIHByZXZpb3VzIGdlc3R1cmUsIGZvciB0aGUgZG91YmxlIHRhcCBzaW5jZSB0aGVzZSBhcmUgdHdvIGRpZmZlcmVudCBnZXN0dXJlIGRldGVjdGlvbnNcbiAgICAgIHZhciBwcmV2ID0gSGFtbWVyLmRldGVjdGlvbi5wcmV2aW91cyxcbiAgICAgICAgZGlkX2RvdWJsZXRhcCA9IGZhbHNlO1xuXG4gICAgICAvLyB3aGVuIHRoZSB0b3VjaHRpbWUgaXMgaGlnaGVyIHRoZW4gdGhlIG1heCB0b3VjaCB0aW1lXG4gICAgICAvLyBvciB3aGVuIHRoZSBtb3ZpbmcgZGlzdGFuY2UgaXMgdG9vIG11Y2hcbiAgICAgIGlmKGV2LmRlbHRhVGltZSA+IGluc3Qub3B0aW9ucy50YXBfbWF4X3RvdWNodGltZSB8fFxuICAgICAgICBldi5kaXN0YW5jZSA+IGluc3Qub3B0aW9ucy50YXBfbWF4X2Rpc3RhbmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgaWYgZG91YmxlIHRhcFxuICAgICAgaWYocHJldiAmJiBwcmV2Lm5hbWUgPT0gJ3RhcCcgJiZcbiAgICAgICAgKGV2LnRpbWVTdGFtcCAtIHByZXYubGFzdEV2ZW50LnRpbWVTdGFtcCkgPCBpbnN0Lm9wdGlvbnMuZG91YmxldGFwX2ludGVydmFsICYmXG4gICAgICAgIGV2LmRpc3RhbmNlIDwgaW5zdC5vcHRpb25zLmRvdWJsZXRhcF9kaXN0YW5jZSkge1xuICAgICAgICBpbnN0LnRyaWdnZXIoJ2RvdWJsZXRhcCcsIGV2KTtcbiAgICAgICAgZGlkX2RvdWJsZXRhcCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGRvIGEgc2luZ2xlIHRhcFxuICAgICAgaWYoIWRpZF9kb3VibGV0YXAgfHwgaW5zdC5vcHRpb25zLnRhcF9hbHdheXMpIHtcbiAgICAgICAgSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUgPSAndGFwJztcbiAgICAgICAgaW5zdC50cmlnZ2VyKEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5uYW1lLCBldik7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFRvdWNoXG4gKiBDYWxsZWQgYXMgZmlyc3QsIHRlbGxzIHRoZSB1c2VyIGhhcyB0b3VjaGVkIHRoZSBzY3JlZW5cbiAqIEBldmVudHMgIHRvdWNoXG4gKi9cbkhhbW1lci5nZXN0dXJlcy5Ub3VjaCA9IHtcbiAgbmFtZSAgICA6ICd0b3VjaCcsXG4gIGluZGV4ICAgOiAtSW5maW5pdHksXG4gIGRlZmF1bHRzOiB7XG4gICAgLy8gY2FsbCBwcmV2ZW50RGVmYXVsdCBhdCB0b3VjaHN0YXJ0LCBhbmQgbWFrZXMgdGhlIGVsZW1lbnQgYmxvY2tpbmcgYnlcbiAgICAvLyBkaXNhYmxpbmcgdGhlIHNjcm9sbGluZyBvZiB0aGUgcGFnZSwgYnV0IGl0IGltcHJvdmVzIGdlc3R1cmVzIGxpa2VcbiAgICAvLyB0cmFuc2Zvcm1pbmcgYW5kIGRyYWdnaW5nLlxuICAgIC8vIGJlIGNhcmVmdWwgd2l0aCB1c2luZyB0aGlzLCBpdCBjYW4gYmUgdmVyeSBhbm5veWluZyBmb3IgdXNlcnMgdG8gYmUgc3R1Y2tcbiAgICAvLyBvbiB0aGUgcGFnZVxuICAgIHByZXZlbnRfZGVmYXVsdCAgICA6IGZhbHNlLFxuXG4gICAgLy8gZGlzYWJsZSBtb3VzZSBldmVudHMsIHNvIG9ubHkgdG91Y2ggKG9yIHBlbiEpIGlucHV0IHRyaWdnZXJzIGV2ZW50c1xuICAgIHByZXZlbnRfbW91c2VldmVudHM6IGZhbHNlXG4gIH0sXG4gIGhhbmRsZXIgOiBmdW5jdGlvbiB0b3VjaEdlc3R1cmUoZXYsIGluc3QpIHtcbiAgICBpZihpbnN0Lm9wdGlvbnMucHJldmVudF9tb3VzZWV2ZW50cyAmJiBldi5wb2ludGVyVHlwZSA9PSBIYW1tZXIuUE9JTlRFUl9NT1VTRSkge1xuICAgICAgZXYuc3RvcERldGVjdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmKGluc3Qub3B0aW9ucy5wcmV2ZW50X2RlZmF1bHQpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYoZXYuZXZlbnRUeXBlID09IEhhbW1lci5FVkVOVF9TVEFSVCkge1xuICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSwgZXYpO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFRyYW5zZm9ybVxuICogVXNlciB3YW50IHRvIHNjYWxlIG9yIHJvdGF0ZSB3aXRoIDIgZmluZ2Vyc1xuICogQGV2ZW50cyAgdHJhbnNmb3JtLCBwaW5jaCwgcGluY2hpbiwgcGluY2hvdXQsIHJvdGF0ZVxuICovXG5IYW1tZXIuZ2VzdHVyZXMuVHJhbnNmb3JtID0ge1xuICBuYW1lICAgICA6ICd0cmFuc2Zvcm0nLFxuICBpbmRleCAgICA6IDQ1LFxuICBkZWZhdWx0cyA6IHtcbiAgICAvLyBmYWN0b3IsIG5vIHNjYWxlIGlzIDEsIHpvb21pbiBpcyB0byAwIGFuZCB6b29tb3V0IHVudGlsIGhpZ2hlciB0aGVuIDFcbiAgICB0cmFuc2Zvcm1fbWluX3NjYWxlICAgOiAwLjAxLFxuICAgIC8vIHJvdGF0aW9uIGluIGRlZ3JlZXNcbiAgICB0cmFuc2Zvcm1fbWluX3JvdGF0aW9uOiAxLFxuICAgIC8vIHByZXZlbnQgZGVmYXVsdCBicm93c2VyIGJlaGF2aW9yIHdoZW4gdHdvIHRvdWNoZXMgYXJlIG9uIHRoZSBzY3JlZW5cbiAgICAvLyBidXQgaXQgbWFrZXMgdGhlIGVsZW1lbnQgYSBibG9ja2luZyBlbGVtZW50XG4gICAgLy8gd2hlbiB5b3UgYXJlIHVzaW5nIHRoZSB0cmFuc2Zvcm0gZ2VzdHVyZSwgaXQgaXMgYSBnb29kIHByYWN0aWNlIHRvIHNldCB0aGlzIHRydWVcbiAgICB0cmFuc2Zvcm1fYWx3YXlzX2Jsb2NrOiBmYWxzZVxuICB9LFxuICB0cmlnZ2VyZWQ6IGZhbHNlLFxuICBoYW5kbGVyICA6IGZ1bmN0aW9uIHRyYW5zZm9ybUdlc3R1cmUoZXYsIGluc3QpIHtcbiAgICAvLyBjdXJyZW50IGdlc3R1cmUgaXNudCBkcmFnLCBidXQgZHJhZ2dlZCBpcyB0cnVlXG4gICAgLy8gdGhpcyBtZWFucyBhbiBvdGhlciBnZXN0dXJlIGlzIGJ1c3kuIG5vdyBjYWxsIGRyYWdlbmRcbiAgICBpZihIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQubmFtZSAhPSB0aGlzLm5hbWUgJiYgdGhpcy50cmlnZ2VyZWQpIHtcbiAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUgKyAnZW5kJywgZXYpO1xuICAgICAgdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBhdGxlYXN0IG11bHRpdG91Y2hcbiAgICBpZihldi50b3VjaGVzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBwcmV2ZW50IGRlZmF1bHQgd2hlbiB0d28gZmluZ2VycyBhcmUgb24gdGhlIHNjcmVlblxuICAgIGlmKGluc3Qub3B0aW9ucy50cmFuc2Zvcm1fYWx3YXlzX2Jsb2NrKSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHN3aXRjaChldi5ldmVudFR5cGUpIHtcbiAgICAgIGNhc2UgSGFtbWVyLkVWRU5UX1NUQVJUOlxuICAgICAgICB0aGlzLnRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBIYW1tZXIuRVZFTlRfTU9WRTpcbiAgICAgICAgdmFyIHNjYWxlX3RocmVzaG9sZCA9IE1hdGguYWJzKDEgLSBldi5zY2FsZSk7XG4gICAgICAgIHZhciByb3RhdGlvbl90aHJlc2hvbGQgPSBNYXRoLmFicyhldi5yb3RhdGlvbik7XG5cbiAgICAgICAgLy8gd2hlbiB0aGUgZGlzdGFuY2Ugd2UgbW92ZWQgaXMgdG9vIHNtYWxsIHdlIHNraXAgdGhpcyBnZXN0dXJlXG4gICAgICAgIC8vIG9yIHdlIGNhbiBiZSBhbHJlYWR5IGluIGRyYWdnaW5nXG4gICAgICAgIGlmKHNjYWxlX3RocmVzaG9sZCA8IGluc3Qub3B0aW9ucy50cmFuc2Zvcm1fbWluX3NjYWxlICYmXG4gICAgICAgICAgcm90YXRpb25fdGhyZXNob2xkIDwgaW5zdC5vcHRpb25zLnRyYW5zZm9ybV9taW5fcm90YXRpb24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSBhcmUgdHJhbnNmb3JtaW5nIVxuICAgICAgICBIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQubmFtZSA9IHRoaXMubmFtZTtcblxuICAgICAgICAvLyBmaXJzdCB0aW1lLCB0cmlnZ2VyIGRyYWdzdGFydCBldmVudFxuICAgICAgICBpZighdGhpcy50cmlnZ2VyZWQpIHtcbiAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lICsgJ3N0YXJ0JywgZXYpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUsIGV2KTsgLy8gYmFzaWMgdHJhbnNmb3JtIGV2ZW50XG5cbiAgICAgICAgLy8gdHJpZ2dlciByb3RhdGUgZXZlbnRcbiAgICAgICAgaWYocm90YXRpb25fdGhyZXNob2xkID4gaW5zdC5vcHRpb25zLnRyYW5zZm9ybV9taW5fcm90YXRpb24pIHtcbiAgICAgICAgICBpbnN0LnRyaWdnZXIoJ3JvdGF0ZScsIGV2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyaWdnZXIgcGluY2ggZXZlbnRcbiAgICAgICAgaWYoc2NhbGVfdGhyZXNob2xkID4gaW5zdC5vcHRpb25zLnRyYW5zZm9ybV9taW5fc2NhbGUpIHtcbiAgICAgICAgICBpbnN0LnRyaWdnZXIoJ3BpbmNoJywgZXYpO1xuICAgICAgICAgIGluc3QudHJpZ2dlcigncGluY2gnICsgKChldi5zY2FsZSA8IDEpID8gJ2luJyA6ICdvdXQnKSwgZXYpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEhhbW1lci5FVkVOVF9FTkQ6XG4gICAgICAgIC8vIHRyaWdnZXIgZHJhZ2VuZFxuICAgICAgICBpZih0aGlzLnRyaWdnZXJlZCkge1xuICAgICAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUgKyAnZW5kJywgZXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG4gIC8vIEJhc2VkIG9mZiBMby1EYXNoJ3MgZXhjZWxsZW50IFVNRCB3cmFwcGVyIChzbGlnaHRseSBtb2RpZmllZCkgLSBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvbG9kYXNoL2Jsb2IvbWFzdGVyL2xvZGFzaC5qcyNMNTUxNS1MNTU0M1xuICAvLyBzb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnMgbGlrZSB0aGUgZm9sbG93aW5nOlxuICBpZih0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIGRlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gSGFtbWVyOyB9KTtcbiAgfVxuXG4gIC8vIGNoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGFuIGBleHBvcnRzYCBvYmplY3RcbiAgZWxzZSBpZih0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gSGFtbWVyO1xuICB9XG5cbiAgZWxzZSB7XG4gICAgd2luZG93LkhhbW1lciA9IEhhbW1lcjtcbiAgfVxuXG4gIHJldHVybiBIYW1tZXI7XG59KSh3aW5kb3cpO1xuXG5leHBvcnQgZGVmYXVsdCBIYW1tZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2dhdG9yL2pzL2hhbW1lci5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFkQTtBQUNBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXBPQTtBQUNBO0FBdU9BOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFwRUE7QUFDQTtBQXVFQTs7Ozs7O0FBTUE7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUVBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBSUE7QUFDQTtBQUNBO0FBUEE7QUFTQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBckNBO0FBdUNBO0FBeE5BO0FBQ0E7QUEwTkE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBS0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUEzRUE7QUFDQTtBQThFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXBCQTtBQUNBO0FBc0JBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsTUE7QUFDQTtBQXFNQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeEJBO0FBQ0E7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRFQTtBQXdFQTtBQXRIQTtBQUNBO0FBd0hBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTFCQTtBQTRCQTtBQXJDQTtBQUNBO0FBdUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQUNBO0FBU0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzQkE7QUFDQTtBQTZCQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckNBO0FBQ0E7QUF1Q0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzQkE7QUFDQTtBQThCQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTlDQTtBQWdEQTtBQWpGQTtBQUNBO0FBbUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/NWY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXHJcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/*!****************************************!*\
  !*** ../gator/js/lib/GeneComponent.js ***!
  \****************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GenomeReader__ = __webpack_require__(/*! ./GenomeReader */ 10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GatorComponent__ = __webpack_require__(/*! ./GatorComponent */ 3);\n\n\n\n\nconst last_retrieved_gene = Symbol('last_retrieved_gene');\n\nclass GeneComponent extends __WEBPACK_IMPORTED_MODULE_1__GatorComponent__[\"a\" /* default */] {\n  static get observedAttributes() {\n    return ['geneid'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    setup_renderer.call(this);\n    if (this.geneid) {\n      retrieve_data.call(this);\n    }\n  }\n\n  attributeChangedCallback(name, old, newval) {\n    if (name === 'geneid' && this.renderer) {\n      retrieve_data.call(this);\n      return;\n    }\n  }\n\n  get geneid() {\n    return this.getAttribute('geneid');\n  }\n  set geneid(id) {\n    this.setAttribute('geneid', id);\n  }\n}\n\nlet reader_has_data = function reader_has_data() {\n  if (!this.geneid) {\n    return;\n  }\n  if (this[last_retrieved_gene] === this.geneid) {\n    return;\n  }\n  this[last_retrieved_gene] = this.geneid;\n\n  console.log('Getting data for ', this.geneid);\n  var reader = new __WEBPACK_IMPORTED_MODULE_0__GenomeReader__[\"a\" /* default */]();\n  reader.geneid = this.geneid;\n  if (this.hasAttribute('reviewed')) {\n    reader.reviewed = true;\n  }\n  // reader.uniprot = 'Q10472';\n  reader.exon_margin = 300; //..this.exonmargin || 300;\n  if (this.nt_mapping) {\n    reader.nt_mapping = this.nt_mapping;\n  }\n  if (!this.ready) {\n    reader.registerSequenceRenderer(this.renderer);\n    reader.bind('requestComplete', () => {\n      this.renderer.hideAxis();\n      this.renderer.fitZoom();\n    });\n    this.ready = new Promise(resolve => {\n      reader.bind('requestComplete', () => {\n        this.uniprots = Object.keys(reader.result._raw_data.data).map(up => up.toUpperCase());\n        if (reader.reviewed) {\n          this.uniprots = this.uniprots.filter(up => up === reader.swissprot.toUpperCase());\n        }\n        this.refreshTracks();\n        resolve();\n        delete this.ready;\n        var event = new Event('ready', { bubbles: true });\n        this.dispatchEvent(event);\n      });\n    });\n  }\n\n  reader.retrieve(this.accession || \"\" + this.geneid);\n};\n\nlet setup_renderer = function setup_renderer() {\n  this.renderer.trackOrder = [];\n  this.renderer.reset();\n};\n\nlet retrieve_data = function retrieve_data() {\n  this.renderer.bind('sequenceChange', reader_has_data.bind(this));\n  this.renderer.setSequence('M');\n};\n\ncustomElements.define('x-geneviewer', GeneComponent);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GeneComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZ2F0b3IvanMvbGliL0dlbmVDb21wb25lbnQuanM/YzgxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIgXG5pbXBvcnQgR2Vub21lUmVhZGVyIGZyb20gJy4vR2Vub21lUmVhZGVyJztcbmltcG9ydCBHYXRvckNvbXBvbmVudCBmcm9tICcuL0dhdG9yQ29tcG9uZW50JztcblxuY29uc3QgbGFzdF9yZXRyaWV2ZWRfZ2VuZSA9IFN5bWJvbCgnbGFzdF9yZXRyaWV2ZWRfZ2VuZScpO1xuXG5jbGFzcyBHZW5lQ29tcG9uZW50IGV4dGVuZHMgR2F0b3JDb21wb25lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gWydnZW5laWQnXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHNldHVwX3JlbmRlcmVyLmNhbGwodGhpcyk7XG4gICAgaWYgKHRoaXMuZ2VuZWlkKSB7XG4gICAgICByZXRyaWV2ZV9kYXRhLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsb2xkLG5ld3ZhbCkge1xuICAgIGlmIChuYW1lID09PSAnZ2VuZWlkJyAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXRyaWV2ZV9kYXRhLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgZ2V0IGdlbmVpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2dlbmVpZCcpO1xuICB9XG4gIHNldCBnZW5laWQoaWQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ2VuZWlkJyxpZCk7XG4gIH1cbn1cblxubGV0IHJlYWRlcl9oYXNfZGF0YSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICEgdGhpcy5nZW5laWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICggdGhpc1tsYXN0X3JldHJpZXZlZF9nZW5lXSA9PT0gdGhpcy5nZW5laWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXNbbGFzdF9yZXRyaWV2ZWRfZ2VuZV0gPSB0aGlzLmdlbmVpZDtcblxuICBjb25zb2xlLmxvZygnR2V0dGluZyBkYXRhIGZvciAnLHRoaXMuZ2VuZWlkKTtcbiAgdmFyIHJlYWRlciA9IG5ldyBHZW5vbWVSZWFkZXIoKTtcbiAgcmVhZGVyLmdlbmVpZCA9IHRoaXMuZ2VuZWlkO1xuICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ3Jldmlld2VkJykpIHtcbiAgICByZWFkZXIucmV2aWV3ZWQgPSB0cnVlO1xuICB9XG4gIC8vIHJlYWRlci51bmlwcm90ID0gJ1ExMDQ3Mic7XG4gIHJlYWRlci5leG9uX21hcmdpbiA9IDMwMDsvLy4udGhpcy5leG9ubWFyZ2luIHx8IDMwMDtcbiAgaWYgKHRoaXMubnRfbWFwcGluZykge1xuICAgIHJlYWRlci5udF9tYXBwaW5nID0gdGhpcy5udF9tYXBwaW5nO1xuICB9XG4gIGlmICggISB0aGlzLnJlYWR5ICkge1xuICAgIHJlYWRlci5yZWdpc3RlclNlcXVlbmNlUmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XG4gICAgcmVhZGVyLmJpbmQoJ3JlcXVlc3RDb21wbGV0ZScsKCkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlci5oaWRlQXhpcygpO1xuICAgICAgdGhpcy5yZW5kZXJlci5maXRab29tKCk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWFkeSA9IG5ldyBQcm9taXNlKCAocmVzb2x2ZSkgPT4ge1xuICAgICAgcmVhZGVyLmJpbmQoJ3JlcXVlc3RDb21wbGV0ZScsKCkgPT4ge1xuICAgICAgICB0aGlzLnVuaXByb3RzID0gT2JqZWN0LmtleXMocmVhZGVyLnJlc3VsdC5fcmF3X2RhdGEuZGF0YSkubWFwKCB1cCA9PiB1cC50b1VwcGVyQ2FzZSgpICk7XG4gICAgICAgIGlmIChyZWFkZXIucmV2aWV3ZWQpIHtcbiAgICAgICAgICB0aGlzLnVuaXByb3RzID0gdGhpcy51bmlwcm90cy5maWx0ZXIoIHVwID0+IHVwID09PSByZWFkZXIuc3dpc3Nwcm90LnRvVXBwZXJDYXNlKCkgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnJlc2hUcmFja3MoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICBkZWxldGUgdGhpcy5yZWFkeTtcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdyZWFkeScse2J1YmJsZXM6IHRydWV9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVhZGVyLnJldHJpZXZlKHRoaXMuYWNjZXNzaW9uIHx8IFwiXCIrdGhpcy5nZW5laWQpO1xuXG59O1xuXG5sZXQgc2V0dXBfcmVuZGVyZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW5kZXJlci50cmFja09yZGVyID0gW107XG4gIHRoaXMucmVuZGVyZXIucmVzZXQoKTtcbn07XG5cbmxldCByZXRyaWV2ZV9kYXRhID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVuZGVyZXIuYmluZCgnc2VxdWVuY2VDaGFuZ2UnLHJlYWRlcl9oYXNfZGF0YS5iaW5kKHRoaXMpKTtcbiAgdGhpcy5yZW5kZXJlci5zZXRTZXF1ZW5jZSgnTScpO1xufTtcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCd4LWdlbmV2aWV3ZXInLEdlbmVDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBHZW5lQ29tcG9uZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9nYXRvci9qcy9saWIvR2VuZUNvbXBvbmVudC5qcyJdLCJtYXBwaW5ncyI6Ijs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdCQTtBQUNBO0FBK0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/*!*************************************************!*\
  !*** ../gator/js/lib/TrackRendererComponent.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GatorComponent__ = __webpack_require__(/*! ./GatorComponent */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__jsandbox__ = __webpack_require__(/*! ../jsandbox */ 7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__MASCP__ = __webpack_require__(/*! ./MASCP */ 1);\nvar _this = this;\n\n\n\n\n\nconst SANDBOXES = new Map();\n\nlet retrieve_renderer = function retrieve_renderer() {\n  let renderer_url = this.getAttribute('src');\n  return fetch(renderer_url).then(dat => dat.text());\n};\n\nfunction WrapHTML() {\n  return Reflect.construct(HTMLElement, [], Object.getPrototypeOf(this).constructor);\n}\nObject.setPrototypeOf(WrapHTML.prototype, HTMLElement.prototype);\nObject.setPrototypeOf(WrapHTML, HTMLElement);\n\nlet get_renderer_sequence = (renderer, accession) => {\n  return new Promise(resolve => {\n    (function () {\n      var obj = { \"gotResult\": function gotResult() {\n          resolve(renderer.sequence);\n        }, \"acc\": accession };\n      renderer.trigger('readerRegistered', [obj]);\n      obj.gotResult();\n    })();\n  });\n};\n\nlet set_basic_offset = (objects, basic_offset) => {\n  objects.forEach(function (obj) {\n    if (obj.options) {\n      if (obj.options.offset) {\n        obj.options.offset += basic_offset;\n        return;\n      }\n      obj.options.offset = basic_offset;\n    } else {\n      obj.options = { \"offset\": basic_offset };\n    }\n  });\n};\n\nlet apply_rendering = (renderer, default_track, objects) => {\n  if (Array.isArray(objects)) {\n    var temp_objects = {};\n    console.log('No accession provided');\n    temp_objects['DEFAULTACC'] = objects;\n    objects = temp_objects;\n  }\n  for (let acc of Object.keys(objects)) {\n    let r = objects[acc];\n    set_basic_offset(r, 0);\n\n    renderer.renderObjects(default_track, r.filter(function (item) {\n      return !item.track;\n    }));\n\n    var items_by_track = {};\n    r.filter(function (item) {\n      return item.track;\n    }).forEach(function (item) {\n      items_by_track[item.track] = items_by_track[item.track] || [];\n      items_by_track[item.track].push(item);\n    });\n    Object.keys(items_by_track).forEach(function (track) {\n      if (__WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(track)) {\n        __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].registerLayer(track, {}, [renderer]);\n        // We force a refresh of the track order\n        // to pick up any layers that have been re-enabled\n        renderer.trackOrder = renderer.trackOrder;\n        renderer.renderObjects(track, items_by_track[track]);\n      }\n    });\n    renderer.trigger('resultsRendered', [_this]);\n    renderer.refresh();\n  }\n};\n\nlet do_rendering = (renderer, script, data, default_track) => {\n  const SANDBOX = SANDBOXES.get(script) || new __WEBPACK_IMPORTED_MODULE_1__jsandbox__[\"a\" /* default */]();\n  SANDBOXES.set(script, SANDBOX);\n  get_renderer_sequence(renderer).then(sequence => {\n    SANDBOX.eval(script, () => {\n      SANDBOX.eval({ 'data': 'renderData(input.sequence,input.data,input.acc,input.track)',\n        'input': { 'sequence': sequence, 'data': data, 'track': default_track },\n        'onerror': message => {\n          throw new Error(message);\n        },\n        'callback': apply_rendering.bind(null, renderer, default_track)\n      });\n    });\n  });\n};\n\nclass TrackRendererComponent extends WrapHTML {\n  static get observedAttributes() {\n    return ['track', 'src'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    this.script = retrieve_renderer.call(this);\n  }\n\n  render(renderer, data, track) {\n    this.script.then(script => {\n      do_rendering(renderer, script, data, track);\n    });\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    this._data = data;\n    this.render(this.ownerDocument.getElementById(this.getAttribute('renderer')).renderer, this._data, this.getAttribute('track'));\n  }\n\n  attributeChangedCallback(name) {\n    if (this.hasAttribute('renderer') && this.data && name === 'track') {\n      this.render(document.getElementById(this.getAttribute('renderer')).renderer, this._data, this.getAttribute('track'));\n    }\n    if (name === 'src') {\n      this.script = retrieve_renderer.call(this);\n    }\n  }\n}\n\ncustomElements.define('x-trackrenderer', TrackRendererComponent);\n\nlet create_track = function create_track() {\n  __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].registerLayer(this.name, {});\n  __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(this.name).fullname = this.fullname || this.name;\n  __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(this.name).scales.clear();\n  for (let scale of this.scale) {\n    __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(this.name).scales.add(scale);\n  }\n};\n\nclass TrackComponent extends WrapHTML {\n  static get observedAttributes() {\n    return ['name', 'fullname', 'scale'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    create_track.call(this);\n  }\n\n  get name() {\n    return this.getAttribute('name');\n  }\n\n  set name(name) {\n    return this.setAttribute('name', name);\n  }\n\n  get layer() {\n    return __WEBPACK_IMPORTED_MODULE_2__MASCP__[\"a\" /* default */].getLayer(this.name);\n  }\n\n  get fullname() {\n    return this.getAttribute('fullname');\n  }\n\n  set fullname(name) {\n    return this.setAttribute('fullname', name);\n  }\n\n  get scale() {\n    return (this.getAttribute('scale') || '').split(',');\n  }\n\n  set scale(scale) {\n    return this.setAttribute('scale', scale);\n  }\n\n  attributeChangedCallback(name) {\n    create_track.call(this);\n  }\n}\n\ncustomElements.define('x-gatortrack', TrackComponent);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (TrackRendererComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ })
/******/ ]);