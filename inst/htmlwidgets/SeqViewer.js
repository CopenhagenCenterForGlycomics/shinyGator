!function(g){var I={};function C(n){if(I[n])return I[n].exports;var A=I[n]={i:n,l:!1,exports:{}};return g[n].call(A.exports,A,A.exports,C),A.l=!0,A.exports}C.m=g,C.c=I,C.d=function(g,I,n){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:n})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var A in g)C.d(n,A,function(I){return g[I]}.bind(null,A));return n},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=0)}({"../gator/js/bean.js":
/*!***************************!*\
  !*** ../gator/js/bean.js ***!
  \***************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/*!\n  * bean.js - copyright Jacob Thornton 2011\n  * https://github.com/fat/bean\n  * MIT License\n  * special thanks to:\n  * dean edwards: http://dean.edwards.name/\n  * dperini: https://github.com/dperini/nwevents\n  * the entire mootools team: github.com/mootools/mootools-core\n  */\nconst bean = function (context) {\n  var __uid = 1,\n      registry = {},\n      collected = {},\n      overOut = /over|out/,\n      namespace = /[^\\.]*(?=\\..*)\\.|.*/,\n      stripName = /\\..*/,\n      addEvent = 'addEventListener',\n      attachEvent = 'attachEvent',\n      removeEvent = 'removeEventListener',\n      detachEvent = 'detachEvent',\n      doc = context.document || {},\n      root = doc.documentElement || {},\n      W3C_MODEL = root[addEvent],\n      eventSupport = W3C_MODEL ? addEvent : attachEvent,\n      isDescendant = function isDescendant(parent, child) {\n    var node = child.parentNode;\n\n    while (node !== null) {\n      if (node == parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n  },\n      retrieveUid = function retrieveUid(obj, uid) {\n    return obj.__uid = uid && uid + '::' + __uid++ || obj.__uid || __uid++;\n  },\n      retrieveEvents = function retrieveEvents(element) {\n    var uid = retrieveUid(element);\n    return registry[uid] = registry[uid] || {};\n  },\n      listener = W3C_MODEL ? function (element, type, fn, add) {\n    element[add ? addEvent : removeEvent](type, fn, false);\n  } : function (element, type, fn, add, custom) {\n    custom && add && (element['_on' + custom] = element['_on' + custom] || 0);\n    element[add ? attachEvent : detachEvent]('on' + type, fn);\n  },\n      nativeHandler = function nativeHandler(element, fn, args) {\n    return function (event, arg) {\n      event = fixEvent(event || ((this.ownerDocument || this.document || this).parentWindow || context).event);\n      return fn.apply(element, [event].concat(args).concat(arg));\n    };\n  },\n      customHandler = function customHandler(element, fn, type, condition, args) {\n    return function (e) {\n      if (condition ? condition.apply(this, arguments) : W3C_MODEL ? true : e && e.propertyName == '_on' + type || !e) {\n        fn.apply(element, Array.prototype.slice.call(arguments, e ? 0 : 1).concat(args));\n      }\n    };\n  },\n      addListener = function addListener(element, orgType, _fn, args) {\n    var type = orgType.replace(stripName, ''),\n        events = retrieveEvents(element),\n        handlers = events[type] || (events[type] = {}),\n        originalFn = _fn,\n        uid = retrieveUid(_fn, orgType.replace(namespace, ''));\n\n    if (handlers[uid]) {\n      return element;\n    }\n\n    var custom = customEvents[type];\n\n    if (custom) {\n      _fn = custom.condition ? customHandler(element, _fn, type, custom.condition) : _fn;\n      type = custom.base || type;\n    }\n\n    var isNative = nativeEvents[type];\n    _fn = isNative ? nativeHandler(element, _fn, args) : customHandler(element, _fn, type, false, args);\n    isNative = W3C_MODEL || isNative;\n\n    if (type == 'unload') {\n      var org = _fn;\n\n      _fn = function fn() {\n        removeListener(element, type, _fn) && org();\n      };\n    }\n\n    element[eventSupport] && listener(element, isNative ? type : 'propertychange', _fn, true, !isNative && type);\n    handlers[uid] = _fn;\n    _fn.__uid = uid;\n    _fn.__originalFn = originalFn;\n    return type == 'unload' ? element : collected[retrieveUid(element)] = element;\n  },\n      removeListener = function removeListener(element, orgType, handler) {\n    var uid,\n        names,\n        uids,\n        i,\n        events = retrieveEvents(element),\n        type = orgType.replace(stripName, '');\n\n    if (!events || !events[type]) {\n      return element;\n    }\n\n    names = orgType.replace(namespace, '');\n    uids = names ? names.split('.') : [handler.__uid];\n\n    function destroyHandler(uid) {\n      handler = events[type][uid];\n\n      if (!handler) {\n        return;\n      }\n\n      delete events[type][uid];\n\n      if (element[eventSupport]) {\n        type = customEvents[type] ? customEvents[type].base : type;\n        var isNative = W3C_MODEL || nativeEvents[type];\n        listener(element, isNative ? type : 'propertychange', handler, false, !isNative && type);\n      }\n    }\n\n    destroyHandler(names); //get combos\n\n    for (i = uids.length; i--; destroyHandler(uids[i])) {} //get singles\n\n\n    return element;\n  },\n      del = function del(selector, fn, $) {\n    return function (e) {\n      var array = typeof selector == 'string' ? $(selector, this) : selector;\n\n      for (var target = e.target; target && target != this; target = target.parentNode) {\n        for (var i = array.length; i--;) {\n          if (array[i] == target) {\n            return fn.apply(target, arguments);\n          }\n        }\n      }\n    };\n  },\n      add = function add(element, events, fn, delfn, $) {\n    if (typeof events == 'object' && !fn) {\n      for (var type in events) {\n        events.hasOwnProperty(type) && add(element, type, events[type]);\n      }\n    } else {\n      var isDel = typeof fn == 'string',\n          types = (isDel ? fn : events).split(' ');\n      fn = isDel ? del(events, delfn, $) : fn;\n\n      for (var i = types.length; i--;) {\n        addListener(element, types[i], fn, Array.prototype.slice.call(arguments, isDel ? 4 : 3));\n      }\n    }\n\n    return element;\n  },\n      remove = function remove(element, orgEvents, fn) {\n    var k,\n        m,\n        type,\n        events,\n        i,\n        isString = typeof orgEvents == 'string',\n        names = isString && orgEvents.replace(namespace, ''),\n        names = names && names.split('.'),\n        rm = removeListener,\n        attached = retrieveEvents(element);\n\n    if (isString && /\\s/.test(orgEvents)) {\n      orgEvents = orgEvents.split(' ');\n      i = orgEvents.length - 1;\n\n      while (remove(element, orgEvents[i]) && i--) {}\n\n      return element;\n    }\n\n    events = isString ? orgEvents.replace(stripName, '') : orgEvents;\n\n    if (!attached || names || isString && !attached[events]) {\n      for (k in attached) {\n        if (attached.hasOwnProperty(k)) {\n          for (i in attached[k]) {\n            for (m = names.length; m--;) {\n              attached[k].hasOwnProperty(i) && new RegExp('^' + names[m] + '::\\\\d*(\\\\..*)?$').test(i) && rm(element, [k, i].join('.'));\n            }\n          }\n        }\n      }\n\n      return element;\n    }\n\n    if (typeof fn == 'function') {\n      rm(element, events, fn);\n    } else if (names) {\n      rm(element, orgEvents);\n    } else {\n      rm = events ? rm : remove;\n      type = isString && events;\n      events = events ? fn || attached[events] || events : attached;\n\n      for (k in events) {\n        if (events.hasOwnProperty(k)) {\n          rm(element, type || k, events[k]);\n          delete events[k]; // remove unused leaf keys\n        }\n      }\n    }\n\n    return element;\n  },\n      fire = function fire(element, type, args) {\n    var evt,\n        k,\n        i,\n        m,\n        types = type.split(' ');\n\n    for (i = types.length; i--;) {\n      type = types[i].replace(stripName, '');\n      var isNative = nativeEvents[type],\n          isNamespace = types[i].replace(namespace, ''),\n          handlers = retrieveEvents(element)[type];\n\n      if (isNamespace) {\n        isNamespace = isNamespace.split('.');\n\n        for (k = isNamespace.length; k--;) {\n          for (m in handlers) {\n            handlers.hasOwnProperty(m) && new RegExp('^' + isNamespace[k] + '::\\\\d*(\\\\..*)?$').test(m) && handlers[m].apply(element, [false].concat(args));\n          }\n        }\n      } else if (!args && element[eventSupport]) {\n        fireListener(isNative, type, element);\n      } else {\n        for (k in handlers) {\n          handlers.hasOwnProperty(k) && handlers[k].apply(element, [false].concat(args));\n        }\n      }\n    }\n\n    return element;\n  },\n      fireListener = W3C_MODEL ? function (isNative, type, element) {\n    evt = document.createEvent(isNative ? \"HTMLEvents\" : \"UIEvents\");\n    evt[isNative ? 'initEvent' : 'initUIEvent'](type, true, true, context, 1);\n    element.dispatchEvent(evt);\n  } : function (isNative, type, element) {\n    isNative ? element.fireEvent('on' + type, document.createEventObject()) : element['_on' + type]++;\n  },\n      clone = function clone(element, from, type) {\n    var events = retrieveEvents(from),\n        obj,\n        k;\n    var uid = retrieveUid(element);\n    obj = type ? events[type] : events;\n\n    for (k in obj) {\n      obj.hasOwnProperty(k) && (type ? add : clone)(element, type || from, type ? obj[k].__originalFn : k);\n    }\n\n    return element;\n  },\n      fixEvent = function fixEvent(e) {\n    var result = {};\n\n    if (!e) {\n      return result;\n    }\n\n    var type = e.type,\n        target = e.target || e.srcElement;\n    result.preventDefault = fixEvent.preventDefault(e);\n    result.stopPropagation = fixEvent.stopPropagation(e);\n    result.target = target && target.nodeType == 3 ? target.parentNode : target;\n\n    if (type && type.indexOf('key')) {\n      result.keyCode = e.which || e.keyCode;\n    } else if (/click|mouse|menu/i.test(type)) {\n      result.rightClick = e.which == 3 || e.button == 2;\n      result.pos = {\n        x: 0,\n        y: 0\n      };\n\n      if (e.pageX || e.pageY) {\n        result.clientX = e.pageX;\n        result.clientY = e.pageY;\n      } else if (e.clientX || e.clientY) {\n        result.clientX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n        result.clientY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n      }\n\n      overOut.test(type) && (result.relatedTarget = e.relatedTarget || e[(type == 'mouseover' ? 'from' : 'to') + 'Element']);\n    }\n\n    for (var k in e) {\n      if (!(k in result)) {\n        result[k] = e[k];\n      }\n    }\n\n    return result;\n  };\n\n  fixEvent.preventDefault = function (e) {\n    return function () {\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n    };\n  };\n\n  fixEvent.stopPropagation = function (e) {\n    return function () {\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      } else {\n        e.cancelBubble = true;\n      }\n    };\n  };\n\n  var nativeEvents = {\n    click: 1,\n    dblclick: 1,\n    mouseup: 1,\n    mousedown: 1,\n    contextmenu: 1,\n    //mouse buttons\n    mousewheel: 1,\n    DOMMouseScroll: 1,\n    //mouse wheel\n    mouseover: 1,\n    mouseout: 1,\n    mousemove: 1,\n    selectstart: 1,\n    selectend: 1,\n    //mouse movement\n    keydown: 1,\n    keypress: 1,\n    keyup: 1,\n    //keyboard\n    orientationchange: 1,\n    // mobile\n    touchstart: 1,\n    touchmove: 1,\n    touchend: 1,\n    touchcancel: 1,\n    // touch\n    gesturestart: 1,\n    gesturechange: 1,\n    gestureend: 1,\n    // gesture\n    focus: 1,\n    blur: 1,\n    change: 1,\n    reset: 1,\n    select: 1,\n    submit: 1,\n    //form elements\n    load: 1,\n    unload: 1,\n    beforeunload: 1,\n    resize: 1,\n    move: 1,\n    DOMContentLoaded: 1,\n    readystatechange: 1,\n    //window\n    error: 0,\n    abort: 1,\n    scroll: 1\n  }; //misc\n\n  function check(event) {\n    var related = event.relatedTarget;\n\n    if (!related) {\n      return related === null;\n    }\n\n    return related != this && related.prefix != 'xul' && !/document/.test(this.toString()) && !isDescendant(this, related);\n  }\n\n  var customEvents = {\n    mouseenter: {\n      base: 'mouseover',\n      condition: check\n    },\n    mouseleave: {\n      base: 'mouseout',\n      condition: check //    mousewheel: { base: /Firefox/.test(navigator.userAgent) ? 'DOMMouseScroll' : 'mousewheel' }\n\n    }\n  };\n  var bean = {\n    add: add,\n    remove: remove,\n    clone: clone,\n    fire: fire\n  };\n\n  var clean = function clean(el) {\n    var uid = remove(el).__uid;\n\n    if (uid) {\n      delete collected[uid];\n      delete registry[uid];\n    }\n  };\n\n  if (context[attachEvent]) {\n    add(context, 'unload', function () {\n      for (var k in collected) {\n        collected.hasOwnProperty(k) && clean(collected[k]);\n      }\n\n      context.CollectGarbage && CollectGarbage();\n    });\n  }\n\n  var oldBean = context.bean;\n\n  bean.noConflict = function () {\n    context.bean = oldBean;\n    return this;\n  };\n\n   true && module.exports ? module.exports = bean : context['bean'] = bean;\n  return bean;\n}({});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (bean);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../shinyGator/node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/bean.js\n")},"../gator/js/hammer.js":
/*!*****************************!*\
  !*** ../gator/js/hammer.js ***!
  \*****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/*! Hammer.JS - v1.0.7dev - 2014-01-15\n * http://eightmedia.github.com/hammer.js\n *\n * Copyright (c) 2014 Jorik Tangelder <j.tangelder@gmail.com>;\n * Licensed under the MIT license */\nconst Hammer = function (window, undefined) {\n  'use strict';\n  /**\n   * Hammer\n   * use this to create instances\n   * @param   {HTMLElement}   element\n   * @param   {Object}        options\n   * @returns {Hammer.Instance}\n   * @constructor\n   */\n\n  var Hammer = function Hammer(element, options) {\n    return new Hammer.Instance(element, options || {});\n  }; // default settings\n\n\n  Hammer.defaults = {\n    // add styles and attributes to the element to prevent the browser from doing\n    // its native behavior. this doesnt prevent the scrolling, but cancels\n    // the contextmenu, tap highlighting etc\n    // set to false to disable this\n    stop_browser_behavior: {\n      // this also triggers onselectstart=false for IE\n      userSelect: 'none',\n      // this makes the element blocking in IE10 >, you could experiment with the value\n      // see for more options this issue; https://github.com/EightMedia/hammer.js/issues/241\n      touchAction: 'none',\n      touchCallout: 'none',\n      contentZooming: 'none',\n      userDrag: 'none',\n      tapHighlightColor: 'rgba(0,0,0,0)' //\n      // more settings are defined per gesture at gestures.js\n      //\n\n    }\n  }; // detect touchevents\n\n  Hammer.HAS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;\n  Hammer.HAS_TOUCHEVENTS = 'ontouchstart' in window; // dont use mouseevents on mobile devices\n\n  Hammer.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;\n  Hammer.NO_MOUSEEVENTS = Hammer.HAS_TOUCHEVENTS && window.navigator.userAgent.match(Hammer.MOBILE_REGEX); // eventtypes per touchevent (start, move, end)\n  // are filled by Hammer.event.determineEventTypes on setup\n\n  Hammer.EVENT_TYPES = {}; // direction defines\n\n  Hammer.DIRECTION_DOWN = 'down';\n  Hammer.DIRECTION_LEFT = 'left';\n  Hammer.DIRECTION_UP = 'up';\n  Hammer.DIRECTION_RIGHT = 'right'; // pointer type\n\n  Hammer.POINTER_MOUSE = 'mouse';\n  Hammer.POINTER_TOUCH = 'touch';\n  Hammer.POINTER_PEN = 'pen'; // touch event defines\n\n  Hammer.EVENT_START = 'start';\n  Hammer.EVENT_MOVE = 'move';\n  Hammer.EVENT_END = 'end'; // hammer document where the base events are added at\n\n  Hammer.DOCUMENT = window.document; // plugins and gestures namespaces\n\n  Hammer.plugins = Hammer.plugins || {};\n  Hammer.gestures = Hammer.gestures || {}; // if the window events are set...\n\n  Hammer.READY = false;\n  /**\n   * setup events to detect gestures on the document\n   */\n\n  function setup() {\n    if (Hammer.READY) {\n      return;\n    } // find what eventtypes we add listeners to\n\n\n    Hammer.event.determineEventTypes(); // Register all gestures inside Hammer.gestures\n\n    Hammer.utils.each(Hammer.gestures, function (gesture) {\n      Hammer.detection.register(gesture);\n    }); // Add touch events on the document\n\n    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_MOVE, Hammer.detection.detect);\n    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_END, Hammer.detection.detect); // Hammer is ready...!\n\n    Hammer.READY = true;\n  }\n\n  Hammer.utils = {\n    /**\n     * extend method,\n     * also used for cloning when dest is an empty object\n     * @param   {Object}    dest\n     * @param   {Object}    src\n     * @parm  {Boolean}  merge    do a merge\n     * @returns {Object}    dest\n     */\n    extend: function extend(dest, src, merge) {\n      for (var key in src) {\n        if (dest[key] !== undefined && merge) {\n          continue;\n        }\n\n        dest[key] = src[key];\n      }\n\n      return dest;\n    },\n\n    /**\n     * for each\n     * @param obj\n     * @param iterator\n     */\n    each: function each(obj, iterator, context) {\n      var i, length; // native forEach on arrays\n\n      if ('forEach' in obj) {\n        obj.forEach(iterator, context);\n      } // arrays\n      else if (obj.length !== undefined) {\n          for (i = 0, length = obj.length; i < length; i++) {\n            if (iterator.call(context, obj[i], i, obj) === false) {\n              return;\n            }\n          }\n        } // objects\n        else {\n            for (i in obj) {\n              if (obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj) === false) {\n                return;\n              }\n            }\n          }\n    },\n\n    /**\n     * find if a node is in the given parent\n     * used for event delegation tricks\n     * @param   {HTMLElement}   node\n     * @param   {HTMLElement}   parent\n     * @returns {boolean}       has_parent\n     */\n    hasParent: function hasParent(node, parent) {\n      while (node) {\n        if (node == parent) {\n          return true;\n        }\n\n        node = node.parentNode;\n      }\n\n      return false;\n    },\n\n    /**\n     * get the center of all the touches\n     * @param   {Array}     touches\n     * @returns {Object}    center\n     */\n    getCenter: function getCenter(touches) {\n      var valuesX = [],\n          valuesY = [];\n      Hammer.utils.each(touches, function (touch) {\n        // I prefer clientX because it ignore the scrolling position\n        valuesX.push(typeof touch.clientX !== 'undefined' ? touch.clientX : touch.pageX);\n        valuesY.push(typeof touch.clientY !== 'undefined' ? touch.clientY : touch.pageY);\n      });\n      return {\n        pageX: (Math.min.apply(Math, valuesX) + Math.max.apply(Math, valuesX)) / 2,\n        pageY: (Math.min.apply(Math, valuesY) + Math.max.apply(Math, valuesY)) / 2\n      };\n    },\n\n    /**\n     * calculate the velocity between two points\n     * @param   {Number}    delta_time\n     * @param   {Number}    delta_x\n     * @param   {Number}    delta_y\n     * @returns {Object}    velocity\n     */\n    getVelocity: function getVelocity(delta_time, delta_x, delta_y) {\n      return {\n        x: Math.abs(delta_x / delta_time) || 0,\n        y: Math.abs(delta_y / delta_time) || 0\n      };\n    },\n\n    /**\n     * calculate the angle between two coordinates\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {Number}    angle\n     */\n    getAngle: function getAngle(touch1, touch2) {\n      var y = touch2.pageY - touch1.pageY,\n          x = touch2.pageX - touch1.pageX;\n      return Math.atan2(y, x) * 180 / Math.PI;\n    },\n\n    /**\n     * angle to direction define\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {String}    direction constant, like Hammer.DIRECTION_LEFT\n     */\n    getDirection: function getDirection(touch1, touch2) {\n      var x = Math.abs(touch1.pageX - touch2.pageX),\n          y = Math.abs(touch1.pageY - touch2.pageY);\n\n      if (x >= y) {\n        return touch1.pageX - touch2.pageX > 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;\n      } else {\n        return touch1.pageY - touch2.pageY > 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;\n      }\n    },\n\n    /**\n     * calculate the distance between two touches\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {Number}    distance\n     */\n    getDistance: function getDistance(touch1, touch2) {\n      var x = touch2.pageX - touch1.pageX,\n          y = touch2.pageY - touch1.pageY;\n      return Math.sqrt(x * x + y * y);\n    },\n\n    /**\n     * calculate the scale factor between two touchLists (fingers)\n     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n     * @param   {Array}     start\n     * @param   {Array}     end\n     * @returns {Number}    scale\n     */\n    getScale: function getScale(start, end) {\n      // need two fingers...\n      if (start.length >= 2 && end.length >= 2) {\n        return this.getDistance(end[0], end[1]) / this.getDistance(start[0], start[1]);\n      }\n\n      return 1;\n    },\n\n    /**\n     * calculate the rotation degrees between two touchLists (fingers)\n     * @param   {Array}     start\n     * @param   {Array}     end\n     * @returns {Number}    rotation\n     */\n    getRotation: function getRotation(start, end) {\n      // need two fingers\n      if (start.length >= 2 && end.length >= 2) {\n        return this.getAngle(end[1], end[0]) - this.getAngle(start[1], start[0]);\n      }\n\n      return 0;\n    },\n\n    /**\n     * boolean if the direction is vertical\n     * @param    {String}    direction\n     * @returns  {Boolean}   is_vertical\n     */\n    isVertical: function isVertical(direction) {\n      return direction == Hammer.DIRECTION_UP || direction == Hammer.DIRECTION_DOWN;\n    },\n\n    /**\n     * stop browser default behavior with css props\n     * @param   {HtmlElement}   element\n     * @param   {Object}        css_props\n     */\n    stopDefaultBrowserBehavior: function stopDefaultBrowserBehavior(element, css_props) {\n      if (!css_props || !element || !element.style) {\n        return;\n      } // with css properties for modern browsers\n\n\n      Hammer.utils.each(['webkit', 'khtml', 'moz', 'Moz', 'ms', 'o', ''], function (vendor) {\n        Hammer.utils.each(css_props, function (value, prop) {\n          // vender prefix at the property\n          if (vendor) {\n            prop = vendor + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n          } // set the style\n\n\n          if (prop in element.style) {\n            element.style[prop] = value;\n          }\n        });\n      }); // also the disable onselectstart\n\n      if (css_props.userSelect == 'none') {\n        element.onselectstart = function () {\n          return false;\n        };\n      } // and disable ondragstart\n\n\n      if (css_props.userDrag == 'none') {\n        element.ondragstart = function () {\n          return false;\n        };\n      }\n    }\n  };\n  /**\n   * create new hammer instance\n   * all methods should return the instance itself, so it is chainable.\n   * @param   {HTMLElement}       element\n   * @param   {Object}            [options={}]\n   * @returns {Hammer.Instance}\n   * @constructor\n   */\n\n  Hammer.Instance = function (element, options) {\n    var self = this; // setup HammerJS window events and register all gestures\n    // this also sets up the default options\n\n    setup();\n    this.element = element; // start/stop detection option\n\n    this.enabled = true; // merge options\n\n    this.options = Hammer.utils.extend(Hammer.utils.extend({}, Hammer.defaults), options || {}); // add some css to the element to prevent the browser from doing its native behavoir\n\n    if (this.options.stop_browser_behavior) {\n      Hammer.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);\n    } // start detection on touchstart\n\n\n    Hammer.event.onTouch(element, Hammer.EVENT_START, function (ev) {\n      if (self.enabled) {\n        Hammer.detection.startDetect(self, ev);\n      }\n    }); // return instance\n\n    return this;\n  };\n\n  Hammer.Instance.prototype = {\n    /**\n     * bind events to the instance\n     * @param   {String}      gesture\n     * @param   {Function}    handler\n     * @returns {Hammer.Instance}\n     */\n    on: function onEvent(gesture, handler) {\n      var gestures = gesture.split(' ');\n      Hammer.utils.each(gestures, function (gesture) {\n        this.element.addEventListener(gesture, handler, false);\n      }, this);\n      return this;\n    },\n\n    /**\n     * unbind events to the instance\n     * @param   {String}      gesture\n     * @param   {Function}    handler\n     * @returns {Hammer.Instance}\n     */\n    off: function offEvent(gesture, handler) {\n      var gestures = gesture.split(' ');\n      Hammer.utils.each(gestures, function (gesture) {\n        this.element.removeEventListener(gesture, handler, false);\n      }, this);\n      return this;\n    },\n\n    /**\n     * trigger gesture event\n     * @param   {String}      gesture\n     * @param   {Object}      [eventData]\n     * @returns {Hammer.Instance}\n     */\n    trigger: function triggerEvent(gesture, eventData) {\n      // optional\n      if (!eventData) {\n        eventData = {};\n      } // create DOM event\n\n\n      var event = Hammer.DOCUMENT.createEvent('Event');\n      event.initEvent(gesture, true, true);\n      event.gesture = eventData; // trigger on the target if it is in the instance element,\n      // this is for event delegation tricks\n\n      var element = this.element;\n\n      if (Hammer.utils.hasParent(eventData.target, element)) {\n        element = eventData.target;\n      }\n\n      element.dispatchEvent(event);\n      return this;\n    },\n\n    /**\n     * enable of disable hammer.js detection\n     * @param   {Boolean}   state\n     * @returns {Hammer.Instance}\n     */\n    enable: function enable(state) {\n      this.enabled = state;\n      return this;\n    }\n  };\n  /**\n   * this holds the last move event,\n   * used to fix empty touchend issue\n   * see the onTouch event for an explanation\n   * @type {Object}\n   */\n\n  var last_move_event = null;\n  /**\n   * when the mouse is hold down, this is true\n   * @type {Boolean}\n   */\n\n  var enable_detect = false;\n  /**\n   * when touch events have been fired, this is true\n   * @type {Boolean}\n   */\n\n  var touch_triggered = false;\n  Hammer.event = {\n    /**\n     * simple addEventListener\n     * @param   {HTMLElement}   element\n     * @param   {String}        type\n     * @param   {Function}      handler\n     */\n    bindDom: function bindDom(element, type, handler) {\n      var types = type.split(' ');\n      Hammer.utils.each(types, function (type) {\n        element.addEventListener(type, handler, false);\n      });\n    },\n\n    /**\n     * touch events with mouse fallback\n     * @param   {HTMLElement}   element\n     * @param   {String}        eventType        like Hammer.EVENT_MOVE\n     * @param   {Function}      handler\n     */\n    onTouch: function onTouch(element, eventType, handler) {\n      var self = this;\n      this.bindDom(element, Hammer.EVENT_TYPES[eventType], function bindDomOnTouch(ev) {\n        var sourceEventType = ev.type.toLowerCase(); // onmouseup, but when touchend has been fired we do nothing.\n        // this is for touchdevices which also fire a mouseup on touchend\n\n        if (sourceEventType.match(/mouse/) && touch_triggered) {\n          return;\n        } // mousebutton must be down or a touch event\n        else if (sourceEventType.match(/touch/) || // touch events are always on screen\n          sourceEventType.match(/pointerdown/) || // pointerevents touch\n          sourceEventType.match(/mouse/) && ev.which === 1 // mouse is pressed\n          ) {\n              enable_detect = true;\n            } // mouse isn't pressed\n          else if (sourceEventType.match(/mouse/) && !ev.which) {\n              enable_detect = false;\n            } // we are in a touch event, set the touch triggered bool to true,\n        // this for the conflicts that may occur on ios and android\n\n\n        if (sourceEventType.match(/touch|pointer/)) {\n          touch_triggered = true;\n        } // count the total touches on the screen\n\n\n        var count_touches = 0; // when touch has been triggered in this detection session\n        // and we are now handling a mouse event, we stop that to prevent conflicts\n\n        if (enable_detect) {\n          // update pointerevent\n          if (Hammer.HAS_POINTEREVENTS && eventType != Hammer.EVENT_END) {\n            count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);\n          } // touch\n          else if (sourceEventType.match(/touch/)) {\n              count_touches = ev.touches.length;\n            } // mouse\n            else if (!touch_triggered) {\n                count_touches = sourceEventType.match(/up/) ? 0 : 1;\n              } // if we are in a end event, but when we remove one touch and\n          // we still have enough, set eventType to move\n\n\n          if (count_touches > 0 && eventType == Hammer.EVENT_END) {\n            eventType = Hammer.EVENT_MOVE;\n          } // no touches, force the end event\n          else if (!count_touches) {\n              eventType = Hammer.EVENT_END;\n            } // store the last move event\n\n\n          if (count_touches || last_move_event === null) {\n            last_move_event = ev;\n          } // trigger the handler\n\n\n          handler.call(Hammer.detection, self.collectEventData(element, eventType, self.getTouchList(last_move_event, eventType), ev)); // remove pointerevent from list\n\n          if (Hammer.HAS_POINTEREVENTS && eventType == Hammer.EVENT_END) {\n            count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);\n          }\n        } // on the end we reset everything\n\n\n        if (!count_touches) {\n          last_move_event = null;\n          enable_detect = false;\n          touch_triggered = false;\n          Hammer.PointerEvent.reset();\n        }\n      }, {\n        passive: true\n      }); // FIXME - PASSIVE\n    },\n\n    /**\n     * we have different events for each device/browser\n     * determine what we need and set them in the Hammer.EVENT_TYPES constant\n     */\n    determineEventTypes: function determineEventTypes() {\n      // determine the eventtype we want to set\n      var types; // pointerEvents magic\n\n      if (Hammer.HAS_POINTEREVENTS) {\n        types = Hammer.PointerEvent.getEvents();\n      } // on Android, iOS, blackberry, windows mobile we dont want any mouseevents\n      else if (Hammer.NO_MOUSEEVENTS) {\n          types = ['touchstart', 'touchmove', 'touchend touchcancel'];\n        } // for non pointer events browsers and mixed browsers,\n        // like chrome on windows8 touch laptop\n        else {\n            types = ['touchstart mousedown', 'touchmove mousemove', 'touchend touchcancel mouseup'];\n          }\n\n      Hammer.EVENT_TYPES[Hammer.EVENT_START] = types[0];\n      Hammer.EVENT_TYPES[Hammer.EVENT_MOVE] = types[1];\n      Hammer.EVENT_TYPES[Hammer.EVENT_END] = types[2];\n    },\n\n    /**\n     * create touchlist depending on the event\n     * @param   {Object}    ev\n     * @param   {String}    eventType   used by the fakemultitouch plugin\n     */\n    getTouchList: function getTouchList(ev\n    /*, eventType*/\n    ) {\n      // get the fake pointerEvent touchlist\n      if (Hammer.HAS_POINTEREVENTS) {\n        return Hammer.PointerEvent.getTouchList();\n      } // get the touchlist\n      else if (ev.touches) {\n          return ev.touches;\n        } // make fake touchlist from mouse position\n        else {\n            ev.identifier = 1;\n            return [ev];\n          }\n    },\n\n    /**\n     * collect event data for Hammer js\n     * @param   {HTMLElement}   element\n     * @param   {String}        eventType        like Hammer.EVENT_MOVE\n     * @param   {Object}        eventData\n     */\n    collectEventData: function collectEventData(element, eventType, touches, ev) {\n      // find out pointerType\n      var pointerType = Hammer.POINTER_TOUCH;\n\n      if (ev.type.match(/mouse/) || Hammer.PointerEvent.matchType(Hammer.POINTER_MOUSE, ev)) {\n        pointerType = Hammer.POINTER_MOUSE;\n      }\n\n      return {\n        center: Hammer.utils.getCenter(touches),\n        timeStamp: new Date().getTime(),\n        target: ev.target,\n        touches: touches,\n        eventType: eventType,\n        pointerType: pointerType,\n        srcEvent: ev,\n\n        /**\n         * prevent the browser default actions\n         * mostly used to disable scrolling of the browser\n         */\n        preventDefault: function preventDefault() {\n          if (this.srcEvent.preventManipulation) {\n            this.srcEvent.preventManipulation();\n          }\n\n          if (this.srcEvent.preventDefault) {\n            this.srcEvent.preventDefault();\n          }\n        },\n\n        /**\n         * stop bubbling the event up to its parents\n         */\n        stopPropagation: function stopPropagation() {\n          this.srcEvent.stopPropagation();\n        },\n\n        /**\n         * immediately stop gesture detection\n         * might be useful after a swipe was detected\n         * @return {*}\n         */\n        stopDetect: function stopDetect() {\n          return Hammer.detection.stopDetect();\n        }\n      };\n    }\n  };\n  Hammer.PointerEvent = {\n    /**\n     * holds all pointers\n     * @type {Object}\n     */\n    pointers: {},\n\n    /**\n     * get a list of pointers\n     * @returns {Array}     touchlist\n     */\n    getTouchList: function getTouchList() {\n      var self = this;\n      var touchlist = []; // we can use forEach since pointerEvents only is in IE10\n\n      Hammer.utils.each(self.pointers, function (pointer) {\n        touchlist.push(pointer);\n      });\n      return touchlist;\n    },\n\n    /**\n     * update the position of a pointer\n     * @param   {String}   type             Hammer.EVENT_END\n     * @param   {Object}   pointerEvent\n     */\n    updatePointer: function updatePointer(type, pointerEvent) {\n      if (type == Hammer.EVENT_END) {\n        this.pointers = {};\n      } else {\n        pointerEvent.identifier = pointerEvent.pointerId;\n        this.pointers[pointerEvent.pointerId] = pointerEvent;\n      }\n\n      return Object.keys(this.pointers).length;\n    },\n\n    /**\n     * check if ev matches pointertype\n     * @param   {String}        pointerType     Hammer.POINTER_MOUSE\n     * @param   {PointerEvent}  ev\n     */\n    matchType: function matchType(pointerType, ev) {\n      if (!ev.pointerType) {\n        return false;\n      }\n\n      var pt = ev.pointerType,\n          types = {};\n      types[Hammer.POINTER_MOUSE] = pt === ev.MSPOINTER_TYPE_MOUSE || pt === Hammer.POINTER_MOUSE;\n      types[Hammer.POINTER_TOUCH] = pt === ev.MSPOINTER_TYPE_TOUCH || pt === Hammer.POINTER_TOUCH;\n      types[Hammer.POINTER_PEN] = pt === ev.MSPOINTER_TYPE_PEN || pt === Hammer.POINTER_PEN;\n      return types[pointerType];\n    },\n\n    /**\n     * get events\n     */\n    getEvents: function getEvents() {\n      return ['pointerdown MSPointerDown', 'pointermove MSPointerMove', 'pointerup pointercancel MSPointerUp MSPointerCancel'];\n    },\n\n    /**\n     * reset the list\n     */\n    reset: function reset() {\n      this.pointers = {};\n    }\n  };\n  Hammer.detection = {\n    // contains all registred Hammer.gestures in the correct order\n    gestures: [],\n    // data of the current Hammer.gesture detection session\n    current: null,\n    // the previous Hammer.gesture session data\n    // is a full clone of the previous gesture.current object\n    previous: null,\n    // when this becomes true, no gestures are fired\n    stopped: false,\n\n    /**\n     * start Hammer.gesture detection\n     * @param   {Hammer.Instance}   inst\n     * @param   {Object}            eventData\n     */\n    startDetect: function startDetect(inst, eventData) {\n      // already busy with a Hammer.gesture detection on an element\n      if (this.current) {\n        return;\n      }\n\n      this.stopped = false;\n      this.current = {\n        inst: inst,\n        // reference to HammerInstance we're working for\n        startEvent: Hammer.utils.extend({}, eventData),\n        // start eventData for distances, timing etc\n        lastEvent: false,\n        // last eventData\n        name: '' // current gesture we're in/detected, can be 'tap', 'hold' etc\n\n      };\n      this.detect(eventData);\n    },\n\n    /**\n     * Hammer.gesture detection\n     * @param   {Object}    eventData\n     */\n    detect: function detect(eventData) {\n      if (!this.current || this.stopped) {\n        return;\n      } // extend event data with calculations about scale, distance etc\n\n\n      eventData = this.extendEventData(eventData); // instance options\n\n      var inst_options = this.current.inst.options; // call Hammer.gesture handlers\n\n      Hammer.utils.each(this.gestures, function (gesture) {\n        // only when the instance options have enabled this gesture\n        if (!this.stopped && inst_options[gesture.name] !== false) {\n          // if a handler returns false, we stop with the detection\n          if (gesture.handler.call(gesture, eventData, this.current.inst) === false) {\n            this.stopDetect();\n            return false;\n          }\n        }\n      }, this); // store as previous event event\n\n      if (this.current) {\n        this.current.lastEvent = eventData;\n      } // endevent, but not the last touch, so dont stop\n\n\n      if (eventData.eventType == Hammer.EVENT_END && !eventData.touches.length - 1) {\n        this.stopDetect();\n      }\n\n      return eventData;\n    },\n\n    /**\n     * clear the Hammer.gesture vars\n     * this is called on endDetect, but can also be used when a final Hammer.gesture has been detected\n     * to stop other Hammer.gestures from being fired\n     */\n    stopDetect: function stopDetect() {\n      // clone current data to the store as the previous gesture\n      // used for the double tap gesture, since this is an other gesture detect session\n      this.previous = Hammer.utils.extend({}, this.current); // reset the current\n\n      this.current = null; // stopped!\n\n      this.stopped = true;\n    },\n\n    /**\n     * extend eventData for Hammer.gestures\n     * @param   {Object}   ev\n     * @returns {Object}   ev\n     */\n    extendEventData: function extendEventData(ev) {\n      var startEv = this.current.startEvent; // if the touches change, set the new touches over the startEvent touches\n      // this because touchevents don't have all the touches on touchstart, or the\n      // user must place his fingers at the EXACT same time on the screen, which is not realistic\n      // but, sometimes it happens that both fingers are touching at the EXACT same time\n\n      if (startEv && (ev.touches.length != startEv.touches.length || ev.touches === startEv.touches)) {\n        // extend 1 level deep to get the touchlist with the touch objects\n        startEv.touches = [];\n        Hammer.utils.each(ev.touches, function (touch) {\n          startEv.touches.push(Hammer.utils.extend({}, touch));\n        });\n      }\n\n      var delta_time = ev.timeStamp - startEv.timeStamp,\n          delta_x = ev.center.pageX - startEv.center.pageX,\n          delta_y = ev.center.pageY - startEv.center.pageY,\n          velocity = Hammer.utils.getVelocity(delta_time, delta_x, delta_y),\n          interimAngle,\n          interimDirection; // end events (e.g. dragend) don't have useful values for interimDirection & interimAngle\n      // because the previous event has exactly the same coordinates\n      // so for end events, take the previous values of interimDirection & interimAngle\n      // instead of recalculating them and getting a spurious '0'\n\n      if (ev.eventType === 'end') {\n        interimAngle = this.current.lastEvent && this.current.lastEvent.interimAngle;\n        interimDirection = this.current.lastEvent && this.current.lastEvent.interimDirection;\n      } else {\n        interimAngle = this.current.lastEvent && Hammer.utils.getAngle(this.current.lastEvent.center, ev.center);\n        interimDirection = this.current.lastEvent && Hammer.utils.getDirection(this.current.lastEvent.center, ev.center);\n      }\n\n      Hammer.utils.extend(ev, {\n        deltaTime: delta_time,\n        deltaX: delta_x,\n        deltaY: delta_y,\n        velocityX: velocity.x,\n        velocityY: velocity.y,\n        distance: Hammer.utils.getDistance(startEv.center, ev.center),\n        angle: Hammer.utils.getAngle(startEv.center, ev.center),\n        interimAngle: interimAngle,\n        direction: Hammer.utils.getDirection(startEv.center, ev.center),\n        interimDirection: interimDirection,\n        scale: Hammer.utils.getScale(startEv.touches, ev.touches),\n        rotation: Hammer.utils.getRotation(startEv.touches, ev.touches),\n        startEvent: startEv\n      });\n      return ev;\n    },\n\n    /**\n     * register new gesture\n     * @param   {Object}    gesture object, see gestures.js for documentation\n     * @returns {Array}     gestures\n     */\n    register: function register(gesture) {\n      // add an enable gesture options if there is no given\n      var options = gesture.defaults || {};\n\n      if (options[gesture.name] === undefined) {\n        options[gesture.name] = true;\n      } // extend Hammer default options with the Hammer.gesture options\n\n\n      Hammer.utils.extend(Hammer.defaults, options, true); // set its index\n\n      gesture.index = gesture.index || 1000; // add Hammer.gesture to the list\n\n      this.gestures.push(gesture); // sort the list by index\n\n      this.gestures.sort(function (a, b) {\n        if (a.index < b.index) {\n          return -1;\n        }\n\n        if (a.index > b.index) {\n          return 1;\n        }\n\n        return 0;\n      });\n      return this.gestures;\n    }\n  };\n  /**\n   * Drag\n   * Move with x fingers (default 1) around on the page. Blocking the scrolling when\n   * moving left and right is a good practice. When all the drag events are blocking\n   * you disable scrolling on that area.\n   * @events  drag, drapleft, dragright, dragup, dragdown\n   */\n\n  Hammer.gestures.Drag = {\n    name: 'drag',\n    index: 50,\n    defaults: {\n      drag_min_distance: 10,\n      // Set correct_for_drag_min_distance to true to make the starting point of the drag\n      // be calculated from where the drag was triggered, not from where the touch started.\n      // Useful to avoid a jerk-starting drag, which can make fine-adjustments\n      // through dragging difficult, and be visually unappealing.\n      correct_for_drag_min_distance: true,\n      // set 0 for unlimited, but this can conflict with transform\n      drag_max_touches: 1,\n      // prevent default browser behavior when dragging occurs\n      // be careful with it, it makes the element a blocking element\n      // when you are using the drag gesture, it is a good practice to set this true\n      drag_block_horizontal: false,\n      drag_block_vertical: false,\n      // drag_lock_to_axis keeps the drag gesture on the axis that it started on,\n      // It disallows vertical directions if the initial direction was horizontal, and vice versa.\n      drag_lock_to_axis: false,\n      // drag lock only kicks in when distance > drag_lock_min_distance\n      // This way, locking occurs only when the distance has become large enough to reliably determine the direction\n      drag_lock_min_distance: 25\n    },\n    triggered: false,\n    handler: function dragGesture(ev, inst) {\n      // current gesture isnt drag, but dragged is true\n      // this means an other gesture is busy. now call dragend\n      if (Hammer.detection.current.name != this.name && this.triggered) {\n        inst.trigger(this.name + 'end', ev);\n        this.triggered = false;\n        return;\n      } // max touches\n\n\n      if (inst.options.drag_max_touches > 0 && ev.touches.length > inst.options.drag_max_touches) {\n        return;\n      }\n\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          this.triggered = false;\n          break;\n\n        case Hammer.EVENT_MOVE:\n          // when the distance we moved is too small we skip this gesture\n          // or we can be already in dragging\n          if (ev.distance < inst.options.drag_min_distance && Hammer.detection.current.name != this.name) {\n            return;\n          } // we are dragging!\n\n\n          if (Hammer.detection.current.name != this.name) {\n            Hammer.detection.current.name = this.name;\n\n            if (inst.options.correct_for_drag_min_distance && ev.distance > 0) {\n              // When a drag is triggered, set the event center to drag_min_distance pixels from the original event center.\n              // Without this correction, the dragged distance would jumpstart at drag_min_distance pixels instead of at 0.\n              // It might be useful to save the original start point somewhere\n              var factor = Math.abs(inst.options.drag_min_distance / ev.distance);\n              Hammer.detection.current.startEvent.center.pageX += ev.deltaX * factor;\n              Hammer.detection.current.startEvent.center.pageY += ev.deltaY * factor; // recalculate event data using new start point\n\n              ev = Hammer.detection.extendEventData(ev);\n            }\n          } // lock drag to axis?\n\n\n          if (Hammer.detection.current.lastEvent.drag_locked_to_axis || inst.options.drag_lock_to_axis && inst.options.drag_lock_min_distance <= ev.distance) {\n            ev.drag_locked_to_axis = true;\n          }\n\n          var last_direction = Hammer.detection.current.lastEvent.direction;\n\n          if (ev.drag_locked_to_axis && last_direction !== ev.direction) {\n            // keep direction on the axis that the drag gesture started on\n            if (Hammer.utils.isVertical(last_direction)) {\n              ev.direction = ev.deltaY < 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;\n            } else {\n              ev.direction = ev.deltaX < 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;\n            }\n          } // first time, trigger dragstart event\n\n\n          if (!this.triggered) {\n            inst.trigger(this.name + 'start', ev);\n            this.triggered = true;\n          } // trigger normal event\n\n\n          inst.trigger(this.name, ev); // direction event, like dragdown\n\n          inst.trigger(this.name + ev.direction, ev); // block the browser events\n\n          if (inst.options.drag_block_vertical && Hammer.utils.isVertical(ev.direction) || inst.options.drag_block_horizontal && !Hammer.utils.isVertical(ev.direction)) {\n            ev.preventDefault();\n          }\n\n          break;\n\n        case Hammer.EVENT_END:\n          // trigger dragend\n          if (this.triggered) {\n            inst.trigger(this.name + 'end', ev);\n          }\n\n          this.triggered = false;\n          break;\n      }\n    }\n  };\n  /**\n   * Hold\n   * Touch stays at the same place for x time\n   * @events  hold\n   */\n\n  Hammer.gestures.Hold = {\n    name: 'hold',\n    index: 10,\n    defaults: {\n      hold_timeout: 500,\n      hold_threshold: 1\n    },\n    timer: null,\n    handler: function holdGesture(ev, inst) {\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          // clear any running timers\n          clearTimeout(this.timer); // set the gesture so we can check in the timeout if it still is\n\n          Hammer.detection.current.name = this.name; // set timer and if after the timeout it still is hold,\n          // we trigger the hold event\n\n          this.timer = setTimeout(function () {\n            if (Hammer.detection.current.name == 'hold') {\n              inst.trigger('hold', ev);\n            }\n          }, inst.options.hold_timeout);\n          break;\n        // when you move or end we clear the timer\n\n        case Hammer.EVENT_MOVE:\n          if (ev.distance > inst.options.hold_threshold) {\n            clearTimeout(this.timer);\n          }\n\n          break;\n\n        case Hammer.EVENT_END:\n          clearTimeout(this.timer);\n          break;\n      }\n    }\n  };\n  /**\n   * Release\n   * Called as last, tells the user has released the screen\n   * @events  release\n   */\n\n  Hammer.gestures.Release = {\n    name: 'release',\n    index: Infinity,\n    handler: function releaseGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END) {\n        inst.trigger(this.name, ev);\n      }\n    }\n  };\n  /**\n   * Swipe\n   * triggers swipe events when the end velocity is above the threshold\n   * @events  swipe, swipeleft, swiperight, swipeup, swipedown\n   */\n\n  Hammer.gestures.Swipe = {\n    name: 'swipe',\n    index: 40,\n    defaults: {\n      // set 0 for unlimited, but this can conflict with transform\n      swipe_min_touches: 1,\n      swipe_max_touches: 1,\n      swipe_velocity: 0.7\n    },\n    handler: function swipeGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END) {\n        // max touches\n        if (inst.options.swipe_max_touches > 0 && ev.touches.length < inst.options.swipe_min_touches && ev.touches.length > inst.options.swipe_max_touches) {\n          return;\n        } // when the distance we moved is too small we skip this gesture\n        // or we can be already in dragging\n\n\n        if (ev.velocityX > inst.options.swipe_velocity || ev.velocityY > inst.options.swipe_velocity) {\n          // trigger swipe events\n          inst.trigger(this.name, ev);\n          inst.trigger(this.name + ev.direction, ev);\n        }\n      }\n    }\n  };\n  /**\n   * Tap/DoubleTap\n   * Quick touch at a place or double at the same place\n   * @events  tap, doubletap\n   */\n\n  Hammer.gestures.Tap = {\n    name: 'tap',\n    index: 100,\n    defaults: {\n      tap_max_touchtime: 250,\n      tap_max_distance: 10,\n      tap_always: true,\n      doubletap_distance: 20,\n      doubletap_interval: 300\n    },\n    handler: function tapGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END && ev.srcEvent.type != 'touchcancel') {\n        // previous gesture, for the double tap since these are two different gesture detections\n        var prev = Hammer.detection.previous,\n            did_doubletap = false; // when the touchtime is higher then the max touch time\n        // or when the moving distance is too much\n\n        if (ev.deltaTime > inst.options.tap_max_touchtime || ev.distance > inst.options.tap_max_distance) {\n          return;\n        } // check if double tap\n\n\n        if (prev && prev.name == 'tap' && ev.timeStamp - prev.lastEvent.timeStamp < inst.options.doubletap_interval && ev.distance < inst.options.doubletap_distance) {\n          inst.trigger('doubletap', ev);\n          did_doubletap = true;\n        } // do a single tap\n\n\n        if (!did_doubletap || inst.options.tap_always) {\n          Hammer.detection.current.name = 'tap';\n          inst.trigger(Hammer.detection.current.name, ev);\n        }\n      }\n    }\n  };\n  /**\n   * Touch\n   * Called as first, tells the user has touched the screen\n   * @events  touch\n   */\n\n  Hammer.gestures.Touch = {\n    name: 'touch',\n    index: -Infinity,\n    defaults: {\n      // call preventDefault at touchstart, and makes the element blocking by\n      // disabling the scrolling of the page, but it improves gestures like\n      // transforming and dragging.\n      // be careful with using this, it can be very annoying for users to be stuck\n      // on the page\n      prevent_default: false,\n      // disable mouse events, so only touch (or pen!) input triggers events\n      prevent_mouseevents: false\n    },\n    handler: function touchGesture(ev, inst) {\n      if (inst.options.prevent_mouseevents && ev.pointerType == Hammer.POINTER_MOUSE) {\n        ev.stopDetect();\n        return;\n      }\n\n      if (inst.options.prevent_default) {\n        ev.preventDefault();\n      }\n\n      if (ev.eventType == Hammer.EVENT_START) {\n        inst.trigger(this.name, ev);\n      }\n    }\n  };\n  /**\n   * Transform\n   * User want to scale or rotate with 2 fingers\n   * @events  transform, pinch, pinchin, pinchout, rotate\n   */\n\n  Hammer.gestures.Transform = {\n    name: 'transform',\n    index: 45,\n    defaults: {\n      // factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1\n      transform_min_scale: 0.01,\n      // rotation in degrees\n      transform_min_rotation: 1,\n      // prevent default browser behavior when two touches are on the screen\n      // but it makes the element a blocking element\n      // when you are using the transform gesture, it is a good practice to set this true\n      transform_always_block: false\n    },\n    triggered: false,\n    handler: function transformGesture(ev, inst) {\n      // current gesture isnt drag, but dragged is true\n      // this means an other gesture is busy. now call dragend\n      if (Hammer.detection.current.name != this.name && this.triggered) {\n        inst.trigger(this.name + 'end', ev);\n        this.triggered = false;\n        return;\n      } // atleast multitouch\n\n\n      if (ev.touches.length < 2) {\n        return;\n      } // prevent default when two fingers are on the screen\n\n\n      if (inst.options.transform_always_block) {\n        ev.preventDefault();\n      }\n\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          this.triggered = false;\n          break;\n\n        case Hammer.EVENT_MOVE:\n          var scale_threshold = Math.abs(1 - ev.scale);\n          var rotation_threshold = Math.abs(ev.rotation); // when the distance we moved is too small we skip this gesture\n          // or we can be already in dragging\n\n          if (scale_threshold < inst.options.transform_min_scale && rotation_threshold < inst.options.transform_min_rotation) {\n            return;\n          } // we are transforming!\n\n\n          Hammer.detection.current.name = this.name; // first time, trigger dragstart event\n\n          if (!this.triggered) {\n            inst.trigger(this.name + 'start', ev);\n            this.triggered = true;\n          }\n\n          inst.trigger(this.name, ev); // basic transform event\n          // trigger rotate event\n\n          if (rotation_threshold > inst.options.transform_min_rotation) {\n            inst.trigger('rotate', ev);\n          } // trigger pinch event\n\n\n          if (scale_threshold > inst.options.transform_min_scale) {\n            inst.trigger('pinch', ev);\n            inst.trigger('pinch' + (ev.scale < 1 ? 'in' : 'out'), ev);\n          }\n\n          break;\n\n        case Hammer.EVENT_END:\n          // trigger dragend\n          if (this.triggered) {\n            inst.trigger(this.name + 'end', ev);\n          }\n\n          this.triggered = false;\n          break;\n      }\n    }\n  }; // Based off Lo-Dash's excellent UMD wrapper (slightly modified) - https://github.com/bestiejs/lodash/blob/master/lodash.js#L5515-L5543\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n\n  if (typeof define == 'function' && __webpack_require__(/*! !webpack amd options */ \"./node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/amd-options.js\")) {\n    // define as an anonymous module\n    define(function () {\n      return Hammer;\n    });\n  } // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if ( true && module.exports) {\n      module.exports = Hammer;\n    } else {\n      window.Hammer = Hammer;\n    }\n\n  return Hammer;\n}(window);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Hammer);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../shinyGator/node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/hammer.js\n")},"../gator/js/index.js":
/*!****************************!*\
  !*** ../gator/js/index.js ***!
  \****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_ClustalRunner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/ClustalRunner */ "../gator/js/lib/ClustalRunner.js");\n/* harmony import */ var _lib_UniprotReader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/UniprotReader */ "../gator/js/lib/UniprotReader.js");\n/* harmony import */ var _lib_UserdataReader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/UserdataReader */ "../gator/js/lib/UserdataReader.js");\n/* harmony import */ var _lib_GenomeReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/GenomeReader */ "../gator/js/lib/GenomeReader.js");\n/* harmony import */ var _lib_GatorDataReader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/GatorDataReader */ "../gator/js/lib/GatorDataReader.js");\n/* harmony import */ var _lib_Service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/Service */ "../gator/js/lib/Service.js");\n/* harmony import */ var _lib_MASCP__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/MASCP */ "../gator/js/lib/MASCP.js");\n/* harmony import */ var _lib_CondensedSequenceRenderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/CondensedSequenceRenderer */ "../gator/js/lib/CondensedSequenceRenderer.js");\n/* harmony import */ var _lib_Dragger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/Dragger */ "../gator/js/lib/Dragger.js");\n/* harmony import */ var _lib_GatorComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/GatorComponent */ "../gator/js/lib/GatorComponent.js");\n/* harmony import */ var _lib_GeneComponent__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/GeneComponent */ "../gator/js/lib/GeneComponent.js");\n/* harmony import */ var _lib_TrackRendererComponent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/TrackRendererComponent */ "../gator/js/lib/TrackRendererComponent.js");\n\n\n\n\n\n\n\n\n\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].ClustalRunner = _lib_ClustalRunner__WEBPACK_IMPORTED_MODULE_0__["default"];\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].UniprotReader = _lib_UniprotReader__WEBPACK_IMPORTED_MODULE_1__["default"];\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].UserdataReader = _lib_UserdataReader__WEBPACK_IMPORTED_MODULE_2__["default"];\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].GenomeReader = _lib_GenomeReader__WEBPACK_IMPORTED_MODULE_3__["default"];\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].GatorDataReader = _lib_GatorDataReader__WEBPACK_IMPORTED_MODULE_4__["default"];\n\n\n\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].GatorComponent = _lib_GatorComponent__WEBPACK_IMPORTED_MODULE_9__["default"];\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].GeneComponent = _lib_GeneComponent__WEBPACK_IMPORTED_MODULE_10__["default"];\n_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"].TrackComponent = _lib_TrackRendererComponent__WEBPACK_IMPORTED_MODULE_11__["default"];\n/* harmony default export */ __webpack_exports__["default"] = (_lib_MASCP__WEBPACK_IMPORTED_MODULE_6__["default"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZ2F0b3IvanMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZ2F0b3IvanMvaW5kZXguanM/NjYyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2x1c3RhbFJ1bm5lciBmcm9tICcuL2xpYi9DbHVzdGFsUnVubmVyJztcbmltcG9ydCBVbmlwcm90UmVhZGVyIGZyb20gJy4vbGliL1VuaXByb3RSZWFkZXInO1xuaW1wb3J0IFVzZXJkYXRhUmVhZGVyIGZyb20gJy4vbGliL1VzZXJkYXRhUmVhZGVyJztcbmltcG9ydCBHZW5vbWVSZWFkZXIgZnJvbSAnLi9saWIvR2Vub21lUmVhZGVyJztcbmltcG9ydCBHYXRvckRhdGFSZWFkZXIgZnJvbSAnLi9saWIvR2F0b3JEYXRhUmVhZGVyJztcbmltcG9ydCBTZXJ2aWNlIGZyb20gJy4vbGliL1NlcnZpY2UnO1xuXG5cbmltcG9ydCBNQVNDUCBmcm9tICcuL2xpYi9NQVNDUCc7XG5pbXBvcnQgQ29uZGVuc2VkU2VxdWVuY2VSZW5kZXJlciBmcm9tICcuL2xpYi9Db25kZW5zZWRTZXF1ZW5jZVJlbmRlcmVyJztcblxuXG5pbXBvcnQgRHJhZ2dlciBmcm9tICcuL2xpYi9EcmFnZ2VyJztcblxuTUFTQ1AuQ2x1c3RhbFJ1bm5lciA9IENsdXN0YWxSdW5uZXI7XG5NQVNDUC5Vbmlwcm90UmVhZGVyID0gVW5pcHJvdFJlYWRlcjtcbk1BU0NQLlVzZXJkYXRhUmVhZGVyICA9IFVzZXJkYXRhUmVhZGVyIDtcbk1BU0NQLkdlbm9tZVJlYWRlciA9IEdlbm9tZVJlYWRlcjtcbk1BU0NQLkdhdG9yRGF0YVJlYWRlciA9IEdhdG9yRGF0YVJlYWRlcjtcblxuaW1wb3J0IEdhdG9yQ29tcG9uZW50IGZyb20gJy4vbGliL0dhdG9yQ29tcG9uZW50JztcblxuaW1wb3J0IEdlbmVDb21wb25lbnQgZnJvbSAnLi9saWIvR2VuZUNvbXBvbmVudCc7XG5cbmltcG9ydCBUcmFja0NvbXBvbmVudCBmcm9tICcuL2xpYi9UcmFja1JlbmRlcmVyQ29tcG9uZW50JztcblxuTUFTQ1AuR2F0b3JDb21wb25lbnQgPSBHYXRvckNvbXBvbmVudDtcbk1BU0NQLkdlbmVDb21wb25lbnQgPSBHZW5lQ29tcG9uZW50O1xuTUFTQ1AuVHJhY2tDb21wb25lbnQgPSBUcmFja0NvbXBvbmVudDtcblxuXG5leHBvcnQgZGVmYXVsdCBNQVNDUDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUdBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../gator/js/index.js\n')},"../gator/js/jsandbox.js":
/*!*******************************!*\
  !*** ../gator/js/jsandbox.js ***!
  \*******************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/*\n * JSandbox JavaScript Library v0.2.3\n *\n * With modifications to create a worker function inline so that\n * we can just include this single file\n *\n * 2009-01-25\n * By Elijah Grey, http://eligrey.com\n * Licensed under the X11/MIT License\n *   See LICENSE.md\n */\n\n/*global self */\n\n/*jslint undef: true, nomen: true, eqeqeq: true, bitwise: true, regexp: true,\nnewcap: true, immed: true, maxerr: 1000, strict: true */\n\n/*! @source http://purl.eligrey.com/github/jsandbox/blob/master/src/jsandbox.js*/\n\n\nvar JSandbox = function (self) {\n  var undef_type = "undefined",\n      doc = self.document,\n      Worker = self.Worker;\n\n  if (typeof Worker === undef_type) {\n    return;\n  }\n\n  var // repeatedly used properties/strings (for minification)\n  $eval = "eval",\n      $exec = "exec",\n      $load = "load",\n      $requests = "requests",\n      $input = "input",\n      $terminate = "terminate",\n      $data = "data",\n      $callback = "callback",\n      $onerror = "onerror",\n      $worker = "worker",\n      $onresponse = "onresponse",\n      $prototype = "prototype",\n      $call = "call",\n      str_type = "string",\n      fun_type = "function",\n      Sandbox = function Sandbox() {\n    var sandbox = this;\n\n    if (!(sandbox instanceof Sandbox)) {\n      return new Sandbox();\n    }\n\n    try {\n      sandbox[$worker] = new Worker(Sandbox.url);\n    } catch (exception) {\n      // Internet Explorer closes the BLOB before we can use it\n      if (exception.name === "SecurityError") {\n        sandbox[$worker] = new Worker(window.URL.createObjectURL(new Blob([\'(\' + default_worker_function.toString() + \'(self,eval))\'], {\n          \'type\': \'text/javascript\'\n        })));\n      }\n    }\n\n    sandbox[$requests] = {};\n\n    sandbox[$worker].onmessage = function (event) {\n      var data = event[$data],\n          request;\n\n      if (typeof data !== "object") {\n        return;\n      }\n\n      if (data.id == "log") {\n        console.log(data.message);\n        return;\n      }\n\n      request = sandbox[$requests][data.id];\n\n      if (request) {\n        if (data.error) {\n          if (typeof sandbox[$onerror] === fun_type) {\n            sandbox[$onerror](data, request);\n          }\n\n          if (typeof request[$onerror] === fun_type) {\n            request[$onerror][$call](sandbox, data.error);\n          }\n        } else {\n          if (typeof sandbox[$onresponse] === fun_type) {\n            sandbox[$onresponse](data, request);\n          }\n\n          if (typeof request[$callback] === fun_type) {\n            request[$callback][$call](sandbox, data.results);\n          }\n        }\n\n        delete sandbox[$requests][data.id];\n      }\n    };\n  },\n      proto = Sandbox[$prototype],\n      createRequestMethod = function createRequestMethod(method) {\n    proto[method] = function (options, callback, input, onerror) {\n      if (typeof options === str_type || Object[$prototype].toString[$call](options) === "[object Array]" || arguments.length > 1) {\n        // called in (data, callback, input, onerror) style\n        options = {\n          data: options,\n          input: input,\n          callback: callback,\n          onerror: onerror\n        };\n      }\n\n      if (method === $load && typeof options[$data] === str_type) {\n        options[$data] = [options[$data]];\n      }\n\n      var data = options[$data],\n          id = this.createRequestID();\n      input = options[$input];\n      delete options[$data];\n      delete options[$input];\n      this[$requests][id] = options;\n      this[$worker].postMessage({\n        id: id,\n        method: method,\n        data: data,\n        input: input\n      });\n      return id;\n    };\n\n    Sandbox[method] = function () {\n      var sandbox = new Sandbox();\n\n      sandbox[$onresponse] = sandbox[$onerror] = function () {\n        sandbox[$terminate]();\n        sandbox = null;\n      };\n\n      Sandbox[$prototype][method].apply(sandbox, Array[$prototype].slice[$call](arguments));\n      return Sandbox;\n    };\n  },\n      methods = [$eval, $load, $exec],\n      i = 3; // methods.length\n\n\n  while (i--) {\n    createRequestMethod(methods[i]);\n  }\n\n  proto[$terminate] = function () {\n    this[$requests] = {};\n    this[$worker].onmessage = null;\n    this[$worker][$terminate]();\n  };\n\n  proto.abort = function (id) {\n    delete this[$requests][id];\n  };\n\n  proto.createRequestID = function () {\n    var id = Math.random().toString();\n\n    if (id in this[$requests]) {\n      return this.createRequestID();\n    }\n\n    return id;\n  };\n\n  if (typeof doc !== undef_type) {\n    var linkElems = doc.getElementsByTagName("link");\n    i = linkElems.length;\n\n    while (i--) {\n      if (linkElems[i].getAttribute("rel") === "jsandbox") {\n        Sandbox.url = linkElems[i].getAttribute("href");\n        break;\n      }\n    }\n  }\n\n  var default_worker_function = function default_worker_function(self, globalEval) {\n    "use strict";\n\n    var postMessage = self.postMessage,\n        importScripts = self.importScripts,\n        messageEventType = "message",\n        messageHandler = function messageHandler(event) {\n      var request = event.data,\n          response = {};\n      response.id = request.id;\n      var data = request.data;\n      self.input = request.input || {};\n\n      try {\n        switch (request.method) {\n          case "eval":\n            // JSLint has something against indenting cases\n            response.results = globalEval(data);\n            break;\n\n          case "exec":\n            importScripts("data:application/javascript," + encodeURIComponent(data));\n            break;\n\n          case "load":\n            importScripts.apply(self, data);\n            break;\n        }\n      } catch (e) {\n        response.code = e.message;\n        response.error = e.stack;\n        response.line = e.lineNumber;\n        response.fileName = e.fileName;\n      }\n\n      delete self.input;\n\n      try {\n        delete self.onmessage; // in case the code defined it\n      } catch (e) {}\n\n      postMessage(response);\n    };\n\n    if (self.addEventListener) {\n      self.addEventListener(messageEventType, messageHandler, false);\n    } else if (self.attachEvent) {\n      // for future compatibility with IE\n      self.attachEvent("on" + messageEventType, messageHandler);\n    }\n\n    self.window = self; // provide a window object for scripts\n\n    self.console = {\n      log: function log(message) {\n        postMessage({\n          "id": "log",\n          "message": message\n        });\n      }\n    }; // dereference unsafe functions\n    // some might not be dereferenced: https://bugzilla.mozilla.org/show_bug.cgi?id=512464\n\n    self.Worker = self.addEventListener = self.removeEventListener = self.importScripts = self.XMLHttpRequest = self.postMessage = //self.dispatchEvent       =\n    // in case IE implements web workers\n    self.attachEvent = self.detachEvent = self.ActiveXObject = undefined;\n  };\n\n  if (!Sandbox.url) {\n    Sandbox.url = window.URL.createObjectURL(new Blob([\'(\' + default_worker_function.toString() + \'(self,eval))\'], {\n      \'type\': \'text/javascript\'\n    }));\n  }\n\n  return Sandbox;\n}(self),\n    Sandbox = JSandbox;\n\n/* harmony default export */ __webpack_exports__["default"] = (JSandbox);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/jsandbox.js\n')},"../gator/js/lib/ClustalRunner.js":
/*!****************************************!*\
  !*** ../gator/js/lib/ClustalRunner.js ***!
  \****************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Service */ \"../gator/js/lib/Service.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"../gator/js/bean.js\");\n/** @fileOverview   Classes for reading data from the Clustal tool\n */\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Clustal for given sequences\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\n\nconst ClustalRunner = _Service__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buildService(function (data) {\n  this._raw_data = data;\n\n  if (data && typeof data == 'string') {\n    this._raw_data = {\n      'data': {\n        'sequences': this.getSequences(),\n        'alignment': this.getAlignment()\n      }\n    };\n  }\n\n  return this;\n});\nClustalRunner.SERVICE_URL = 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/run/';\n\nClustalRunner.hash = function (str) {\n  var hash = 0;\n\n  for (i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    hash = char + (hash << 6) + (hash << 16) - hash;\n  }\n\n  return hash;\n};\n\nClustalRunner.prototype.requestData = function () {\n  var sequences = [].concat(this.sequences || []);\n  var self = this;\n  this.agi = ClustalRunner.hash(this.sequences.join(',')) + '';\n\n  if (!ClustalRunner.SERVICE_URL.match(/ebi/)) {\n    return {\n      type: \"POST\",\n      dataType: \"json\",\n      api_key: MASCP.GATOR_CLIENT_ID,\n      data: {\n        'sequences': sequences.join(\",\")\n      }\n    };\n  }\n\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'running');\n\n  if (this.job_id) {\n    return {\n      type: \"GET\",\n      dataType: \"txt\",\n      url: 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/status/' + this.job_id\n    };\n  }\n\n  if (this.result_id) {\n    return {\n      type: \"GET\",\n      dataType: \"txt\",\n      url: 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/result/' + this.result_id + '/aln-clustalw'\n    };\n  }\n\n  for (var i = 0; i < sequences.length; i++) {\n    sequences[i] = \">seq\" + i + \"\\n\" + sequences[i];\n  }\n\n  return {\n    type: \"POST\",\n    dataType: \"txt\",\n    data: {\n      'sequence': escape(sequences.join(\"\\n\") + \"\\n\"),\n      'email': 'joshi%40sund.ku.dk'\n    }\n  };\n};\n\n(function (serv) {\n  var defaultDataReceived = serv.prototype._dataReceived;\n\n  serv.prototype._dataReceived = function (data, status) {\n    if (data === null) {\n      return defaultDataReceived.call(this, null, status);\n    }\n\n    if (typeof data == \"object\") {\n      if (data.status && data.status == \"RUNNING\") {\n        var self = this;\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, \"running\");\n        setTimeout(function () {\n          self.retrieve(self.agi);\n        }, 5000);\n        console.log(\"Got back running status\");\n        return;\n      }\n\n      return defaultDataReceived.call(this, data, status);\n    }\n\n    if (typeof data == \"string\" && data.match(/^clustalw/)) {\n      this.job_id = data;\n      this.retrieve(this.agi);\n      return;\n    }\n\n    if (data.match(/FINISHED/)) {\n      this.result_id = this.job_id;\n      this.job_id = null;\n      var self = this;\n      setTimeout(function () {\n        self.retrieve(self.agi);\n      }, 500);\n      return;\n    }\n\n    if (data.match(/RUNNING/)) {\n      var self = this;\n      setTimeout(function () {\n        self.retrieve(self.agi);\n      }, 500);\n      return;\n    }\n\n    return defaultDataReceived.call(this, data, status);\n  };\n})(ClustalRunner);\n\n(function () {\n  var normalise_insertions = function normalise_insertions(inserts) {\n    var pos;\n    var positions = [];\n    var result_data = {};\n\n    for (pos in inserts) {\n      if (inserts.hasOwnProperty(pos) && parseInt(pos) >= -1) {\n        positions.push(parseInt(pos));\n      }\n    }\n\n    positions = positions.sort(function sortfunction(a, b) {\n      return a - b;\n    }); // From highest to lowest position, loop through and\n    // subtract the lengths of previous subtratctions from\n    // the final position value.\n\n    for (var i = positions.length - 1; i >= 0; i--) {\n      var j = i - 1;\n      pos = parseInt(positions[i]);\n      var value = inserts[pos];\n\n      while (j >= 0) {\n        pos -= inserts[positions[j]].length;\n        j--;\n      }\n\n      if (!value.match(/^\\s+$/)) {\n        result_data[pos + 1] = value + (result_data[pos + 1] || '');\n      }\n    } //    delete result_data[0];\n\n\n    return result_data;\n  };\n\n  var splice_char = function splice_char(seqs, index, insertions) {\n    for (var i = 0; i < seqs.length; i++) {\n      var seq = seqs[i].toString();\n\n      if (seq.charAt(index) != '-') {\n        if (!insertions[i]) {\n          insertions[i] = {};\n          insertions[i][-1] = '';\n        }\n\n        insertions[i][index - 1] = seq.charAt(index);\n\n        if (insertions[i][index] && insertions[i][index].match(/\\w/)) {\n          insertions[i][index - 1] += insertions[i][index];\n          delete insertions[i][index];\n        }\n      } else {\n        if (insertions[i]) {\n          insertions[i][index - 1] = ' ';\n\n          if ((insertions[i][index] || '').match(/^\\s+$/)) {\n            insertions[i][index - 1] += insertions[i][index];\n            delete insertions[i][index];\n          }\n        }\n      }\n\n      seqs[i] = seq.slice(0, index) + seq.slice(index + 1);\n    }\n  };\n\n  ClustalRunner.Result.prototype.alignToSequence = function (seq_index) {\n    if (!this._orig_raw_data) {\n      this._orig_raw_data = JSON.stringify(this._raw_data);\n    } else {\n      this._raw_data = JSON.parse(this._orig_raw_data);\n    }\n\n    var seqs = this._raw_data.data.sequences.concat([this._raw_data.data.alignment]);\n\n    var insertions = [];\n    var aligning_seq = seqs[seq_index],\n        i = aligning_seq.length - 1;\n\n    for (i; i >= 0; i--) {\n      if (aligning_seq.charAt(i) == '-') {\n        splice_char(seqs, i, insertions);\n      }\n    }\n\n    for (i = 0; i < seqs.length; i++) {\n      if (insertions[i] && i != seq_index) {\n        insertions[i] = normalise_insertions(insertions[i]);\n        var seq = seqs[i];\n        seqs[i] = {\n          'sequence': seq,\n          'insertions': insertions[i]\n        };\n\n        seqs[i].toString = function () {\n          return this.sequence;\n        };\n      }\n    }\n\n    this._raw_data.data.alignment = seqs.pop();\n    this._raw_data.data.sequences = seqs;\n  };\n  /*\n  \n  Test suite for calculating positions\n  \n  var aligner = 0;\n  foo = new ClustalRunner.Result();\n  foo._raw_data = {\"data\" : { \"alignment\" : \"****************\" , \"sequences\" : [ \"----12345678----\", \"XXXXXXXXXXXXXXXX\", \"ABCDABC---ABCDAB\" ] }};\n  foo.alignToSequence(aligner);\n  console.log(foo.getSequences());\n  console.log(foo.calculatePositionForSequence(0,1));\n  console.log(foo.calculatePositionForSequence(0,2));\n  console.log(foo.calculatePositionForSequence(0,3));\n  console.log(foo.calculatePositionForSequence(0,4));\n  console.log(foo.calculatePositionForSequence(0,5));\n  console.log(foo.calculatePositionForSequence(0,6));\n  console.log(foo.calculatePositionForSequence(0,7));\n  console.log(foo.calculatePositionForSequence(0,8));\n  \n  */\n\n\n  ClustalRunner.Result.prototype.calculatePositionForSequence = function (idx, pos) {\n    var inserts = this._raw_data.data.sequences[idx].insertions || {};\n    var result = pos;\n    var actual_position = 0;\n\n    var seq = this._raw_data.data.sequences[idx].toString();\n\n    for (var i = 0; i < seq.length; i++) {\n      if (inserts[i]) {\n        actual_position += inserts[i].length;\n      }\n\n      actual_position += 1;\n\n      if (seq.charAt(i) == '-') {\n        actual_position -= 1;\n      }\n\n      if (pos <= actual_position) {\n        if (pos == actual_position) {\n          return i + 1;\n        } else {\n          if (i == 0) {\n            i = 1;\n          }\n\n          return -1 * i;\n        }\n      }\n    }\n\n    return -1 * seq.length;\n  };\n\n  ClustalRunner.Result.prototype.calculateSequencePositionFromPosition = function (idx, pos) {\n    var inserts = this._raw_data.data.sequences[idx].insertions || {};\n    var result = pos;\n    var actual_position = 0;\n\n    var seq = this._raw_data.data.sequences[idx].toString();\n\n    for (var i = 0; i < pos; i++) {\n      if (inserts[i]) {\n        actual_position += inserts[i].length;\n      }\n\n      actual_position += 1;\n\n      if (seq.charAt(i) == '-') {\n        actual_position -= 1;\n      }\n    }\n\n    if (actual_position == 0) {\n      actual_position += 1;\n    }\n\n    return actual_position;\n  };\n})(); //1265 (P)\n\n\nClustalRunner.prototype.setupSequenceRenderer = function (renderer) {\n  var self = this;\n  renderer.sequences = self.sequences;\n  renderer.addAxisScale('clustal', function (pos, layer, inverse) {\n    let idx = null;\n    let seq_identifiers = self.sequences.map(function (seq) {\n      return seq.agi;\n    });\n\n    while (seq_identifiers.length > 0) {\n      idx = idx || 0;\n      let acc = seq_identifiers.shift();\n\n      if (layer.scales.has(acc)) {\n        break;\n      }\n\n      idx++;\n\n      if (seq_identifiers.length === 0) {\n        idx = null;\n      }\n    }\n\n    if (layer.name === 'primarySequence') {\n      idx = self.result.aligned_idx;\n    }\n\n    if (idx === null) {\n      return pos;\n    }\n\n    if (inverse) {\n      return self.result.calculateSequencePositionFromPosition(idx, pos);\n    }\n\n    return self.result.calculatePositionForSequence(idx, pos);\n  });\n  var rendered_bits = [];\n  var controller_name = 'isoforms';\n  var group_name = 'isoforms';\n\n  var draw_discontinuity = function draw_discontinuity(canvas, size) {\n    var top = -3;\n    var left = -2;\n    var group = canvas.group();\n    var line;\n    line = canvas.line(left + 1, top + 4, left + 3, top + 1);\n    line.setAttribute('stroke', '#fcc');\n    line.setAttribute('stroke-width', '10');\n    group.push(line);\n    line = canvas.line(left + 1, top + 6, left + 3, top + 3);\n    line.setAttribute('stroke', '#fcc');\n    line.setAttribute('stroke-width', '10');\n    group.push(line);\n    line = canvas.line(left + 1, top + 4, left + 3, top + 3);\n    line.setAttribute('stroke', '#fcc');\n    line.setAttribute('stroke-width', '5');\n    group.push(line);\n    line = canvas.line(left + 1, top + 5.3, left + 1, top + 5.8);\n    line.setAttribute('stroke', '#fcc');\n    line.setAttribute('stroke-width', '10');\n    group.push(line);\n    line = canvas.line(left + 1, top + 5.9, left + 1.5, top + 5.9);\n    line.setAttribute('stroke', '#fcc');\n    line.setAttribute('stroke-width', '10');\n    group.push(line);\n    var circle = canvas.circle(left + 2.8, top + 1.75, 1);\n    circle.setAttribute('fill', '#fff');\n    circle.setAttribute('stroke', '#ccc');\n    circle.setAttribute('stroke-width', '10');\n    group.push(circle);\n    var minus = canvas.text(left + 2.25, top + 2.25, (size || '÷') + \"\");\n    minus.setAttribute('fill', '#ccc');\n    minus.setAttribute('font-size', 75);\n    group.push(minus);\n    canvas.firstChild.nextSibling.appendChild(group);\n    return group;\n  };\n\n  var check_values = function check_values(seq, idx, seqs) {\n    var positives = 0;\n    var aa = seq.toString().charAt(idx);\n\n    for (var i = 1; i < seqs.length; i++) {\n      if (seqs[i].toString().charAt(idx) == aa) {\n        positives += 1;\n      }\n    }\n\n    return positives / (seqs.length - 1);\n  };\n\n  var redraw_alignments = function redraw_alignments(sequence_index) {\n    var result = self.result;\n\n    while (rendered_bits.length > 0) {\n      var bit = rendered_bits.shift();\n      renderer.remove(bit.layer, bit);\n    }\n\n    result.alignToSequence(sequence_index || 0);\n    var aligned = result.getSequences();\n\n    if (!renderer.sequence) {\n      renderer.setSequence(aligned[sequence_index])(function () {\n        renderer.sequences = self.sequences;\n        MASCP.registerGroup(group_name, 'Aligned');\n        MASCP.registerLayer(controller_name, {\n          'fullname': 'Conservation',\n          'color': '#000000'\n        });\n\n        if (renderer.trackOrder.indexOf(controller_name) < 0) {\n          renderer.trackOrder = renderer.trackOrder.concat([controller_name]);\n        }\n\n        renderer.showLayer(controller_name);\n        renderer.createGroupController(controller_name, group_name);\n        redraw_alignments(sequence_index);\n      });\n      return;\n    } else {\n      renderer.sequence = aligned[sequence_index];\n      renderer.redrawAxis();\n    }\n\n    var alignments = result.getAlignment().split('');\n    rendered_bits = rendered_bits.concat(renderer.renderTextTrack(controller_name, result.getAlignment().replace(/ /g, ' ')));\n    rendered_bits.slice(-1)[0].setAttribute('data-spaces', 'true');\n    rendered_bits.slice(-1)[0].layer = controller_name;\n    var idxs = [\"*\", \":\", \".\", \" \"].reverse();\n\n    for (var i = 0; i < alignments.length; i++) {\n      rendered_bits.push(renderer.getAA(i + 1, controller_name).addBoxOverlay(controller_name, 1, idxs.indexOf(alignments[i]) / 4, {\n        \"merge\": true\n      }));\n      rendered_bits.slice(-1)[0].layer = controller_name;\n    }\n\n    for (var i = 0; i < aligned.length; i++) {\n      var layname = self.sequences[i].agi.toUpperCase() || \"missing\" + i;\n      var lay = MASCP.registerLayer(layname, {\n        'fullname': self.sequences[i].name || layname.toUpperCase(),\n        'group': group_name,\n        'color': '#ff0000',\n        'accession': self.sequences[i].agi\n      });\n      lay.scales.clear();\n      lay.scales.add(self.sequences[i].agi);\n      lay.fullname = self.sequences[i].name || layname.toUpperCase();\n      var text_array = renderer.renderTextTrack(layname, aligned[i].toString());\n      rendered_bits = rendered_bits.concat(text_array);\n      rendered_bits.slice(-1)[0].layer = layname;\n\n      if (renderer.trackOrder.indexOf(layname.toUpperCase()) < 0) {\n        renderer.trackOrder = renderer.trackOrder.concat([group_name]);\n      }\n\n      var name = \"Isoform \" + (i + 1);\n\n      if (aligned[i].insertions) {\n        for (var insert in aligned[i].insertions) {\n          var insertions = aligned[i].insertions;\n\n          if (insert == 0 && insertions[insert] == \"\") {\n            continue;\n          }\n\n          if (insertions[insert].length < 1) {\n            continue;\n          }\n\n          var size = insertions[insert].length;\n\n          if (insert == 0) {\n            insert = 1;\n          }\n\n          var content = draw_discontinuity(renderer._canvas, size);\n          content.setAttribute('fill', '#ffff00');\n          var an_anno = renderer.getAA(insert, controller_name).addToLayer(layname, {\n            'content': content,\n            //'+'+insertions[insert].length,\n            'bare_element': true,\n            'height': 10,\n            'offset': -5,\n            'no_tracer': true\n          })[1];\n          an_anno.container.setAttribute('height', '300');\n          an_anno.container.setAttribute('viewBox', '-50 -100 200 300');\n          rendered_bits.push(an_anno);\n          rendered_bits.slice(-1)[0].layer = layname;\n        }\n      }\n    }\n\n    renderer.zoom = 1;\n    renderer.showGroup(group_name);\n    renderer.refresh();\n  };\n\n  this.bind('resultReceived', function () {\n    var self = this;\n    redraw_alignments(0);\n    self.result.aligned_idx = 0;\n    var accs = [];\n    self.sequences.forEach(function (seq) {\n      accs.push(seq.agi.toUpperCase());\n    });\n    var current_order = [];\n    renderer.bind('orderChanged', function (order) {\n      if (self.result) {\n        var new_order = order.slice(order.indexOf(controller_name) + 1, order.length).filter(function (track) {\n          return accs.indexOf(track) >= 0;\n        });\n\n        if (new_order.join(',') == current_order.join(',')) {\n          return;\n        }\n\n        current_order = new_order;\n        self.result.aligned_idx = accs.indexOf(current_order[0]);\n        redraw_alignments(self.result.aligned_idx);\n        renderer.refreshScale();\n      }\n    });\n  });\n};\n\nClustalRunner.Result.prototype.getSequences = function () {\n  if (this._raw_data && this._raw_data.data && this._raw_data.data.sequences) {\n    return [].concat(this._raw_data.data.sequences);\n  }\n\n  var bits = this._raw_data.match(/seq\\d+(.*)/g);\n\n  var results = [];\n\n  for (var i = 0; i < bits.length; i++) {\n    var seqbits = bits[i].match(/seq(\\d+)\\s+(.*)/);\n\n    if (!results[seqbits[1]]) {\n      results[seqbits[1]] = '';\n    }\n\n    results[seqbits[1]] += seqbits[2];\n  }\n\n  return results;\n};\n\nClustalRunner.Result.prototype.getAlignment = function () {\n  if (this._raw_data && this._raw_data.data && this._raw_data.data.alignment) {\n    return this._raw_data.data.alignment.toString();\n  }\n\n  this._text_data = this._raw_data;\n  var re = / {16}(.*)/g;\n  var result = \"\";\n  var match = re.exec(this._raw_data);\n\n  while (match !== null) {\n    result += match[1];\n    match = re.exec(this._raw_data);\n  }\n\n  return result;\n};\n\nlet onlyUnique = (val, idx, arr) => arr.indexOf(val) === idx;\n\nlet clustal_emulator = sequences => {\n  if (sequences.length == 0) {\n    return {\n      data: {\n        sequences: [],\n        alignment: \"\"\n      }\n    };\n  }\n\n  let all_aas = sequences.map(seq => seq.split(''));\n  let alignment = all_aas[0].map((aa, pos) => all_aas.map(aas => aas[pos]).filter(onlyUnique).length == 1 ? '*' : ':').join('');\n  return {\n    data: {\n      sequences: sequences,\n      alignment: alignment\n    }\n  };\n};\n\nClustalRunner.EmulatedClustalRunner = function (renderer) {\n  let runner = new ClustalRunner();\n\n  runner.retrieve = function () {\n    let datablock = clustal_emulator(this.sequences || []);\n\n    this._dataReceived(datablock);\n\n    this.sequences = this.sequences.map((seq, idx) => {\n      return {\n        agi: 'seq' + idx,\n        toString: () => seq\n      };\n    });\n    this.gotResult();\n    this.requestComplete();\n  };\n\n  if (renderer) {\n    runner.registerSequenceRenderer(renderer);\n  }\n\n  return runner;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ClustalRunner);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/ClustalRunner.js\n")},"../gator/js/lib/CondensedSequenceRenderer.js":
/*!****************************************************!*\
  !*** ../gator/js/lib/CondensedSequenceRenderer.js ***!
  \****************************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MASCP */ \"../gator/js/lib/MASCP.js\");\n/* harmony import */ var _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SequenceRenderer */ \"../gator/js/lib/SequenceRenderer.js\");\n/* harmony import */ var _CondensedSequenceRendererNavigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CondensedSequenceRendererNavigation */ \"../gator/js/lib/CondensedSequenceRendererNavigation.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bean */ \"../gator/js/bean.js\");\n/* harmony import */ var _SVGCanvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SVGCanvas */ \"../gator/js/lib/SVGCanvas.js\");\n/**\n *  @fileOverview   Basic classes and definitions for an SVG-based sequence renderer\n */\n\n\n\n\n\nconst svgns = 'http://www.w3.org/2000/svg';\n/** Default class constructor\n *  @class      Renders a sequence using a condensed track-based display\n *  @param      {Element} sequenceContainer Container element that the sequence currently is found in, and also \n *              the container that data will be re-inserted into.\n *  @extends    MASCP.SequenceRenderer\n */\n\nconst CondensedSequenceRenderer = function CondensedSequenceRenderer(sequenceContainer) {\n  this._RS = 50;\n  _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n  var self = this; // Create a common layer for the primary sequence\n\n  _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer('primarySequence', {\n    'fullname': 'Primary Sequence'\n  });\n  CondensedSequenceRenderer.Zoom(self);\n  var resizeTimeout;\n\n  var resize_callback = function resize_callback() {\n    sequenceContainer.cached_width = sequenceContainer.getBoundingClientRect().width;\n  };\n\n  window.addEventListener('resize', function () {\n    clearTimeout(resizeTimeout);\n\n    if (window.requestAnimationFrame) {\n      window.requestAnimationFrame(resize_callback);\n    } else {\n      resizeTimeout = setTimeout(resize_callback, 100);\n    }\n  }, true);\n  sequenceContainer.cached_width = sequenceContainer.getBoundingClientRect().width; // We want to unbind the default handler for sequence change that we get from\n  // inheriting from CondensedSequenceRenderer\n\n  _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this, 'sequenceChange');\n  _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'sequenceChange', function () {\n    for (var layername in _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n      if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers.hasOwnProperty(layername)) {\n        _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layername].disabled = true;\n      }\n    }\n\n    self.zoom = self.zoom;\n  });\n  return this;\n};\n\nCondensedSequenceRenderer.prototype = new _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n(function (clazz) {\n  var createCanvasObject = function createCanvasObject() {\n    var renderer = this;\n\n    if (this._object) {\n      if (typeof svgweb != 'undefined') {\n        svgweb.removeChild(this._object, this._object.parentNode);\n      } else {\n        this._object.parentNode.removeChild(this._object);\n      }\n\n      this._canvas = null;\n      this._object = null;\n    }\n\n    var canvas;\n\n    if (document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\")) {\n      var native_canvas = this.win().document.createElementNS(svgns, 'svg');\n      native_canvas.setAttribute('width', '100%');\n      native_canvas.setAttribute('height', '100%');\n\n      this._container.appendChild(native_canvas);\n\n      this._canvas = native_canvas;\n      canvas = {\n        'addEventListener': function addEventListener(name, load_func) {\n          native_canvas.contentDocument = {\n            'rootElement': native_canvas\n          };\n          load_func.call(native_canvas);\n        }\n      };\n    }\n\n    canvas.addEventListener('load', function () {\n      var container_canv = this;\n      Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(container_canv);\n\n      if (renderer.font_order) {\n        container_canv.font_order = renderer.font_order;\n      }\n\n      var group = container_canv.makeEl('g');\n      var canv = container_canv.makeEl('svg');\n      canv.RS = renderer._RS;\n      Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(canv);\n\n      if (renderer.font_order) {\n        canv.font_order = renderer.font_order;\n      }\n\n      group.appendChild(canv);\n      container_canv.appendChild(group);\n      var supports_events = true;\n\n      try {\n        var noop = canv.addEventListener;\n      } catch (err) {\n        supports_events = false;\n      }\n\n      var canvas_rect = canv.makeEl('rect', {\n        'x': '-10%',\n        'y': '-10%',\n        'width': '120%',\n        'height': '120%',\n        'style': 'fill: #ffffff;'\n      });\n      var left_fade = container_canv.makeEl('rect', {\n        'x': '0',\n        'y': '0',\n        'width': '50',\n        'height': '100%',\n        'style': 'fill: url(#left_fade);'\n      });\n      var right_fade = container_canv.makeEl('rect', {\n        'x': '100%',\n        'y': '0',\n        'width': '25',\n        'height': '100%',\n        'transform': 'translate(-15,0)',\n        'style': 'fill: url(#right_fade);'\n      });\n      container_canv.appendChild(left_fade);\n      container_canv.appendChild(right_fade);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, 'pan', function () {\n        if (canv.currentTranslateCache.x >= 0) {\n          left_fade.setAttribute('visibility', 'hidden');\n        } else {\n          left_fade.setAttribute('visibility', 'visible');\n        }\n\n        if (renderer.rightVisibleResidue() < renderer.sequence.length) {\n          right_fade.setAttribute('visibility', 'visible');\n        } else {\n          right_fade.setAttribute('visibility', 'hidden');\n        }\n      });\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, '_anim_begin', function () {\n        left_fade.setAttribute('visibility', 'hidden');\n        right_fade.setAttribute('visibility', 'hidden');\n      });\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, '_anim_end', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(canv, 'pan');\n      });\n      canv.currentTranslateCache = {\n        x: 0,\n        y: 0\n      };\n\n      if (canv.currentTranslateCache.x >= 0) {\n        left_fade.setAttribute('visibility', 'hidden');\n      }\n\n      right_fade.setAttribute('visibility', 'hidden');\n      var nav_group = container_canv.makeEl('g');\n      container_canv.appendChild(nav_group);\n      var nav_canvas = container_canv.makeEl('svg');\n      nav_group.appendChild(nav_canvas);\n      group.style.willChange = 'transform';\n\n      canv.setScale = function (scale) {\n        var curr_transform = (group._cached_transform || '').replace(/scale\\([^\\)]+\\)/, '');\n\n        if (scale !== null) {\n          curr_transform = (' scale(' + scale + ') ' + curr_transform).replace(/\\s+/g, ' ');\n        }\n\n        group._cached_transform = curr_transform;\n        group.style.transform = curr_transform;\n      };\n\n      nav_canvas.setScale = function (scale) {\n        var curr_transform = (nav_group._cached_transform || '').replace(/scale\\([^\\)]+\\)/, '');\n\n        if (scale !== null) {\n          curr_transform = (curr_transform + ' scale(' + scale + ') ').replace(/\\s+/g, ' ');\n        }\n\n        nav_group._cached_transform = curr_transform;\n        nav_group.style.transform = curr_transform;\n      };\n\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, 'zoomChange', () => {\n        if (!renderer.fixed_size) {\n          return;\n        }\n\n        canv.setScale(1);\n        nav_canvas.setScale(1);\n        requestAnimationFrame(() => {\n          let container_height = container_canv.getBoundingClientRect().height;\n          let canv_height = canv.getBoundingClientRect().height;\n          let current_scale = (group._cached_transform || 'scale(1)').match(/scale\\(([\\d\\.]+)\\)/) || '1';\n          canv.setScale((1 * container_height / canv_height).toFixed(2));\n          nav_canvas.setScale((1 * container_height / canv_height).toFixed(2));\n        });\n      });\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, 'panend', () => {\n        let evObj = new Event('panned', {\n          bubbles: true,\n          cancelable: true\n        });\n        canv.dispatchEvent(evObj);\n      });\n      var ua = window.navigator.userAgent;\n      var is_explorer = false;\n\n      if (ua.indexOf('Edge/') >= 0) {\n        is_explorer = true;\n      }\n\n      canv.setCurrentTranslateXY = function (x, y) {\n        var curr_transform = group._cached_transform || '';\n        curr_transform = (curr_transform.replace(/translate\\([^\\)]+\\)/, '') + ' translate(' + x + 'px, ' + y + 'px) ').replace(/\\s+/g, ' ');\n        group._cached_transform = curr_transform;\n\n        if (!is_explorer) {\n          group.style.transform = curr_transform;\n        } else {\n          group.setAttribute('transform', curr_transform.replace(/px/g, ''));\n        }\n\n        this.currentTranslateCache.x = x;\n        this.currentTranslateCache.y = y;\n      };\n\n      canv.setCurrentTranslateXY(0, 0);\n\n      nav_canvas.setCurrentTranslateXY = function (x, y) {\n        var curr_transform = (nav_group.getAttribute('transform') || '').replace(/translate\\([^\\)]+\\)/, '');\n        curr_transform = curr_transform + ' translate(' + x + ', ' + y + ') ';\n        nav_group.setAttribute('transform', curr_transform);\n        this.currentTranslate.x = x;\n        this.currentTranslate.y = y;\n      };\n\n      nav_canvas.setCurrentTranslateXY(0, 0);\n      addNav.call(renderer, nav_canvas);\n      var nav = renderer.navigation;\n      var old_show = nav.show,\n          old_hide = nav.hide;\n\n      nav.show = function () {\n        old_show.apply(nav, arguments);\n        canv.style.GomapScrollLeftMargin = 100 * renderer._RS / renderer.zoom;\n      };\n\n      nav.hide = function () {\n        old_hide.apply(nav, arguments);\n        canv.style.GomapScrollLeftMargin = 1000;\n      };\n\n      renderer._container_canvas = container_canv;\n      container_canv.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n      container_canv.setAttribute('width', '100%');\n      container_canv.setAttribute('height', '100%');\n      canv.appendChild(canv.makeEl('rect', {\n        'x': 0,\n        'y': 0,\n        'opacity': 0,\n        'width': '100%',\n        'height': '100%',\n        'stroke-width': '0',\n        'fill': '#ffffff'\n      }));\n      renderer._object = this;\n      renderer._canvas = canv;\n      renderer._canvas._canvas_height = 0;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(renderer, 'svgready');\n    }, false);\n    return canvas;\n  };\n\n  var wheel_fn = function wheel_fn(e) {\n    e.stopPropagation();\n    return true;\n  };\n\n  var addNav = function addNav(nav_canvas) {\n    this.navigation = new CondensedSequenceRenderer.Navigation(nav_canvas, this);\n    var nav = this.navigation;\n    var self = this;\n\n    var hide_chrome = function hide_chrome() {\n      nav.demote();\n    };\n\n    var show_chrome = function show_chrome() {\n      nav.promote();\n      nav.refresh();\n    };\n\n    if (!_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE) {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, 'panstart', hide_chrome);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, 'panend', show_chrome);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, '_anim_begin', hide_chrome);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, '_anim_end', show_chrome);\n      nav_canvas.addEventListener('DOMMouseScroll', wheel_fn, false);\n      nav_canvas.addEventListener('wheel', wheel_fn, false);\n      nav_canvas.onmousewheel = wheel_fn;\n    }\n  };\n\n  var drawAminoAcids = function drawAminoAcids() {\n    var renderer = this;\n    var aas = renderer.addTextTrack(this.sequence, this._canvas.set());\n    aas.attr({\n      'y': 0.5 * renderer._axis_height * renderer._RS\n    });\n\n    renderer.select = function () {\n      var vals = Array.prototype.slice.call(arguments);\n      var from = vals[0];\n      var to = vals[1];\n      this.moveHighlight.apply(this, vals);\n    };\n\n    var zoomchange = function zoomchange() {\n      aas.attr({\n        'y': 0.5 * renderer._axis_height * renderer._RS\n      });\n    };\n\n    var canvas = renderer._canvas;\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'zoomChange', zoomchange);\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(aas, 'removed', function () {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'zoomChange', zoomchange);\n    });\n    return aas;\n  };\n\n  var mainDrawAxis;\n\n  var drawAxis = mainDrawAxis = function mainDrawAxis(canvas, lineLength) {\n    var RS = this._RS;\n    var self = this;\n    var x = 0,\n        i = 0;\n    var axis = canvas.set();\n    var axis_back = canvas.rect(0, 0, lineLength, 1.5);\n    axis_back.setAttribute('fill', \"url('#\" + self.axis_pattern_id + \"')\");\n    axis_back.removeAttribute('stroke');\n    axis_back.removeAttribute('stroke-width');\n    axis_back.setAttribute('id', 'axis_back');\n    var base_axis_height = 30;\n    var all_labels = canvas.set();\n    var major_mark_labels = canvas.set();\n    var minor_mark_labels = canvas.set();\n    var thousand_mark_labels = canvas.set();\n    var minor_mark = 10;\n    var major_mark = 20;\n\n    if (this.sequence.length > 5000) {\n      minor_mark = 100;\n      major_mark = 200;\n    }\n\n    if (this.sequence.length > 1000) {\n      minor_mark = 20;\n      major_mark = 40;\n    }\n\n    for (i = 0; i < lineLength / 5; i++) {\n      var a_text = canvas.text(x - 0.5, 0, \"\" + x);\n      all_labels.push(a_text);\n\n      if (x % major_mark === 0 && x !== 0) {\n        major_mark_labels.push(a_text);\n      } else if (x % minor_mark === 0 && x !== 0) {\n        minor_mark_labels.push(a_text);\n      }\n\n      if (x % (250 * parseInt(this.sequence.length / 500)) === 0 && x !== 0) {\n        thousand_mark_labels.push(a_text);\n      }\n\n      x += 5;\n    }\n\n    for (i = 0; i < all_labels.length; i++) {\n      all_labels[i].style.textAnchor = 'middle';\n      all_labels[i].firstChild.setAttribute('dy', '1.5ex');\n    }\n\n    all_labels.attr({\n      'pointer-events': 'none',\n      'text-anchor': 'middle',\n      'font-size': 7 * RS + 'pt'\n    });\n    all_labels.hide();\n    self._axis_height = parseInt(base_axis_height / self.zoom);\n    var zoom_status = null;\n\n    var zoomchange = function zoomchange() {\n      var renderer = self;\n      renderer._axis_height = parseInt(base_axis_height / renderer.zoom);\n\n      var pattern = renderer._canvas.ownerSVGElement.getElementById(renderer.axis_pattern_id);\n\n      thousand_mark_labels.forEach(function (label) {\n        label.setAttribute('visibility', 'hidden');\n      });\n\n      if (this.zoom > 3.6) {\n        axis_back.setAttribute('transform', 'translate(-5,' + 0.3 * renderer._axis_height * RS + ')');\n        axis_back.setAttribute('height', 0.25 * renderer._axis_height * RS);\n        pattern.setAttribute('width', 10 * RS);\n        pattern.firstChild.setAttribute('x', 9.5 * RS);\n        pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n        minor_mark_labels.show();\n        major_mark_labels.show();\n        var text_scale = 0.15 * self._axis_height;\n\n        if (text_scale < 1) {\n          text_scale = 1;\n        }\n\n        minor_mark_labels.attr({\n          'font-size': text_scale * RS + 'pt',\n          'text-anchor': 'end'\n        });\n        major_mark_labels.attr({\n          'font-size': text_scale * RS + 'pt',\n          'text-anchor': 'end'\n        });\n\n        if (this._visibleTracers && this._visibleTracers()) {\n          this._visibleTracers().show();\n        }\n      } else if (this.zoom > 1.8) {\n        minor_mark_labels.hide();\n        major_mark_labels.show();\n        major_mark_labels.attr({\n          'font-size': 0.5 * RS * self._axis_height + 'pt',\n          'text-anchor': 'middle'\n        });\n        axis_back.setAttribute('transform', 'translate(-25,' + 0.5 * renderer._axis_height * RS + ')');\n        axis_back.setAttribute('height', 0.3 * renderer._axis_height * RS);\n        pattern.setAttribute('width', 20 * RS);\n        pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n        pattern.firstChild.setAttribute('x', '0');\n\n        if (this.tracers) {\n          this.tracers.hide();\n        }\n      } else if (this.zoom > 0.2) {\n        if (this.tracers) {\n          this.tracers.hide();\n        }\n\n        minor_mark_labels.hide();\n        major_mark_labels.show();\n        major_mark_labels.attr({\n          'font-size': 0.5 * RS * self._axis_height + 'pt',\n          'text-anchor': 'middle'\n        });\n        axis_back.setAttribute('transform', 'translate(-25,' + 0.5 * renderer._axis_height * RS + ')');\n        axis_back.setAttribute('height', 0.3 * renderer._axis_height * RS);\n        pattern.setAttribute('width', 50 * RS);\n        pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n        var last_right = -10000;\n        var changed = false;\n        major_mark_labels.forEach(function (label) {\n          if (!label.cached_bbox) {\n            label.cached_bbox = label.getBBox();\n          }\n\n          if (label.cached_bbox.x <= last_right + RS * 10 || parseInt(label.textContent) % 50 != 0) {\n            label.setAttribute('visibility', 'hidden');\n            changed = true;\n          } else {\n            label.setAttribute('visibility', 'visible');\n            last_right = label.cached_bbox.x + label.cached_bbox.width;\n          }\n        });\n\n        if (changed) {\n          major_mark_labels[0].setAttribute('visibility', 'hidden');\n        }\n      } else {\n        if (this.tracers) {\n          this.tracers.hide();\n        }\n\n        minor_mark_labels.hide();\n        major_mark_labels.hide();\n        thousand_mark_labels.show();\n        thousand_mark_labels.attr({\n          'font-size': 0.5 * RS * self._axis_height + 'pt',\n          'text-anchor': 'middle'\n        });\n        axis_back.setAttribute('transform', 'translate(-50,' + 0.85 * renderer._axis_height * RS + ')');\n        axis_back.setAttribute('height', 0.1 * renderer._axis_height * RS);\n        pattern.setAttribute('width', 250 * RS);\n        pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n        var last_right = -10000;\n        var changed = false;\n        thousand_mark_labels.forEach(function (label) {\n          if (!label.cached_bbox) {\n            label.cached_bbox = label.getBBox();\n          }\n\n          if (label.cached_bbox.x <= last_right + RS * 10 || parseInt(label.textContent) % 250 != 0) {\n            label.setAttribute('visibility', 'hidden');\n          } else {\n            label.setAttribute('visibility', 'visible');\n            last_right = label.cached_bbox.x + label.cached_bbox.width;\n          }\n        });\n\n        if (changed) {\n          thousand_mark_labels[0].setAttribute('visibility', 'hidden');\n        }\n      }\n    };\n\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'zoomChange', zoomchange);\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(axis, 'removed', function () {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'zoomChange', zoomchange);\n\n      var remover = function remover(el) {\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        }\n      };\n\n      axis_back.parentNode.removeChild(axis_back);\n      all_labels.forEach(remover);\n    });\n    return axis;\n  };\n\n  clazz.prototype.panTo = function (end, callback) {\n    var renderer = this;\n    var pos = renderer.leftVisibleResidue();\n    var delta = 1;\n\n    if (pos == end) {\n      if (callback) {\n        callback.call(null);\n      }\n\n      return;\n    }\n\n    if (pos > end) {\n      delta = -1;\n    }\n\n    requestAnimationFrame(function () {\n      renderer.setLeftVisibleResidue(pos);\n      pos += delta;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(renderer._canvas, 'panend');\n\n      if (pos !== end) {\n        requestAnimationFrame(arguments.callee);\n      } else {\n        if (callback) {\n          callback.call(null);\n        }\n      }\n    });\n  };\n\n  clazz.prototype.zoomTo = function (zoom, residue, callback) {\n    var renderer = this;\n    var curr = renderer.zoom;\n    var delta = (zoom - curr) / 50;\n\n    let zoomchange = function zoomchange() {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(renderer, 'zoomChange', zoomchange);\n      delete renderer.zoomCenter;\n\n      if (callback) {\n        callback.call(null);\n      }\n    };\n\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(renderer, 'zoomChange', zoomchange);\n\n    if (residue) {\n      renderer.zoomCenter = residue == 'center' ? residue : {\n        'x': renderer._RS * residue\n      };\n    } else {\n      renderer.zoom = zoom;\n      return;\n    }\n\n    let zoomer = () => {\n      renderer.zoom = curr;\n      curr += delta;\n\n      if (Math.abs(curr - zoom) > 0.01) {\n        requestAnimationFrame(zoomer);\n      }\n    };\n\n    requestAnimationFrame(zoomer);\n  };\n\n  clazz.prototype.showResidues = function (start, end) {\n    let residues_per_zoom_unit = this._container.clientWidth / this._RS;\n    let container_width = this._container.clientWidth;\n    let min_zoom_level = container_width / (2 * this.sequence.length);\n\n    if (!this.sequence) {\n      return;\n    }\n\n    let delta = end - start;\n    let target_zoom_level = min_zoom_level / (delta / this.sequence.length);\n\n    if (target_zoom_level === this.zoom) {\n      this.setLeftVisibleResidue(start);\n      return Promise.resolve();\n    }\n\n    this.zoomCenter = {\n      x: Math.floor(0.5 * (end + start))\n    };\n    let zoomed = new Promise(resolve => {\n      let zoomchange = () => {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this, 'zoomChange', zoomchange);\n        delete this.zoomCenter;\n        this.setLeftVisibleResidue(start);\n        resolve();\n      };\n\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'zoomChange', zoomchange);\n    });\n    this.zoom = target_zoom_level;\n    return zoomed;\n  };\n\n  clazz.prototype.setLeftVisibleResidue = function (val) {\n    var self = this;\n\n    self._canvas.setCurrentTranslateXY(self._canvas.width.baseVal.value * (1 - val / (self.sequence.length + self.padding + 2)) - self._canvas.width.baseVal.value, 0);\n  };\n\n  clazz.prototype.leftVisibleResidue = function () {\n    var self = this;\n    var val = Math.floor((self.sequence.length + self.padding + 2) * (1 - (self._canvas.width.baseVal.value + self._canvas.currentTranslateCache.x) / self._canvas.width.baseVal.value)) - 1;\n\n    if (val < 0) {\n      val = 0;\n    }\n\n    return val;\n  };\n\n  clazz.prototype.rightVisibleResidue = function () {\n    var self = this;\n    var container_width = self._container_canvas.parentNode.cached_width;\n\n    if (!container_width) {\n      container_width = self._container_canvas.parentNode.getBoundingClientRect().width;\n    }\n\n    var val = Math.floor(self.leftVisibleResidue() + (self.sequence.length + self.padding + 2) * (container_width / self._canvas.width.baseVal.value));\n\n    if (val > self.sequence.length) {\n      val = self.sequence.length;\n    }\n\n    return val;\n  };\n\n  clazz.prototype.addAxisScale = function (identifier, scaler) {\n    if (!this._scalers) {\n      this._scalers = [];\n    }\n\n    let scalers = this._scalers.filter(scale => scale.identifier !== identifier);\n\n    scalers.push(scaler);\n    this._scalers = scalers;\n    scaler.identifier = identifier;\n    return scaler;\n  };\n\n  clazz.prototype.refreshScale = function () {\n    var self = this;\n    var lays = Object.keys(this._layer_containers);\n    lays.forEach(function (lay) {\n      self._layer_containers[lay].forEach(function (el) {\n        if (el.move && el.aa) {\n          var aa = self.scalePosition(el.aa, lay);\n          var aa_width = self.scalePosition(el.aa + el.aa_width, lay);\n\n          if (aa < 0) {\n            aa *= -1;\n          }\n\n          if (aa_width < 0) {\n            aa_width *= -1;\n          }\n\n          el.move(aa - 1, aa_width - aa);\n        }\n      });\n    });\n  };\n\n  clazz.prototype.scalePosition = function (aa, layer, inverse) {\n    var layer_obj = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layer);\n\n    if (!layer_obj) {\n      console.log('Missing layer object for layer identifier', layer, 'making dummy layer scaled with identifier', layer);\n      layer_obj = {\n        'name': layer,\n        'scales': new Set()\n      };\n      layer_obj.scales.add(layer);\n    }\n\n    let scaler_funcs = (this._scalers || []).concat([]);\n    var new_aa = (inverse ? scaler_funcs.reverse() : scaler_funcs).reduce((val, fn) => {\n      return fn(val, layer_obj, inverse);\n    }, aa);\n    return new_aa;\n  };\n\n  clazz.prototype.getAA = function (aa, layer, scale_name) {\n    return this.getAminoAcidsByPosition([aa], layer, scale_name).shift();\n  };\n\n  clazz.prototype.getAminoAcidsByPosition = function (aas, layer) {\n    var self = this;\n    var new_aas = aas.map(function (aa) {\n      return Math.abs(self.scalePosition(aa, layer));\n    });\n    var results = _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype.getAminoAcidsByPosition.call(this, new_aas);\n\n    for (var i = 0; i < new_aas.length; i++) {\n      if (results[i]) {\n        results[i].original_index = aas[i];\n      }\n    }\n\n    return results;\n  };\n\n  clazz.prototype.getAminoAcidsByPeptide = function (peptide, layer) {\n    layer = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layer);\n    var self = this;\n    var positions = [];\n    var self_seq;\n    var identifier = layer.accession;\n\n    if (self.sequences) {\n      self_seq = self.sequences[self.sequences.map(function (seq) {\n        return (seq.agi || seq.acc || \"\").toLowerCase();\n      }).indexOf(identifier.toLowerCase())].toString();\n    } else {\n      self_seq = self.sequence;\n    }\n\n    var start = self_seq.indexOf(peptide);\n\n    for (var i = 0; i < peptide.length; i++) {\n      positions.push(start + i);\n    }\n\n    var results = self.getAminoAcidsByPosition(positions, layer);\n\n    if (results.length) {\n      results.addToLayer = function (layername, fraction, options) {\n        return results[0].addBoxOverlay(layername, results.length, fraction, options);\n      };\n    } else {\n      results.addToLayer = function () {};\n    }\n\n    return results;\n  };\n\n  clazz.prototype.win = function () {\n    if (this._container && this._container.ownerDocument && this._container.ownerDocument.defaultView) {\n      var return_val = this._container.ownerDocument.defaultView;\n\n      if (typeof return_val === 'object' && return_val.constructor !== Window) {\n        return_val = return_val[Object.keys(return_val)[0]];\n      }\n\n      return return_val;\n    }\n\n    return null;\n  };\n\n  clazz.prototype.setSequence = function (sequence) {\n    var new_sequence = this._cleanSequence(sequence);\n\n    if (new_sequence == this.sequence && new_sequence !== null) {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(this, 'sequenceChange');\n      return;\n    }\n\n    if (!new_sequence) {\n      return;\n    }\n\n    this.sequence = new_sequence;\n    delete this.sequences;\n    var seq_chars = this.sequence.split('');\n    var line_length = seq_chars.length;\n\n    if (line_length === 0) {\n      return;\n    }\n\n    var renderer = this;\n\n    var build_sequence_els = function build_sequence_els() {\n      var seq_els = [];\n      renderer.sequence.split('').forEach(function (aa, i) {\n        var el = {};\n        el._index = i;\n        el._renderer = renderer;\n\n        renderer._extendElement(el);\n\n        el.amino_acid = aa;\n        seq_els.push(el);\n      });\n      renderer._sequence_els = seq_els;\n    };\n\n    build_sequence_els();\n    var RS = this._RS;\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this, 'svgready');\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'svgready', function (cnv) {\n      var canv = renderer._canvas;\n      canv.RS = RS;\n      canv.setAttribute('background', '#000000');\n      canv.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n      var defs = canv.makeEl('defs');\n\n      renderer._container_canvas.appendChild(defs);\n\n      defs.appendChild(canv.make_gradient('track_shine', '0%', '100%', ['#111111', '#aaaaaa', '#111111'], [0.5, 0.5, 0.5]));\n      defs.appendChild(canv.make_gradient('simple_gradient', '0%', '100%', ['#aaaaaa', '#888888'], [1, 1]));\n      defs.appendChild(canv.make_gradient('left_fade', '100%', '0%', ['#ffffff', '#ffffff'], [1, 0]));\n      defs.appendChild(canv.make_gradient('right_fade', '100%', '0%', ['#ffffff', '#ffffff'], [0, 1]));\n      defs.appendChild(canv.make_gradient('red_3d', '0%', '100%', ['#CF0000', '#540000'], [1, 1]));\n      renderer.gradients = [];\n\n      renderer.add3dGradient = function (color) {\n        defs.appendChild(canv.make_gradient('grad_' + color, '0%', '100%', [color, '#ffffff', color], [1, 1, 1]));\n        renderer.gradients.push(color);\n      };\n\n      var shadow = canv.makeEl('filter', {\n        'id': 'drop_shadow',\n        'filterUnits': 'objectBoundingBox',\n        'x': '-50%',\n        'y': '-50%',\n        'width': '200%',\n        'height': '200%'\n      });\n      shadow.appendChild(canv.makeEl('feGaussianBlur', {\n        'in': 'SourceGraphic',\n        'stdDeviation': '4',\n        'result': 'blur_out'\n      }));\n      shadow.appendChild(canv.makeEl('feOffset', {\n        'in': 'blur_out',\n        'result': 'the_shadow',\n        'dx': '3',\n        'dy': '1'\n      }));\n      shadow.appendChild(canv.makeEl('feBlend', {\n        'in': 'SourceGraphic',\n        'in2': 'the_shadow',\n        'mode': 'normal'\n      }));\n      defs.appendChild(shadow);\n      var link_icon = canv.makeEl('svg', {\n        'width': '100%',\n        'height': '100%',\n        'id': 'new_link_icon',\n        'viewBox': '0 0 100 100',\n        'preserveAspectRatio': 'xMinYMin meet'\n      });\n      defs.appendChild(link_icon);\n      link_icon.appendChild(canv.makeEl('rect', {\n        'x': '12.5',\n        'y': '37.5',\n        'stroke-width': '3',\n        'width': '50',\n        'height': '50',\n        'stroke': '#ffffff',\n        'fill': 'none'\n      }));\n      link_icon.appendChild(canv.makeEl('path', {\n        'd': 'M 50.0,16.7 L 83.3,16.7 L 83.3,50.0 L 79.2,56.2 L 68.8,39.6 L 43.8,66.7 L 33.3,56.2 L 60.4,31.2 L 43.8,20.8 L 50.0,16.7 z',\n        'stroke-width': '3',\n        'stroke': '#999999',\n        'fill': '#ffffff'\n      }));\n      var plus_icon = canv.makeEl('svg', {\n        'width': '100%',\n        'height': '100%',\n        'id': 'plus_icon',\n        'viewBox': '0 0 100 100',\n        'preserveAspectRatio': 'xMinYMin meet'\n      });\n      plus_icon.appendChild(canv.plus(0, 0, 100 / canv.RS));\n      defs.appendChild(plus_icon);\n      var minus_icon = canv.makeEl('svg', {\n        'width': '100%',\n        'height': '100%',\n        'id': 'minus_icon',\n        'viewBox': '0 0 100 100',\n        'preserveAspectRatio': 'xMinYMin meet'\n      });\n      minus_icon.appendChild(canv.minus(0, 0, 100 / canv.RS));\n      defs.appendChild(minus_icon);\n      var axis_pattern_id = 'axis_pattern_' + new Date().getTime();\n      var pattern = canv.makeEl('pattern', {\n        'patternUnits': 'userSpaceOnUse',\n        'x': '0',\n        'y': '0',\n        'width': 10 * canv.RS,\n        'height': 2 * canv.RS,\n        'id': axis_pattern_id\n      });\n      renderer.axis_pattern_id = axis_pattern_id;\n      var line = canv.makeEl('rect', {\n        'x': '0',\n        'y': '0',\n        'width': '10%',\n        'height': '1000%',\n        'fill': '#000',\n        'stroke': '0'\n      });\n      pattern.appendChild(line);\n      defs.appendChild(pattern);\n      var self = this;\n      renderer._axis_height = 10;\n      var aas = drawAminoAcids.call(self, canv);\n\n      renderer.hideAxis = function () {\n        drawAxis = function drawAxis(canv) {\n          _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, 'zoomChange', function () {\n            self._axis_height = 10 / self.zoom;\n          });\n          return {};\n        };\n\n        self._axis_height = 10 / self.zoom;\n        this.redrawAxis();\n      };\n\n      renderer.showAxis = function () {\n        drawAxis = mainDrawAxis;\n        this.redrawAxis();\n      };\n\n      var axis = drawAxis.call(self, canv, line_length);\n\n      renderer.redrawAxis = function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(axis, 'removed');\n        aas.forEach(function (aa) {\n          if (aa.parentNode) {\n            aa.parentNode.removeChild(aa);\n          }\n        });\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(aas, 'removed');\n        axis = drawAxis.call(self, canv, renderer.sequence.length);\n        aas = drawAminoAcids.call(self, canv);\n        build_sequence_els();\n        renderer.refresh();\n      };\n\n      if (!renderer.hide_axis) {\n        this.showAxis();\n      } else {\n        this.hideAxis();\n      }\n\n      renderer._layer_containers = {};\n      renderer.enablePrintResizing();\n      renderer.enableScaling();\n      renderer.enableSelection(); // When we have a layer registered with the global MASCP object\n      // add a track within this renderer.\n\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"], 'layerRegistered', function (layer, rend) {\n        if (!rend || rend === renderer) {\n          renderer.addTrack(layer);\n        }\n      });\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(renderer, 'sequenceChange');\n    });\n    var canvas = createCanvasObject.call(this);\n\n    if (!this._canvas) {\n      if (typeof svgweb != 'undefined') {\n        svgweb.appendChild(canvas, this._container);\n      } else {\n        this._container.appendChild(canvas);\n      }\n    }\n\n    var rend = this;\n    this.EnableHighlights();\n\n    var seq_change_func = function seq_change_func(other_func) {\n      if (!rend._canvas) {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(rend, 'sequenceChange', function () {\n          _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(rend, 'sequenceChange', arguments.callee);\n          other_func.apply();\n        });\n      } else {\n        other_func.apply();\n      }\n    };\n\n    seq_change_func.ready = function (other_func) {\n      this.call(this, other_func);\n    };\n\n    return seq_change_func;\n  };\n})(CondensedSequenceRenderer);\n\n(function () {\n  var svgns = 'http://www.w3.org/2000/svg';\n\n  var add_import = function add_import(ownerdoc) {\n    if (!ownerdoc.ELEMENT_NODE) {\n      ownerdoc.ELEMENT_NODE = 1;\n      ownerdoc.ATTRIBUTE_NODE = 2;\n      ownerdoc.TEXT_NODE = 3;\n      ownerdoc.CDATA_SECTION_NODE = 4;\n      ownerdoc.ENTITY_REFERENCE_NODE = 5;\n      ownerdoc.ENTITY_NODE = 6;\n      ownerdoc.PROCESSING_INSTRUCTION_NODE = 7;\n      ownerdoc.COMMENT_NODE = 8;\n      ownerdoc.DOCUMENT_NODE = 9;\n      ownerdoc.DOCUMENT_TYPE_NODE = 10;\n      ownerdoc.DOCUMENT_FRAGMENT_NODE = 11;\n      ownerdoc.NOTATION_NODE = 12;\n    }\n\n    ownerdoc._importNode = function (node, allChildren) {\n      switch (node.nodeType) {\n        case ownerdoc.ELEMENT_NODE:\n          var newNode = ownerdoc.createElementNS(svgns, node.nodeName);\n          /* does the node have any attributes to add? */\n\n          if (node.attributes && node.attributes.length > 0) for (var i = 0, il = node.attributes.length; i < il;) {\n            if (!/^on/.test(node.attributes[i].nodeName)) {\n              newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));\n            }\n          }\n          /* are we going after children too, and does the node have any? */\n\n          if (allChildren && node.childNodes && node.childNodes.length > 0) for (var i = 0, il = node.childNodes.length; i < il;) {\n            if (node.childNodes[i].nodeName !== 'USE' && node.childNodes[i].nodeName.toUpperCase() !== 'SCRIPT') {\n              newNode.appendChild(ownerdoc._importNode(node.childNodes[i++], allChildren));\n            }\n          }\n          return newNode;\n          break;\n\n        case ownerdoc.TEXT_NODE:\n        case ownerdoc.CDATA_SECTION_NODE:\n        case ownerdoc.COMMENT_NODE:\n          return ownerdoc.createTextNode(node.nodeValue);\n          break;\n      }\n    };\n  };\n\n  var fix_child_links = function fix_child_links(node, prefix) {\n    if (node.childNodes && node.childNodes.length > 0) {\n      for (var i = 0, il = node.childNodes.length; i < il;) {\n        if (node.childNodes[i].nodeName.toUpperCase() === 'USE') {\n          var linkval = node.childNodes[i].getAttribute('xlink:href');\n          node.childNodes[i].setAttribute('xlink:href', linkval.replace(/^#/, '#' + prefix + '_'));\n        }\n\n        i++;\n      }\n    }\n  };\n\n  CondensedSequenceRenderer.prototype.importIcons = function (namespace, doc, alt_url) {\n    var new_owner = this._container_canvas.ownerDocument;\n\n    if (this._container_canvas.getElementById('defs_' + namespace)) {\n      return;\n    }\n\n    this._container_canvas.appendChild(new_owner.createElement('defs'));\n\n    this._container_canvas.lastChild.setAttribute('id', 'defs_' + namespace);\n\n    var defs_block = this._container_canvas.lastChild;\n\n    if (!new_owner._importNode) {\n      add_import(new_owner);\n    }\n\n    var ua = window.navigator.userAgent;\n\n    if (ua.indexOf('Edge/') >= 0) {\n      this.icons_failed = this.icons_failed || {};\n      this.icons_failed[namespace] = alt_url;\n      return;\n    }\n\n    var new_nodes = new_owner._importNode(doc, true);\n\n    if (typeof XPathResult !== 'undefined') {\n      var iterator = new_owner.evaluate('//svg:defs/*', new_nodes, function (ns) {\n        return svgns;\n      }, XPathResult.ANY_TYPE, null);\n      var el = iterator.iterateNext();\n      var to_append = [];\n\n      while (el) {\n        to_append.push(el);\n        el = iterator.iterateNext();\n      }\n\n      if (to_append.length === 0) {\n        this.icons_failed = this.icons_failed || {};\n        this.icons_failed[namespace] = alt_url;\n      }\n\n      to_append.forEach(function (el) {\n        el.setAttribute('id', namespace + '_' + el.getAttribute('id'));\n        fix_child_links(el, namespace);\n        defs_block.appendChild(el);\n      });\n    } else {\n      var els = new_nodes.querySelectorAll('defs > *');\n\n      for (var i = 0; i < els.length; i++) {\n        els[i].setAttribute('id', namespace + '_' + els[i].getAttribute('id'));\n        fix_child_links(el, namespace);\n        defs_block.appendChild(els[i]);\n      }\n    }\n  };\n})();\n\nCondensedSequenceRenderer.prototype.addValuesToLayer = function (layerName, values, options) {\n  var RS = this._RS;\n  var canvas = this._canvas;\n\n  if (!canvas) {\n    var orig_func = arguments.callee;\n    var self = this;\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n      orig_func.call(self, layerName, values);\n    });\n    log(\"Delaying rendering, waiting for sequence change\");\n    return;\n  }\n\n  var max_value;\n  var min_value;\n  var height_scale = 1;\n  options = options || {};\n\n  if (options.height) {\n    height_scale = options.height / this._layer_containers[layerName].track_height;\n  }\n\n  var offset_scale = 0;\n\n  if (options.offset) {\n    offset_scale = options.offset / this._layer_containers[layerName].track_height;\n  }\n\n  var recalculate_plot = function recalculate_plot(scale) {\n    var plot_path = ' m' + -0.5 * RS + ' 0';\n    var last_value = null;\n    values.forEach(function (value) {\n      if (typeof last_value == 'undefined') {} else {\n        plot_path += ' l' + RS + ' ' + -1 * RS * scale * height_scale * (value - last_value);\n      }\n\n      last_value = value;\n\n      if (isNaN(max_value) || value > max_value) {\n        max_value = value;\n      }\n\n      if (isNaN(min_value) || value < min_value) {\n        min_value = value;\n      }\n    });\n    return plot_path;\n  };\n\n  var plot = this._canvas.path('M0 0 M0 0 m0 ' + (max_value || 0) * RS + ' ' + recalculate_plot(1));\n\n  var abs_min_val = min_value;\n  var abs_max_val = max_value;\n  plot.setAttribute('stroke', options.color || '#ff0000');\n  plot.setAttribute('stroke-width', (options.thickness || 0.35) * RS);\n  plot.setAttribute('fill', 'none');\n  plot.setAttribute('visibility', 'hidden');\n  plot.setAttribute('pointer-events', 'none');\n\n  this._layer_containers[layerName].push(plot);\n\n  plot.setAttribute('transform', 'translate(1,10) scale(1,1)');\n\n  if (!options.hide_axis) {\n    var axis = this._canvas.path('M0 0 m0 ' + RS * ((max_value || 0) - (min_value || 0)) + ' l' + this._sequence_els.length * RS + ' 0');\n\n    axis.setAttribute('stroke-width', 0.2 * RS);\n    axis.setAttribute('visibility', 'hidden');\n    axis.setAttribute('transform', 'translate(1,0)');\n    axis.setAttribute('pointer-events', 'none');\n\n    axis.setHeight = function (height) {\n      if (abs_min_val < 0 && abs_max_val > 0) {\n        axis.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * height * height_scale + ' l' + renderer._sequence_els.length * RS + ' 0');\n      } else {\n        axis.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * (1 - abs_min_val) * height * height_scale + ' l' + renderer._sequence_els.length * RS + ' 0');\n      }\n\n      axis.setAttribute('stroke-width', 0.2 * RS / renderer.zoom);\n    };\n\n    this._layer_containers[layerName].push(axis);\n  }\n\n  var renderer = this;\n\n  if (options.label) {\n    var text = this._canvas.text(0, 0, options.label.max || options.label.min);\n\n    text.setAttribute('transform', 'translate(0,0)');\n    text.setAttribute('font-size', 4 * RS + 'pt');\n\n    text.setHeight = function (height) {\n      text.setAttribute('y', height * offset_scale);\n      text.setAttribute('font-size', 4 * RS / renderer.zoom + 'pt');\n    };\n\n    this._layer_containers[layerName].push(text);\n  }\n\n  plot.setHeight = function (height) {\n    var path_vals = recalculate_plot(0.5 * height / RS);\n    plot.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * height * height_scale + ' ' + path_vals);\n    plot.setAttribute('stroke-width', (options.thickness || 0.35) * RS / renderer.zoom);\n  };\n\n  return plot;\n};\n\n(function () {\n  var addElementToLayer = function addElementToLayer(layerName, opts) {\n    var canvas = this._renderer._canvas;\n\n    if (!canvas) {\n      var orig_func = arguments.callee;\n      var self = this;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n        orig_func.call(self, layerName);\n      });\n      log(\"Delaying rendering, waiting for sequence change\");\n      return;\n    }\n\n    var tracer = null;\n    var tracer_marker = null;\n    var renderer = this._renderer;\n\n    if (!opts) {\n      opts = {};\n    }\n\n    var scale = 1;\n\n    if (opts.height) {\n      opts.height = parseFloat(opts.height);\n\n      if (typeof opts.height !== 'undefined' && opts.bare_element) {\n        opts.height *= 2;\n      }\n\n      scale = opts.height / this._renderer._layer_containers[layerName].track_height;\n\n      if (typeof opts.offset !== 'undefined') {\n        opts.offset = -1.25 - 1.25 + opts.offset / opts.height * 5; // ( -250/4 + (x / height) * 250 ) where 250 is growing marker height\n      }\n    }\n\n    var tracer_marker = canvas.growingMarker(0, 0, opts.content || layerName.charAt(0).toUpperCase(), opts);\n    tracer_marker.setAttribute('transform', 'translate(' + (this._index + 0.5) * this._renderer._RS + ',0.01) scale(' + scale + ')');\n    tracer_marker.setAttribute('height', '250');\n    tracer_marker.firstChild.setAttribute('transform', 'translate(-100,0) rotate(0,100,0.001)');\n\n    if (opts.break_viewbox) {\n      tracer_marker.container.removeAttribute('viewBox');\n      tracer_marker.container.setAttribute('width', '100%');\n      tracer_marker.container.setAttribute('height', '100%');\n    }\n\n    if (!opts.no_tracer) {\n      var bobble = canvas.circle(this._index + 0.5, 10, 0.25);\n      bobble.setAttribute('visibility', 'hidden');\n      bobble.style.opacity = '0.4';\n      tracer = canvas.rect(this._index + 0.5, 10, 0.05, 0);\n      tracer._index = this._index;\n      tracer.style.strokeWidth = '0';\n      tracer.style.fill = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color;\n      tracer.setAttribute('visibility', 'hidden');\n      canvas.insertBefore(tracer, canvas.firstChild.nextSibling);\n      var renderer = this._renderer;\n\n      if (!this._renderer._layer_containers[layerName].tracers) {\n        this._renderer._layer_containers[layerName].tracers = canvas.set();\n      }\n\n      if (!canvas.tracers) {\n        canvas.tracers = canvas.set();\n\n        canvas._visibleTracers = function () {\n          return renderer._visibleTracers();\n        };\n      }\n\n      tracer.setHeight = function (height) {\n        if (tracer.getAttribute('visibility') == 'hidden') {\n          return;\n        }\n\n        var transform_attr = tracer_marker.getAttribute('transform');\n        var matches = /translate\\(.*[,\\s](.*)\\) scale\\((.*)\\)/.exec(transform_attr);\n\n        if (matches[1] && matches[2]) {\n          var scale = parseFloat(matches[2]);\n          var y = parseFloat(matches[1]);\n          var new_height = y + scale * ((tracer_marker.offset || 0) * 50 + 125) - parseInt(this.getAttribute('y'));\n          this.setAttribute('height', new_height < 0 ? 0 : new_height);\n        } else {\n          this.setAttribute('height', height);\n        }\n      };\n\n      this._renderer._layer_containers[layerName].tracers.push(tracer);\n\n      this._renderer._layer_containers[layerName].tracers.push(bobble);\n\n      tracer.setAttribute('pointer-events', 'none');\n      bobble.setAttribute('pointer-events', 'none');\n      canvas.tracers.push(tracer);\n    }\n\n    if (typeof opts.offset == 'undefined' || opts.offset === null) {// tracer_marker.offset = 2.5*this._renderer._layer_containers[layerName].track_height;\n    } else {\n      tracer_marker.offset = opts.offset;\n    } // tracer_marker.setAttribute('transform','scale(0.5)');\n    // tracer_marker.zoom_level = 'text';\n\n\n    tracer_marker.setAttribute('visibility', 'hidden');\n\n    this._renderer._layer_containers[layerName].push(tracer_marker);\n\n    var result = [tracer, tracer_marker, bobble];\n    tracer_marker.setAttribute('class', layerName);\n\n    result.move = function (x, width) {\n      var transform_attr = tracer_marker.getAttribute('transform');\n      var matches = /translate\\(.*[,\\s](.*)\\) scale\\((.*)\\)/.exec(transform_attr);\n\n      if (matches[1] && matches[2]) {\n        tracer_marker.setAttribute('transform', 'translate(' + (x + 0.5) * renderer._RS + ',' + matches[1] + ') scale(' + matches[2] + ')');\n      }\n\n      if (tracer) {\n        tracer.move(x + 0.5, 0.05);\n        bobble.move(x + 0.5);\n      }\n    };\n\n    if (tracer) {\n      tracer_marker.tracer = tracer;\n      tracer_marker.bobble = bobble;\n    }\n\n    this._renderer._layer_containers[layerName].push(result);\n\n    return result;\n  };\n\n  var addBoxOverlayToElement = function addBoxOverlayToElement(layerName, width, fraction, opts) {\n    var canvas = this._renderer._canvas;\n    var renderer = this._renderer;\n\n    if (!opts) {\n      opts = {};\n    }\n\n    if (typeof fraction === 'undefined' || fraction === null) {\n      fraction = typeof opts.opacity !== 'undefined' ? opts.opacity : 1;\n    }\n\n    if (!canvas) {\n      var orig_func = arguments.callee;\n      var self = this;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n        orig_func.call(self, layerName, width, opts);\n      });\n      log(\"Delaying rendering, waiting for sequence change\");\n      return;\n    }\n\n    var rect = canvas.rect(-0.25 + this._index, 60, width || 1, opts.height || 4, opts);\n    var rect_x = parseFloat(rect.getAttribute('x'));\n    var rect_max_x = rect_x + parseFloat(rect.getAttribute('width'));\n    var container = this._renderer._layer_containers[layerName];\n\n    if (typeof opts.merge !== 'undefined' && opts.merge) {\n      for (var i = 0; i < container.length; i++) {\n        if (container[i].value != fraction) {\n          continue;\n        }\n\n        var el_x = parseFloat(container[i].getAttribute('x'));\n        var el_max_x = el_x + parseFloat(container[i].getAttribute('width'));\n\n        if (el_x <= rect_x && rect_x <= el_max_x || rect_x <= el_x && el_x <= rect_max_x) {\n          container[i].setAttribute('x', \"\" + Math.min(el_x, rect_x));\n          container[i].setAttribute('width', \"\" + (Math.max(el_max_x, rect_max_x) - Math.min(el_x, rect_x)));\n          rect.parentNode.removeChild(rect);\n          return container[i];\n        }\n      }\n    }\n\n    this._renderer._layer_containers[layerName].push(rect);\n\n    rect.setAttribute('class', layerName);\n    rect.setAttribute('visibility', 'hidden');\n    rect.setAttribute('stroke-width', '0px');\n\n    if (typeof fraction !== 'undefined') {\n      rect.setAttribute('opacity', fraction);\n      rect.value = fraction;\n    }\n\n    rect.setAttribute('fill', opts.fill || _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color);\n    rect.position_start = this._index;\n    rect.position_end = this._index + width;\n\n    if (typeof opts.offset !== \"undefined\" || opts.height_scale) {\n      var offset_val = opts.offset;\n\n      rect.setHeight = function (hght) {\n        var height_val = opts.height ? opts.height * renderer._RS / renderer.zoom : hght * (opts.height_scale || 1);\n\n        if (opts.align == 'bottom') {\n          this.setAttribute('y', offset_val * renderer._RS / renderer.zoom - hght * (opts.height_scale || 1));\n          this.setAttribute('height', height_val);\n        } else {\n          this.setAttribute('y', offset_val * renderer._RS / renderer.zoom);\n          this.setAttribute('height', height_val);\n        }\n      };\n    }\n\n    return rect;\n  };\n\n  var addTextToElement = function addTextToElement(layerName, width, opts) {\n    var canvas = this._renderer._canvas;\n    var renderer = this._renderer;\n\n    if (!canvas) {\n      var orig_func = arguments.callee;\n      var self = this;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n        orig_func.call(self, layerName, width, opts);\n      });\n      log(\"Delaying rendering, waiting for sequence change\");\n      return;\n    }\n\n    if (!opts) {\n      opts = {};\n    }\n\n    if (opts.height) {\n      opts.height = opts.height * this._renderer._RS;\n    }\n\n    var height = opts.height || this._renderer._layer_containers[layerName].trackHeight || 4;\n    var position = this._index;\n\n    if (width > 1) {\n      position = position + Math.floor(0.5 * width);\n    }\n\n    var text_scale = 4 / 3;\n    var text = canvas.text(position, 0, opts.txt || opts.content || \"Text\");\n    text.setAttribute('font-size', text_scale * height);\n    text.cached_width = text.getComputedTextLength() / height;\n    text.setAttribute('font-weight', 'bolder');\n    text.setAttribute('fill', opts.fill || '#ffffff');\n    text.setAttribute('stroke', '#000000');\n\n    if (!(\"stroke_width\" in opts)) {\n      opts.stroke_width = 5;\n    }\n\n    text.setAttribute('stroke-width', opts.stroke_width + '');\n    text.setAttribute('style', 'font-family: ' + canvas.font_order);\n    text.firstChild.setAttribute('dy', '1.3ex');\n    text.setAttribute('text-anchor', 'middle');\n\n    if (opts.align) {\n      if (opts.align == \"left\") {\n        text.setAttribute('text-anchor', 'start');\n      }\n\n      if (opts.align == 'right') {\n        text.setAttribute('text-anchor', 'end');\n      }\n    }\n\n    if (width > 1) {\n      var clip = canvas.clipPath();\n      var mask = canvas.rect(-0.5 * width, opts.offset || 0, width, height);\n      clip.push(mask);\n      mask.removeAttribute('y');\n      var mask_id = 'id' + new Date().getTime() + \"_\" + clip.parentNode.childNodes.length;\n      clip.setAttribute('id', mask_id);\n      text.setAttribute('clip-path', 'url(#' + mask_id + ')');\n    }\n\n    if (typeof opts.offset !== 'undefined') {\n      text.setAttribute('transform', 'translate(' + text.getAttribute('x') + ',' + text.getAttribute('y') + ')');\n      text.offset = opts.offset;\n\n      text.setHeight = function (height) {\n        var top_offset = this.offset;\n        this.setAttribute('x', 0);\n        this.setAttribute('y', top_offset * renderer._RS / renderer.zoom);\n        if (mask) mask.setAttribute('y', this.getAttribute('y'));\n        this.setAttribute('stroke-width', 5 / renderer.zoom);\n\n        if (opts.height) {\n          this.setAttribute('font-size', text_scale * opts.height / renderer.zoom);\n          if (mask) mask.setAttribute('height', opts.height / renderer.zoom);\n        } else {\n          this.setAttribute('font-size', text_scale * height);\n          if (mask) mask.setAttribute('height', height);\n        } // If we have a mask, we want to move the text to the left.\n\n\n        if (mask) {\n          if (this.cached_width * height > width * 50) {\n            this.setAttribute('x', -0.5 * width * 50);\n            this.setAttribute('text-anchor', 'start');\n          } else {\n            this.setAttribute('x', '0');\n            this.setAttribute('text-anchor', 'middle');\n          }\n        } else {\n          this.setAttribute('x', '0');\n          this.setAttribute('text-anchor', 'middle');\n        }\n      };\n    } else {\n      text.setHeight = function (height) {\n        text.setAttribute('stroke-width', 5 / renderer.zoom);\n\n        if (opts.height) {\n          text.setAttribute('font-size', text_scale * opts.height / renderer.zoom);\n          if (mask) mask.setAttribute('height', opts.height / renderer.zoom);\n        } else {\n          text.setAttribute('font-size', text_scale * height);\n          if (mask) mask.setAttribute('height', height);\n        }\n      };\n    }\n\n    if (width > 1) {\n      text.move = function (new_x, new_width) {\n        if (mask) mask.setAttribute('x', -1 * new_width * renderer._RS * 0.5);\n        if (mask) mask.setAttribute('width', new_width * renderer._RS);\n        text.setAttribute('x', (new_x + parseInt(0.5 * new_width)) * renderer._RS);\n      };\n    }\n\n    this._renderer._layer_containers[layerName].push(text);\n\n    return text;\n  };\n\n  var addShapeToElement = function addShapeToElement(layerName, width, opts) {\n    var canvas = this._renderer._canvas;\n    var renderer = this._renderer;\n\n    if (!canvas) {\n      var orig_func = arguments.callee;\n      var self = this;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n        orig_func.call(self, layerName, width, opts);\n      });\n      log(\"Delaying rendering, waiting for sequence change\");\n      return;\n    }\n\n    var methods = {\n      \"pentagon\": canvas.pentagon,\n      \"hexagon\": canvas.hexagon,\n      \"rectangle\": canvas.rect,\n      \"ellipse\": canvas.ellipticalRect,\n      \"roundrect\": function roundrect(x, y, width, height) {\n        return canvas.roundRect(x, y, width, height, 0.25 * height);\n      }\n    };\n\n    if (!opts.rotate) {\n      opts.rotate = 0;\n    }\n\n    var shape = null;\n    var shape_name = (opts.shape.split('-') || '')[0];\n\n    if (shape_name in methods) {\n      var is_rotated = opts.shape.split('-')[1];\n\n      if (is_rotated == 'left' && !opts.rotate) {\n        opts.rotate = 90;\n      }\n\n      if (is_rotated == 'right' && !opts.rotate) {\n        opts.rotate = 270;\n      }\n\n      if (is_rotated == 'flip' && !opts.rotate) {\n        opts.rotate = 180;\n      }\n\n      shape = methods[shape_name].call(canvas, this._index, 60, width || 1, opts.height || 4, opts.rotate);\n    } else {\n      return;\n    }\n\n    if (typeof opts.offset !== 'undefined') {\n      var x_pos = shape.getAttribute('x');\n      var y_pos = shape.getAttribute('y');\n      shape.setAttribute('transform', 'translate(' + x_pos + ',' + y_pos + ')');\n      shape.setAttribute('x', '0');\n      var offset_val = opts.offset || 0;\n      var orig_height = opts.height || 4;\n      shape.setAttribute('y', offset_val * this._renderer._RS);\n\n      shape.setHeight = function (height) {\n        if (!this._orig_stroke_width) {\n          this._orig_stroke_width = parseInt(this.getAttribute('stroke-width'));\n        }\n\n        shape.setAttribute('y', offset_val * renderer._RS / renderer.zoom);\n        shape.setAttribute('height', orig_height * renderer._RS / renderer.zoom);\n        shape.setAttribute('stroke-width', this._orig_stroke_width / renderer.zoom);\n\n        if (opts.shape == 'ellipse') {\n          shape.setAttribute('ry', 0.5 * (orig_height * renderer._RS) / renderer.zoom);\n        }\n\n        if (opts.shape == 'roundrect') {\n          shape.setAttribute('rx', 0.25 * (orig_height * renderer._RS) / renderer.zoom);\n          shape.setAttribute('ry', 0.25 * (orig_height * renderer._RS) / renderer.zoom);\n        }\n      };\n\n      shape.move = function (new_x, new_width) {\n        var transform_attr = this.getAttribute('transform');\n        var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n\n        if (matches[1]) {\n          this.setAttribute('transform', 'translate(' + new_x * renderer._RS + ',' + matches[1] + ')');\n        }\n\n        this.setAttribute('width', new_width * renderer._RS);\n      };\n    }\n\n    if (typeof opts.offset !== 'undefined' && (opts.shape == \"hexagon\" || opts.shape == \"pentagon\")) {\n      var offset_val = opts.offset || 0;\n      var orig_height = opts.height || 4;\n      var adjustment_g = canvas.group();\n      adjustment_g.setAttribute('transform', shape.getAttribute('transform'));\n      adjustment_g.push(shape);\n      shape.setAttribute('transform', 'translate(0,0)');\n\n      adjustment_g.setHeight = function (height) {\n        if (!shape._orig_stroke_width) {\n          shape._orig_stroke_width = parseInt(shape.getAttribute('stroke-width')) || 0;\n        }\n\n        shape.setHeight(orig_height * renderer._RS / renderer.zoom);\n        shape.setAttribute('stroke-width', this._orig_stroke_width / renderer.zoom);\n        shape.setAttribute('transform', 'translate(0,0)');\n      };\n\n      this._renderer._layer_containers[layerName].push(adjustment_g);\n\n      adjustment_g.setAttribute('visibility', 'hidden');\n      adjustment_g.setAttribute('class', layerName);\n      adjustment_g.position_start = this._index;\n      adjustment_g.position_end = this._index + width;\n    } else {\n      this._renderer._layer_containers[layerName].push(shape);\n\n      shape.setAttribute('visibility', 'hidden');\n      shape.setAttribute('class', layerName);\n      shape.position_start = this._index;\n      shape.position_end = this._index + width;\n    }\n\n    shape.setAttribute('fill', opts.fill || _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color);\n\n    if (opts.stroke) {\n      shape.setAttribute('stroke', opts.stroke);\n    }\n\n    if (opts.stroke_width) {\n      shape.setAttribute('stroke-width', renderer._RS * opts.stroke_width);\n    } else {\n      shape.style.strokeWidth = '0';\n    }\n\n    return shape;\n  };\n\n  var addElementToLayerWithLink = function addElementToLayerWithLink(layerName, url, width) {\n    var canvas = this._renderer._canvas;\n\n    if (!canvas) {\n      var orig_func = arguments.callee;\n      var self = this;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n        orig_func.call(self, layerName, url, width);\n      });\n      log(\"Delaying rendering, waiting for sequence change\");\n      return;\n    }\n\n    var rect = canvas.rect(-0.25 + this._index, 60, width || 1, 4);\n\n    this._renderer._layer_containers[layerName].push(rect);\n\n    rect.style.strokeWidth = '0px';\n    rect.setAttribute('fill', _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color);\n    rect.setAttribute('visibility', 'hidden');\n    rect.setAttribute('class', layerName);\n    return rect;\n  };\n\n  var addCalloutToLayer = function addCalloutToLayer(layerName, element, opts) {\n    var canvas = this._renderer._canvas;\n    var renderer = this._renderer;\n\n    if (typeof element == 'string') {\n      var a_el = document.createElement('div');\n      renderer.fillTemplate(element, opts, function (err, el) {\n        a_el.innerHTML = el;\n      });\n      element = a_el;\n    }\n\n    if (!canvas) {\n      var orig_func = arguments.callee;\n      var self = this;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n        orig_func.call(self, layerName, width, opts);\n      });\n      log(\"Delaying rendering, waiting for sequence change\");\n      return;\n    }\n\n    var callout = canvas.callout(this._index + 0.5, 0.01, element, {\n      'width': 10 * opts.width || 100,\n      'height': opts.height * 10 || 100,\n      'align': opts.align,\n      'font-size': opts['font-size']\n    });\n    callout.setHeight(opts.height * this._renderer._RS);\n    this._renderer._canvas_callout_padding = Math.max(10 * opts.height || 100, this._renderer._canvas_callout_padding || 0);\n\n    this._renderer._layer_containers[layerName].push(callout);\n\n    callout.clear = function () {\n      var cont = renderer._layer_containers[layerName];\n\n      if (cont.indexOf(callout) > 0) {\n        cont.splice(cont.indexOf(callout), 1);\n      }\n\n      callout.parentNode.removeChild(callout);\n    };\n\n    return callout;\n  };\n\n  var scaledAddShapeOverlay = function scaledAddShapeOverlay(layername, width, opts) {\n    var start = this._index;\n    var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n    var res = addShapeToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), opts);\n    res.aa = this.original_index;\n    res.aa_width = width;\n    return res;\n  };\n\n  var scaledAddBoxOverlay = function scaledAddBoxOverlay(layername, width, fraction, opts) {\n    var start = this._index;\n    var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n    var res = addBoxOverlayToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), fraction, opts);\n\n    if (!(opts || {}).merge) {\n      res.aa_width = width;\n      res.aa = this.original_index;\n    } else {\n      res.aa_width = parseInt(res.getAttribute('width')) / this._renderer._RS;\n\n      if (res.aa_width == width) {\n        res.aa = this.original_index;\n      }\n    }\n\n    return res;\n  };\n\n  var scaledAddTextOverlay = function scaledAddTextOverlay(layername, width, opts) {\n    var start = this._index;\n    var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n    var res = addTextToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), opts);\n    res.aa = this.original_index;\n    res.aa_width = width;\n    return res;\n  };\n\n  var scaledAddToLayerWithLink = function scaledAddToLayerWithLink(layername, url, width) {\n    var start = this._index;\n    var end = Math.abs(this._renderer.scalePosition(this.original_index + width, layername)) - 1;\n    var res = addElementToLayerWithLink.call(start < end ? this : this._renderer._sequence_els[end], layername, url, Math.abs(end - start));\n    res.aa = this.original_index;\n    return res;\n  };\n\n  var scaledAddToLayer = function scaledAddToLayer(layername, opts) {\n    var res = addElementToLayer.call(this, layername, opts);\n    res.aa = this.original_index;\n    res.aa_width = 1;\n    return res;\n  };\n\n  CondensedSequenceRenderer.prototype.enableScaling = function () {\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'readerRegistered', function (reader) {\n      console.log('Enabling scaling for legacy readers');\n      var old_result = reader.gotResult;\n      var renderer = this;\n\n      reader.gotResult = function () {\n        var wanted_id = reader.acc || reader.agi || \"\";\n        var old_get_aas = CondensedSequenceRenderer.prototype.getAminoAcidsByPosition;\n        var old_get_pep = CondensedSequenceRenderer.prototype.getAminoAcidsByPeptide;\n        var old_sequence = renderer.sequence;\n\n        if (renderer.sequences) {\n          renderer.sequence = (renderer.sequences[renderer.sequences.map(function (seq) {\n            return (seq.agi || seq.acc || \"\").toLowerCase();\n          }).indexOf(wanted_id.toLowerCase())] || \"\").toString();\n        } else {\n          old_sequence = null;\n        }\n\n        renderer.getAminoAcidsByPosition = function (aas, lay, accession) {\n          if (!lay && !accession) {\n            console.log('Guessing scaling identifier as', wanted_id);\n          }\n\n          return old_get_aas.call(this, aas, lay || wanted_id, accession || wanted_id);\n        };\n\n        renderer.getAminoAcidsByPeptide = function (peptide, lay, accession) {\n          if (!lay && !accession) {\n            console.log('Guessing scaling identifier as', wanted_id);\n          }\n\n          return old_get_pep.call(this, peptide, lay || wanted_id, accession || wanted_id);\n        };\n\n        old_result.call(reader);\n\n        if (old_sequence) {\n          renderer.sequence = old_sequence;\n        }\n\n        renderer.getAminoAcidsByPosition = old_get_aas;\n        renderer.getAminoAcidsByPeptide = old_get_pep;\n      };\n    });\n  };\n\n  CondensedSequenceRenderer.prototype._extendElement = function (el) {\n    el.addToLayer = scaledAddToLayer;\n    el.addBoxOverlay = scaledAddBoxOverlay;\n    el.addShapeOverlay = scaledAddShapeOverlay;\n    el.addTextOverlay = scaledAddTextOverlay;\n    el.addToLayerWithLink = scaledAddToLayerWithLink;\n    el.callout = addCalloutToLayer;\n    el['_renderer'] = this;\n  };\n\n  CondensedSequenceRenderer.prototype.remove = function (lay, el) {\n    if (!el) {\n      return false;\n    }\n\n    if (this._layer_containers[lay] && this._layer_containers[lay].indexOf(el) >= 0) {\n      this._layer_containers[lay].splice(this._layer_containers[lay].indexOf(el), 1);\n\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(el, 'removed');\n\n      if (el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n\n      if (el.tracer && el.tracer.parentNode) {\n        el.tracer.parentNode.removeChild(el.tracer);\n      }\n\n      if (el.bobble && el.bobble.parentNode) {\n        el.bobble.parentNode.removeChild(el.bobble);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  var mark_groups = function mark_groups(renderer, objects) {\n    var group = [];\n    var new_objects = [];\n\n    for (i = 0; i < objects.length; i++) {\n      var current = objects[i],\n          next = null;\n\n      if (!current) {\n        continue;\n      }\n\n      if (objects[i + 1]) {\n        next = objects[i + 1];\n      }\n\n      if (!next || parseInt(next.aa) - parseInt(current.aa) > 10 || renderer.sequence.substring(current, next - 1).match(/[ST]/)) {\n        if (group.length < 3) {\n          group.push(current);\n        } else {\n          group.push(current);\n          group.forEach(function (site) {\n            site.options.zoom_level = 'text';\n          });\n          var coalesce_options = group[0].coalesce || objects[0].coalesce;\n          new_objects.push({\n            'aa': group[0].aa,\n            'type': 'shape',\n            'width': parseInt(current.aa) - parseInt(group[0].aa) + 1,\n            'options': {\n              'zoom_level': 'summary',\n              'shape': 'roundrect',\n              'fill': coalesce_options.fill,\n              'stroke': coalesce_options.stroke,\n              'stroke_width': coalesce_options.stroke_width,\n              'height': group[0].options.height,\n              'offset': group[0].options.offset\n            }\n          });\n        }\n\n        group = [];\n      } else {\n        group.push(current);\n      }\n    }\n\n    new_objects.forEach(function (obj) {\n      objects.push(obj);\n    });\n  };\n\n  CondensedSequenceRenderer.prototype.fix_icons = function (icon_ref) {\n    if (!this.icons_failed) {\n      return icon_ref;\n    }\n\n    if (typeof icon_ref === 'string') {\n      var vals = icon_ref.split('_');\n\n      if (vals[0] && this.icons_failed[vals[0].replace('#', '')]) {\n        vals[0] = this.icons_failed[vals[0].replace('#', '')] + '#';\n        var start = vals.shift();\n        console.log(icon_ref, start + vals.join('_'));\n        return start + vals.join('_');\n      }\n    }\n\n    return icon_ref;\n  };\n\n  CondensedSequenceRenderer.prototype.renderObjects = function (track, objects) {\n    var renderer = this;\n\n    if (objects.length > 0 && objects[0].coalesce) {\n      mark_groups(renderer, objects);\n    }\n\n    var results = [];\n    objects.forEach(function (object) {\n      var potential_height = object.options ? (object.options.height || renderer._layer_containers[track].track_height) + (object.options.offset + object.options.height || 0) : 0;\n\n      if (object.options && potential_height > renderer._layer_containers[track].track_height) {\n        var new_height = renderer._layer_containers[track].track_height + object.options.offset + (object.options.height || renderer._layer_containers[track].track_height);\n\n        if ((renderer._layer_containers[track].fixed_track_height || 0) < new_height) {\n          renderer._layer_containers[track].fixed_track_height = new_height;\n        }\n      }\n\n      var click_reveal;\n      var rendered;\n\n      if (object.aa && !renderer.getAA(parseInt(object.aa), track)) {\n        return;\n      }\n\n      if (typeof object.aa !== 'undefined' && isNaN(object.aa)) {\n        return;\n      }\n\n      if (object.type == \"text\") {\n        if (object.aa) {\n          if (object.width) {\n            rendered = renderer.getAA(parseInt(object.aa), track).addTextOverlay(track, object.width, object.options);\n          } else {\n            rendered = renderer.getAA(parseInt(object.aa), track).addTextOverlay(track, 1, object.options);\n          }\n        } else if (object.peptide) {\n          rendered = renderer.getAminoAcidsByPeptide(object.peptide, track).addTextOverlay(track, 1, object.options);\n        }\n      }\n\n      if (object.type === \"box\") {\n        if (object.aa) {\n          rendered = renderer.getAA(parseInt(object.aa), track).addBoxOverlay(track, parseInt(object.width), null, object.options);\n        } else if (object.peptide) {\n          rendered = renderer.getAminoAcidsByPeptide(object.peptide, track).addToLayer(track, null, object.options);\n        }\n      }\n\n      if (object.type == \"shape\") {\n        if (object.aa) {\n          rendered = renderer.getAA(parseInt(object.aa), track).addShapeOverlay(track, parseInt(object.width), object.options);\n        } else if (object.peptide) {\n          rendered = renderer.getAminoAcidsByPeptide(object.peptide, track)[0].addShapeOverlay(track, object.peptide.length, object.options);\n        }\n      }\n\n      if (object.type == 'line') {\n        rendered = renderer.addValuesToLayer(track, object.values, object.options);\n      }\n\n      if (object.type == \"marker\") {\n        var content = (object.options || {}).content;\n        var wanted_height = object.options.height;\n\n        if (Array.isArray && Array.isArray(content)) {\n          var cloned_options_array = {};\n\n          for (var key in object.options) {\n            if (object.options.hasOwnProperty(key)) {\n              cloned_options_array[key] = object.options[key];\n            }\n          }\n\n          if (object.options.content && Array.isArray(content_data)) {\n            cloned_options_array.content = object.options.content.map(renderer.fix_icons.bind(renderer));\n          }\n\n          click_reveal = renderer.getAA(parseInt(object.aa), track).addToLayer(track, cloned_options_array);\n          click_reveal = click_reveal[1];\n          click_reveal.style.display = 'none';\n          object.options.content = object.options.alt_content;\n          content = object.options.content;\n        }\n\n        if (typeof content == 'object') {\n          var content_el;\n\n          if (content.type == \"circle\") {\n            content_el = renderer._canvas.circle(-0.5, -0.5, 1, 1);\n          }\n\n          if (content.type == 'text_circle') {\n            content_el = renderer._canvas.text_circle(0.5, 0.5, 1, content.text, content.options || {});\n            object.options.break_viewbox = true;\n          }\n\n          if (content.type == \"left_triangle\") {\n            content_el = renderer._canvas.poly('-100,0 0,-100 0,100');\n          }\n\n          if (content.type == \"right_triangle\") {\n            content_el = renderer._canvas.poly('0,100 100,0 0,-100');\n          }\n\n          [\"fill\", \"stroke\", \"stroke-width\", \"fill-opacity\", \"stroke-opacity\", \"opacity\"].forEach(function (prop) {\n            if (content[prop]) {\n              content_el.setAttribute(prop, content[prop]);\n            }\n          });\n          object.options.content = content_el;\n        }\n\n        var cloned_options = {};\n\n        for (var key in object.options) {\n          if (object.options.hasOwnProperty(key)) {\n            cloned_options[key] = object.options[key];\n          }\n        }\n\n        var content_data = (object.options || {}).content;\n\n        if (content_data && typeof content_data === 'string') {\n          cloned_options.content = renderer.fix_icons(content_data);\n        }\n\n        if (content_data && Array.isArray(content_data)) {\n          cloned_options.content = content_data.map(renderer.fix_icons.bind(renderer));\n        }\n\n        var added = renderer.getAA(parseInt(object.aa), track).addToLayer(track, cloned_options);\n\n        if (click_reveal) {\n          click_reveal.toggleReveal = function (ev) {\n            ev.stopPropagation();\n\n            if (this.style.display === 'none') {\n              this.parentNode.appendChild(this);\n              this.style.display = 'block';\n            } else {\n              this.style.display = 'none';\n            }\n\n            renderer.refresh();\n          };\n\n          added[1].addEventListener('touchstart', click_reveal.toggleReveal.bind(click_reveal), true);\n          added[1].addEventListener('click', click_reveal.toggleReveal.bind(click_reveal), false);\n        }\n\n        rendered = added[1];\n      }\n\n      if ((object.options || {}).zoom_level) {\n        rendered.zoom_level = object.options.zoom_level;\n      }\n\n      if (object.identifier) {\n        rendered.setAttribute('identifier', object.identifier);\n      }\n\n      if ((object.options || {}).events && rendered) {\n        object.options.events.forEach(function (ev) {\n          (ev.type || \"\").split(\",\").forEach(function (evtype) {\n            if (evtype == 'click' && rendered.style) {\n              rendered.style.cursor = 'pointer';\n            }\n\n            rendered.addEventListener(evtype, function (e) {\n              e.event_data = ev.data;\n              e.layer = track;\n              e.aa = object.aa;\n            });\n          });\n        });\n      }\n\n      results.push(rendered);\n    });\n    return results;\n  };\n\n  CondensedSequenceRenderer.prototype.addTextTrack = function (seq, container) {\n    var RS = this._RS;\n    var renderer = this;\n    var max_length = 300;\n    var canvas = renderer._canvas;\n    var seq_chars = seq.split('');\n    var amino_acids = canvas.set();\n    var amino_acids_shown = false;\n    var x = 0;\n    var has_textLength = true;\n\n    var no_op = function no_op() {};\n\n    try {\n      var test_el = document.createElementNS(svgns, 'text');\n      test_el.setAttribute('textLength', 10);\n      no_op(test_el.textLength);\n    } catch (e) {\n      has_textLength = false;\n    }\n    /* We used to test to see if there was a touch event\n       when doing the textLength method of amino acid\n       layout, but iOS seems to support this now.\n       \n       Test case for textLength can be found here\n       \n       http://jsfiddle.net/nkmLu/11/embedded/result/\n    */\n\n    /* We also need to test for support for adjusting textLength\n       while also adjusting the dx value. Internet Explorer 10\n       squeezes text when setting a dx value as well as a textLength.\n       I.e. the right-most position of the character is calculated to\n       be x + textLength, rather than x + dx + textLength.\n     */\n\n\n    var supports_dx = false;\n\n    if (typeof _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_dx !== 'undefined') {\n      supports_dx = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_dx;\n    } else {\n      (function (supports_textLength) {\n        if (!supports_textLength) {\n          supports_dx = false;\n          return;\n        }\n\n        var test_el = document.createElementNS(svgns, 'text');\n        test_el.setAttribute('textLength', 30);\n\n        if (!test_el.getExtentOfChar) {\n          return;\n        }\n\n        test_el.setAttribute('x', '0');\n        test_el.setAttribute('y', '0');\n        test_el.textContent = 'ABC';\n        canvas.appendChild(test_el);\n        var extent = test_el.getExtentOfChar(2).x;\n        test_el.setAttribute('dx', '10');\n\n        if (Math.abs(test_el.getExtentOfChar(2).x - extent) < 9.5) {\n          supports_dx = false;\n        } else {\n          supports_dx = true;\n        }\n\n        _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_dx = supports_dx;\n        test_el.parentNode.removeChild(test_el);\n      })(has_textLength);\n    }\n\n    var a_text;\n\n    if (has_textLength && 'lengthAdjust' in document.createElementNS(svgns, 'text') && 'textLength' in document.createElementNS(svgns, 'text')) {\n      if (seq.length <= max_length) {\n        a_text = canvas.text(0, 12, document.createTextNode(seq));\n        a_text.setAttribute('textLength', RS * seq.length);\n      } else {\n        a_text = canvas.text(0, 12, document.createTextNode(seq.substr(0, max_length)));\n        a_text.setAttribute('textLength', RS * max_length);\n      }\n\n      canvas.insertBefore(a_text, canvas.firstChild.nextSibling);\n      a_text.style.fontFamily = \"'Lucida Console', 'Courier New', Monaco, monospace\";\n      a_text.setAttribute('lengthAdjust', 'spacing');\n      a_text.setAttribute('text-anchor', 'start');\n      a_text.setAttribute('dx', 5);\n      a_text.setAttribute('dy', '1.5ex');\n      a_text.setAttribute('font-size', RS);\n      a_text.setAttribute('fill', '#000000');\n      amino_acids.push(a_text);\n      container.push(a_text);\n    } else {\n      for (var i = 0; i < seq_chars.length; i++) {\n        a_text = canvas.text(x, 12, seq_chars[i]);\n        a_text.firstChild.setAttribute('dy', '1.5ex');\n        amino_acids.push(a_text);\n        container.push(a_text);\n        a_text.style.fontFamily = \"'Lucida Console', Monaco, monospace\";\n        x += 1;\n      }\n\n      amino_acids.attr({\n        'width': RS,\n        'text-anchor': 'start',\n        'height': RS,\n        'font-size': RS,\n        'fill': '#000000'\n      });\n    }\n\n    var update_sequence = function update_sequence() {\n      if (seq.length <= max_length) {\n        return;\n      }\n\n      var container_width = renderer._container_canvas.parentNode.cached_width;\n\n      if (!container_width) {\n        container_width = renderer._container_canvas.parentNode.getBoundingClientRect().width;\n        var docwidth = document.documentElement.clientWidth;\n\n        if (docwidth > container_width) {\n          container_width = docwidth;\n        }\n      }\n\n      let max_size = Math.ceil(10 * container_width * renderer.zoom / RS);\n\n      if (max_size > seq.length) {\n        max_size = seq.length;\n      }\n\n      a_text.setAttribute('textLength', RS * max_size);\n      var start = parseInt(renderer.leftVisibleResidue());\n      start -= 50;\n\n      if (start < 0) {\n        start = 0;\n      }\n\n      if (start + max_size >= seq.length) {\n        start = seq.length - max_size;\n\n        if (start < 0) {\n          start = 0;\n        }\n      }\n\n      a_text.replaceChild(document.createTextNode(seq.substr(start, max_size)), a_text.firstChild);\n      a_text.setAttribute(supports_dx ? 'dx' : 'x', 5 + start * RS);\n    };\n\n    var panstart = function panstart() {\n      if (amino_acids_shown) {\n        amino_acids.attr({\n          'display': 'none'\n        });\n      }\n    };\n\n    var panend = function panend() {\n      if (amino_acids_shown) {\n        amino_acids.attr({\n          'display': 'block'\n        });\n        update_sequence();\n      }\n    };\n\n    var zoomchange = function zoomchange() {\n      if (canvas.zoom > 3.6) {\n        amino_acids.attr({\n          'display': 'block'\n        });\n        amino_acids_shown = true;\n        update_sequence();\n      } else if (canvas.zoom > 0.2) {\n        amino_acids.attr({\n          'display': 'none'\n        });\n        amino_acids_shown = false;\n      } else {\n        amino_acids.attr({\n          'display': 'none'\n        });\n        amino_acids_shown = false;\n      }\n    };\n\n    if (!container.panevents) {\n      canvas.addEventListener('panstart', panstart, false);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'panend', panend);\n      container.panevents = true;\n    }\n\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'zoomChange', zoomchange, false);\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(amino_acids[0], 'removed', function () {\n      canvas.removeEventListener('panstart', panstart);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'panend', panend);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'zoomChange', zoomchange);\n      delete container.panevents;\n    });\n    return amino_acids;\n  };\n\n  CondensedSequenceRenderer.prototype.renderTextTrack = function (lay, in_text) {\n    var layerName = lay;\n\n    if (typeof layerName !== 'string') {\n      layerName = lay.name;\n    }\n\n    var canvas = this._canvas;\n\n    if (!canvas || typeof layerName == 'undefined') {\n      return;\n    }\n\n    var renderer = this;\n    var container = this._layer_containers[layerName];\n    var result = this.addTextTrack(in_text, container);\n    return result;\n  };\n})();\n\nCondensedSequenceRenderer.prototype.EnableHighlights = function () {\n  var renderer = this;\n  var highlights = [];\n\n  var createNewHighlight = function createNewHighlight() {\n    var highlight = renderer._canvas.rect(0, 0, 0, '100%');\n\n    highlight.addEventListener('click', ev => {\n      ev.stopPropagation();\n      return false;\n    });\n    highlight.addEventListener('mousedown', ev => {\n      ev.stopPropagation();\n      return false;\n    });\n    highlight.addEventListener('touchstart', ev => {\n      ev.stopPropagation();\n      return false;\n    });\n    highlight.setAttribute('fill', '#ffdddd');\n    highlight.removeAttribute('stroke');\n    var pnode = highlight.parentNode;\n    pnode.insertBefore(highlight, pnode.firstChild.nextSibling);\n    highlights.push(highlight);\n  };\n\n  createNewHighlight();\n\n  renderer.moveHighlight = function () {\n    var vals = Array.prototype.slice.call(arguments);\n    var RS = this._RS;\n    var i = 0,\n        idx = 0;\n\n    for (i = 0; i < vals.length; i += 2) {\n      var from = vals[i];\n      var to = vals[i + 1];\n      var highlight = highlights[idx];\n\n      if (!highlight) {\n        createNewHighlight();\n        highlight = highlights[idx];\n      }\n\n      if (highlight.previousSibling.previousSibling && highlights.indexOf(highlight.previousSibling.previousSibling) < 0) {\n        highlight.parentNode.insertBefore(highlight, highlight.parentNode.firstChild.nextSibling);\n      }\n\n      highlight.setAttribute('x', (from - 1) * RS);\n      highlight.setAttribute('width', (to - (from - 1)) * RS);\n      highlight.setAttribute('visibility', 'visible');\n      idx += 1;\n    }\n\n    for (i = idx; i < highlights.length; i++) {\n      highlights[i].setAttribute('visibility', 'hidden');\n    }\n  };\n};\n\n(function () {\n  var bindClick = function bindClick(element, handler) {\n    if (\"ontouchstart\" in window) {\n      element.addEventListener('touchstart', function (ev) {\n        var startX = ev.touches[0].clientX;\n        var startY = ev.touches[0].clientY;\n\n        var reset = function reset() {\n          document.body.removeEventListener('touchmove', move);\n          element.removeEventListener('touchend', end);\n        };\n\n        var end = function end(ev) {\n          reset();\n          ev.stopPropagation();\n          ev.preventDefault();\n\n          if (handler) {\n            handler.call(null, ev);\n          }\n        };\n\n        var move = function move(ev) {\n          if (Math.abs(ev.touches[0].clientX - startX) > 10 || Math.abs(ev.touches[0].clientY - startY) > 10) {\n            reset();\n          }\n        }; //FIXME - PASSIVE\n\n\n        document.body.addEventListener('touchmove', move, {\n          passive: true\n        });\n        element.addEventListener('touchend', end, false);\n      }, {\n        passive: true\n      }); //FIXME - PASSIVE\n    } else {\n      element.addEventListener('click', handler, false);\n    }\n  };\n\n  var mousePosition = function mousePosition(evt) {\n    var posx = 0;\n    var posy = 0;\n\n    if (!evt) {\n      evt = window.event;\n    }\n\n    if (evt.pageX || evt.pageY) {\n      posx = evt.pageX - (document.body.scrollLeft + document.documentElement.scrollLeft);\n      posy = evt.pageY - (document.body.scrollTop + document.documentElement.scrollTop);\n    } else if (evt.clientX || evt.clientY) {\n      posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n      posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    }\n\n    if (self.targetElement) {\n      posx = evt.screenX;\n      posy = evt.screenY;\n    }\n\n    return [posx, posy];\n  };\n\n  var svgPosition = function svgPosition(ev, svgel) {\n    var positions = mousePosition(ev.changedTouches ? ev.changedTouches[0] : ev);\n    var p = {};\n\n    if (svgel.nodeName == 'svg') {\n      p = svgel.createSVGPoint();\n      var rootCTM = svgel.getScreenCTM();\n      p.x = positions[0];\n      p.y = positions[1];\n      self.matrix = rootCTM.inverse();\n      p = p.matrixTransform(self.matrix);\n    } else {\n      p.x = positions[0];\n      p.y = positions[1];\n    }\n\n    return p;\n  };\n\n  var notifySelectionToLayers = function notifySelectionToLayers(start, end, renderer) {\n    let selections = new WeakMap();\n    selections.set(renderer, [start, end]);\n\n    for (let layname of Object.keys(renderer._layer_containers || {})) {\n      var lay = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layname);\n      let values = [null, null];\n\n      if (start && end) {\n        values = [renderer.scalePosition(start, layname, true), renderer.scalePosition(end, layname, true)];\n      }\n\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(lay, 'selection', values);\n      selections.set(lay, values);\n    }\n\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(renderer, 'selection', selections);\n  };\n\n  CondensedSequenceRenderer.prototype.enableSelection = function (callback) {\n    var self = this;\n\n    if (!self._canvas) {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(self, 'sequenceChange', function () {\n        self.enableSelection();\n      });\n      return;\n    }\n\n    var canvas = self._canvas;\n    var start;\n    var end;\n    var end_func;\n    var local_start;\n    var local_end;\n    let in_drag = false;\n\n    var moving_func = function moving_func(evt) {\n      evt.preventDefault();\n      var p = svgPosition(evt, canvas);\n      end = p.x;\n\n      if (start > end) {\n        local_end = parseInt(start / 50);\n        local_start = parseInt(end / 50);\n      } else {\n        local_end = parseInt(end / 50);\n        local_start = parseInt(start / 50);\n      }\n\n      self.select(local_start + 1, local_end);\n    }; // Do not send the click event to the canvas\n    // this screws up with doing things on the selection\n    // Need alternative method to clear selection\n    //\n\n\n    bindClick(canvas, function (evt) {\n      if (!self.selecting) {\n        return;\n      }\n    });\n    canvas.addEventListener('mousedown', function (evt) {\n      if (!self.selecting) {\n        return;\n      }\n\n      in_drag = true;\n      self.select();\n      var positions = mousePosition(evt);\n      var p = {};\n\n      if (canvas.nodeName == 'svg') {\n        p = canvas.createSVGPoint();\n        var rootCTM = this.getScreenCTM();\n        p.x = positions[0];\n        p.y = positions[1];\n        self.matrix = rootCTM.inverse();\n        p = p.matrixTransform(self.matrix);\n      } else {\n        p.x = positions[0];\n        p.y = positions[1];\n      }\n\n      start = p.x;\n      end = p.x;\n      canvas.addEventListener('mousemove', moving_func, false);\n      evt.preventDefault();\n    }, false);\n    canvas.addEventListener('mouseup', function (evt) {\n      if (in_drag) {\n        notifySelectionToLayers(local_start === null ? null : local_start + 1, local_end, self);\n        local_start = null;\n        local_end = null;\n        in_drag = false;\n      }\n\n      canvas.removeEventListener('mousemove', moving_func);\n      evt.preventDefault();\n    });\n    canvas.addEventListener('touchend', function () {\n      if (in_drag) {\n        setTimeout(function () {\n          notifySelectionToLayers(local_start === null ? null : local_start + 1, local_end, self);\n          local_start = null;\n          local_end = null;\n          in_drag = false;\n        }, 500);\n      }\n\n      canvas.removeEventListener('touchmove', moving_func);\n    });\n    canvas.addEventListener('touchstart', function (evt) {\n      if (!self.selecting) {\n        return;\n      }\n\n      if (evt.changedTouches.length == 1) {\n        in_drag = true;\n        evt.preventDefault();\n        var positions = mousePosition(evt.changedTouches[0]);\n        var p = {};\n\n        if (canvas.nodeName == 'svg') {\n          p = canvas.createSVGPoint();\n          var rootCTM = this.getScreenCTM();\n          p.x = positions[0];\n          p.y = positions[1];\n          self.matrix = rootCTM.inverse();\n          p = p.matrixTransform(self.matrix);\n        } else {\n          p.x = positions[0];\n          p.y = positions[1];\n        }\n\n        start = p.x;\n        end = p.x;\n        canvas.addEventListener('touchmove', moving_func, {\n          passive: false\n        });\n      }\n    }, {\n      passive: false\n    }); //FIXME - PASSIVE\n  };\n})();\n/*\n * Get a canvas set of the visible tracers on this renderer\n */\n\n\nCondensedSequenceRenderer.prototype._visibleTracers = function () {\n  var tracers = null;\n\n  for (var i in _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n    if (this.isLayerActive(i) && this._layer_containers[i] && this._layer_containers[i].tracers) {\n      if (!tracers) {\n        tracers = this._layer_containers[i].tracers;\n      } else {\n        tracers.concat(this._layer_containers[i].tracers);\n      }\n    }\n  }\n\n  return tracers;\n};\n\nCondensedSequenceRenderer.prototype._resizeContainer = function () {\n  var RS = this._RS;\n\n  if (this._container && this._canvas) {\n    var width = (this.zoom || 1) * 2 * this.sequence.length;\n    var height = (this.zoom || 1) * 2 * (this._canvas._canvas_height / this._RS);\n\n    if (this._canvas_callout_padding) {\n      height += this._canvas_callout_padding;\n    }\n\n    this._canvas.setAttribute('width', width);\n\n    this._canvas.setAttribute('height', height);\n\n    this.navigation.setDimensions(width, height);\n\n    if (this.grow_container) {\n      this._container_canvas.setAttribute('height', height); // this._container.style.height = height+'px';        \n\n    } else {\n      this._container_canvas.setAttribute('height', '100%');\n\n      this._container_canvas.setAttribute('width', '100%'); // this._container.style.height = 'auto';\n\n\n      this.navigation.setZoom(this.zoom);\n    }\n  }\n};\n\n(function (clazz) {\n  var vis_change_event = function vis_change_event(renderer, visibility) {\n    var self = this;\n\n    if (!renderer._layer_containers[self.name] || renderer._layer_containers[self.name].length <= 0) {\n      return;\n    }\n\n    if (!visibility) {\n      if (renderer._layer_containers[self.name].tracers) {\n        renderer._layer_containers[self.name].tracers.hide();\n      }\n    }\n  };\n  /**\n   * Add a layer to this renderer.\n   * @param {Object} layer    Layer object to add. The layer data is used to create a track that can be independently shown/hidden.\n   *                          The track itself is by default hidden.\n   */\n\n\n  clazz.prototype.addTrack = function (layer) {\n    var RS = this._RS;\n    var renderer = this;\n\n    if (!this._canvas) {\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'sequencechange', function () {\n        this.addTrack(layer);\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this, 'sequencechange', arguments.callee);\n      });\n      console.log(\"No canvas, cannot add track, waiting for sequencechange event\");\n      return;\n    }\n\n    var layer_containers = this._layer_containers || [];\n\n    if (!layer_containers[layer.name] || layer_containers[layer.name] === null) {\n      layer_containers[layer.name] = this._canvas.set();\n\n      if (!layer_containers[layer.name].track_height) {\n        layer_containers[layer.name].track_height = renderer.trackHeight || 4;\n      }\n\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(layer, 'visibilityChange', vis_change_event);\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(layer, 'visibilityChange', vis_change_event);\n      var event_names = ['click', 'mouseover', 'mousedown', 'mousemove', 'mouseout', 'mouseup', 'mouseenter', 'mouseleave'];\n\n      var ev_function = function ev_function(ev, original_event, element) {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(layer, ev.type, [original_event, element.position_start, element.position_end]);\n      }; // for (var i = 0 ; i < event_names.length; i++) {\n      //     bean.add(layer_containers[layer.name]._event_proxy,event_names[i],ev_function);\n      // }\n\n\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(layer, 'removed');\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(layer, 'removed', function (rend) {\n        if (rend) {\n          rend.removeTrack(this);\n        } else {\n          renderer.removeTrack(this);\n        }\n      });\n    }\n\n    this._layer_containers = layer_containers;\n  };\n\n  clazz.prototype.removeTrack = function (layer) {\n    if (!this._layer_containers) {\n      return;\n    }\n\n    var layer_containers = this._layer_containers || [];\n\n    if (layer_containers[layer.name]) {\n      let elements = [].concat(layer_containers[layer.name]);\n\n      for (let el of elements) {\n        this.remove(layer.name, el);\n      }\n\n      delete this._layer_containers[layer.name];\n      layer.disabled = true;\n    }\n  };\n\n  var refresh_id = 0;\n\n  clazz.prototype.disablePrintResizing = function () {\n    delete this._media_func;\n  };\n\n  clazz.prototype.enablePrintResizing = function () {\n    if (!(this.win() || window).matchMedia) {\n      return;\n    }\n\n    if (this._media_func) {\n      return this._media_func;\n    }\n\n    this._media_func = function (matcher) {\n      var self = this;\n\n      if (!self._canvas) {\n        return;\n      }\n\n      if (self.grow_container) {\n        if (matcher.matches) {\n          delete self._container_canvas.parentNode.cached_width;\n          _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'panend');\n        }\n\n        return;\n      }\n\n      var match = matcher;\n\n      if (!match.matches) {\n        if (self.old_zoom) {\n          var a_zoom = self.old_zoom;\n          self.old_zoom = null;\n          self.zoomCenter = null;\n          self.withoutRefresh(function () {\n            self.zoom = a_zoom;\n          });\n\n          self._canvas.setCurrentTranslateXY(self.old_translate, 0);\n\n          self._container_canvas.setAttribute('viewBox', self.old_viewbox); // self._container.style.height = 'auto';\n\n\n          self.old_zoom = null;\n          self.old_translate = null;\n          self.refresh();\n          _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'zoomChange');\n        }\n\n        return;\n      }\n\n      try {\n        var container = self._container;\n        self.old_translate = self._canvas.currentTranslateCache.x;\n\n        self._canvas.setCurrentTranslateXY(0, 0);\n\n        var zoomFactor = 0.95 * container.clientWidth / self.sequence.length;\n\n        if (!self.old_zoom) {\n          self.old_zoom = self.zoom;\n          self.old_viewbox = self._container_canvas.getAttribute('viewBox');\n        }\n\n        self.zoomCenter = null;\n\n        self._container_canvas.removeAttribute('viewBox');\n\n        self.withoutRefresh(function () {\n          self.zoom = zoomFactor;\n        });\n        self.refresh();\n      } catch (err) {\n        console.log(err);\n        console.log(err.stack);\n      }\n    };\n\n    var rend = this;\n\n    if (!rend._bound_media) {\n      (this.win() || window).matchMedia('print').addListener(function (matcher) {\n        if (rend._media_func) {\n          rend._media_func(matcher);\n        }\n      });\n    }\n\n    rend._bound_media = true;\n  };\n  /**\n   * Cause a refresh of the renderer, re-arranging the tracks on the canvas, and resizing the canvas if necessary.\n   * @param {Boolean} animateds Cause this refresh to be an animated refresh\n   */\n\n\n  clazz.prototype.refresh = function (animated) {\n    if (!this._canvas) {\n      return;\n    }\n\n    var layer_containers = this._layer_containers || [];\n    var RS = this._RS;\n    var track_heights = 0;\n    var order = this.trackOrder || [];\n    var fixed_font_scale = this.fixedFontScale;\n\n    if (this.navigation) {\n      this.navigation.reset();\n    }\n\n    for (var i = 0; i < order.length; i++) {\n      var name = order[i];\n      var container = layer_containers[name];\n\n      if (!container) {\n        continue;\n      }\n\n      var y_val;\n\n      if (!this.isLayerActive(name)) {\n        var attrs = {\n          'y': -1 * this._axis_height * RS,\n          'height': RS * container.track_height / this.zoom,\n          'visibility': 'hidden'\n        }; //            var attrs = { 'y' : (this._axis_height  + (track_heights - container.track_height )/ this.zoom)*RS, 'height' :  RS * container.track_height / this.zoom ,'visibility' : 'hidden' };\n\n        if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name).group) {\n          var controller_track = this.navigation.getController(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name).group);\n\n          if (controller_track && this.isLayerActive(controller_track)) {\n            attrs.y = layer_containers[controller_track.name].currenty();\n          }\n        }\n\n        if (container.fixed_track_height) {\n          delete attrs.height;\n        }\n\n        if (animated) {\n          container.animate(attrs);\n        } else {\n          container.attr(attrs);\n        }\n\n        if (container.tracers) {}\n\n        continue;\n      } else {// container.attr({ 'opacity' : '1' });\n      }\n\n      var tracer_top = track_heights;\n\n      if (container.fixed_track_height) {\n        var track_height = container.fixed_track_height;\n        y_val = this._axis_height + track_heights / this.zoom;\n\n        if (animated) {\n          container.animate({\n            'visibility': 'visible',\n            'y': y_val * RS,\n            'height': RS * container.track_height / this.zoom\n          });\n        } else {\n          container.attr({\n            'visibility': 'visible',\n            'y': y_val * RS,\n            'height': RS * container.track_height / this.zoom\n          });\n        }\n\n        if (this.navigation) {\n          y_val -= 1 * container.track_height / this.zoom;\n          this.navigation.renderTrack(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name), y_val * RS, RS * container.fixed_track_height / this.zoom, {\n            'font-scale': (fixed_font_scale || 1) * 3 * container.track_height / container.fixed_track_height\n          });\n        }\n\n        track_heights += container.fixed_track_height + this.trackGap - container.track_height;\n      } else {\n        y_val = this._axis_height + track_heights / this.zoom;\n\n        if (animated) {\n          container.animate({\n            'visibility': 'visible',\n            'y': y_val * RS,\n            'height': RS * container.track_height / this.zoom\n          });\n        } else {\n          container.attr({\n            'visibility': 'visible',\n            'y': y_val * RS,\n            'height': RS * container.track_height / this.zoom\n          });\n        }\n\n        if (this.navigation) {\n          y_val -= 1 * container.track_height / this.zoom;\n          this.navigation.renderTrack(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name), y_val * RS, RS * 3 * container.track_height / this.zoom, fixed_font_scale ? {\n            'font-scale': fixed_font_scale\n          } : null);\n          track_heights += container.track_height;\n        }\n\n        track_heights += container.track_height + this.trackGap;\n      }\n\n      container.refresh_zoom();\n\n      if (container.tracers) {\n        var disp_style = this.isLayerActive(name) && this.zoom > 3.6 ? 'visible' : 'hidden';\n        var height = (1.5 + tracer_top / this.zoom) * RS;\n\n        if (animated) {\n          container.tracers.animate({\n            'visibility': disp_style,\n            'y': 0.65 * this._axis_height * RS,\n            'height': height\n          });\n        } else {\n          container.tracers.attr({\n            'visibility': disp_style,\n            'y': 0.65 * this._axis_height * RS,\n            'height': height\n          });\n        }\n      }\n    }\n\n    var viewBox = [-1, 0, 0, 0];\n    viewBox[0] = -2 * RS;\n    viewBox[2] = (this.sequence.split('').length + this.padding + 2) * RS;\n    viewBox[3] = (this._axis_height + track_heights / this.zoom + this.padding / this.zoom) * RS;\n\n    this._canvas.setAttribute('viewBox', viewBox.join(' '));\n\n    this._canvas._canvas_height = viewBox[3];\n    var outer_viewbox = [].concat(viewBox);\n    outer_viewbox[0] = 0;\n    outer_viewbox[2] = this.zoom * (2 * this.sequence.length) + this.padding;\n    outer_viewbox[3] = this.zoom * 2 * (this._axis_height + track_heights / this.zoom + this.padding / this.zoom);\n\n    if (!this.grow_container) {\n      this._container_canvas.setAttribute('viewBox', outer_viewbox.join(' '));\n    } else {\n      this._container_canvas.removeAttribute('viewBox');\n    }\n\n    this._resizeContainer();\n\n    viewBox[0] = 0;\n\n    if (this.navigation) {\n      if (this.grow_container) {\n        this.navigation.nav_width_base = outer_viewbox[3] < 200 ? outer_viewbox[3] : 200;\n      }\n\n      this.navigation.move_closer();\n\n      if (this.navigation.visible()) {\n        this._canvas.style.GomapScrollLeftMargin = 100 * RS / this.zoom;\n      } else {\n        this._canvas.style.GomapScrollLeftMargin = 1000;\n      }\n\n      this.navigation.setViewBox(viewBox.join(' '));\n    }\n\n    if (this.navigation) {\n      this.navigation.refresh();\n    }\n  };\n  /*\n  \n  Modified from:\n  \n  http://stackoverflow.com/questions/5433806/convert-embedded-svg-to-png-in-place\n  \n  None of the Safari browsers work with this, giving DOM Exception 18\n  \n  http://stackoverflow.com/questions/8158312/rasterizing-an-in-document-svg-to-canvas\n  \n  I think this is the relevant bug.\n  \n  https://bugs.webkit.org/show_bug.cgi?id=119492\n  \n  */\n\n\n  var svgDataURL = function svgDataURL(svg) {\n    svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n    var svgAsXML = new XMLSerializer().serializeToString(svg);\n    return \"data:image/svg+xml,\" + encodeURIComponent(svgAsXML);\n  };\n\n  clazz.prototype.pngURL = function (pngReady, out_width) {\n    //var svg = document.getElementById('foobar');//this._canvas;\n    var svg_data = this._canvas.cloneNode(true);\n\n    var sequences = svg_data.querySelectorAll('text[data-spaces]');\n\n    for (var i = 0; i < sequences.length; i++) {\n      sequences[i].parentNode.removeChild(sequences[i]);\n    } // Set up the aspect ratio of the output element\n\n\n    var svg = document.createElementNS(svgns, 'svg');\n    svg.setAttribute('width', this._container_canvas.getBoundingClientRect().width);\n    svg.setAttribute('height', this._container_canvas.getBoundingClientRect().height);\n    svg.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n    var transform_group = document.createElementNS(svgns, 'g');\n    transform_group.setAttribute('transform', this._canvas.parentNode.getAttribute('transform'));\n    svg.appendChild(transform_group);\n    transform_group.appendChild(svg_data); // We are missing the defs elements from the containing node\n\n    var all_defs = this._container_canvas.querySelectorAll('defs');\n\n    for (var i = 0; i < all_defs.length; i++) {\n      svg.appendChild(all_defs[i].cloneNode(true));\n    }\n\n    var can = document.createElement('canvas');\n    var total_width = 2 * parseInt(svg.getAttribute('width'));\n    var total_height = 2 * parseInt(svg.getAttribute('height'));\n\n    if (out_width) {\n      if (total_width > out_width) {\n        var ratio = total_width / out_width;\n        total_width = out_width;\n        total_height = parseInt(total_height / ratio);\n      }\n    }\n\n    can.width = total_width;\n    can.height = total_height;\n    var svgImg = new Image();\n    svgImg.width = 1;\n    svgImg.height = 1;\n    var ctx = can.getContext('2d');\n\n    svgImg.onload = function () {\n      ctx.drawImage(svgImg, 0, 0, can.width, can.height);\n      pngReady(can.toDataURL());\n    };\n\n    svgImg.onerror = function () {\n      console.log(\"Got an error\");\n    };\n\n    var dataurl = svgDataURL(svg);\n    svgImg.src = dataurl;\n  };\n})(CondensedSequenceRenderer);\n/**\n * Zoom level has changed for this renderer\n * @name    CondensedSequenceRenderer#zoomChange\n * @event\n * @param   {Object}    e\n */\n\n\nCondensedSequenceRenderer.Zoom = function (renderer) {\n  /**\n   *  @lends CondensedSequenceRenderer.prototype\n   *  @property   {Number}    zoom        The zoom level for a renderer. Minimum zoom level is zero, and defaults to the default zoom value\n   *  @property   {Array}     trackOrder  The order of tracks on the renderer, an array of layer/group names.\n   *  @property   {Number}    padding     Padding to apply to the right and top of plots (default 10).\n   *  @property   {Number}    trackGap    Vertical gap between tracks (default 10)\n   */\n  var timeout = null;\n  var start_zoom = null;\n  var zoom_level = null;\n  var center_residue = null;\n  var start_x = null;\n  var transformer;\n  var shifter;\n  var accessors = {\n    setZoom: function setZoom(zoomLevel) {\n      var container_width = renderer._container.cached_width;\n\n      if (!container_width) {\n        container_width = renderer._container.clientWidth;\n      }\n\n      if (!renderer.sequence) {\n        zoom_level = zoomLevel;\n        return;\n      }\n\n      var min_zoom_level = container_width / (2 * renderer.sequence.length); // if  (! renderer.grow_container ) {\n      //     min_zoom_level = 0.3 / 2 * min_zoom_level;\n      // }\n      // var min_zoom_level = renderer.sequence ? (0.3 / 2) * container_width / renderer.sequence.length : 0.5;\n\n      if (zoomLevel < min_zoom_level) {\n        zoomLevel = min_zoom_level;\n      }\n\n      if (zoomLevel > 10) {\n        zoomLevel = 10;\n      }\n\n      var self = this;\n\n      if (zoomLevel == zoom_level) {\n        if (this.refresh.suspended && self._canvas && self._canvas.zoom !== parseFloat(zoom_level)) {\n          self._canvas.zoom = parseFloat(zoom_level);\n\n          self._canvas.setScale(1);\n\n          _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'zoomChange');\n        }\n\n        return;\n      }\n\n      if (!self._canvas) {\n        zoom_level = zoomLevel;\n        return;\n      }\n\n      var no_touch_center = false;\n\n      if (self.zoomCenter == 'center') {\n        no_touch_center = true;\n        self.zoomCenter = {\n          'x': self._RS * 0.5 * (self.leftVisibleResidue() + self.rightVisibleResidue())\n        };\n      }\n\n      if (self.zoomCenter && !center_residue) {\n        start_x = self._canvas.currentTranslateCache.x || 0;\n        center_residue = self.zoomCenter ? self.zoomCenter.x : 0;\n      } else if (center_residue && !self.zoomCenter) {\n        // We should not be zooming if there is a center residue and no zoomCenter;\n        return;\n      }\n\n      if (timeout) {\n        clearTimeout(timeout);\n      } else {\n        start_zoom = parseFloat(zoom_level || 1);\n      }\n\n      zoom_level = parseFloat(zoomLevel);\n      var scale_value = Math.abs(parseFloat(zoomLevel) / start_zoom);\n      window.cancelAnimationFrame(transformer);\n      transformer = window.requestAnimationFrame(function () {\n        // Rendering bottleneck\n        self._canvas.setScale(scale_value);\n      });\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, '_anim_begin');\n\n      if (document.createEvent) {\n        var evObj = document.createEvent('Events');\n        evObj.initEvent('panstart', false, true);\n\n        self._canvas.dispatchEvent(evObj);\n      }\n\n      var old_x = self._canvas.currentTranslateCache.x;\n\n      if (center_residue) {\n        var delta = (start_zoom - zoom_level) / (scale_value * 25) * center_residue;\n        delta += start_x / scale_value;\n        cancelAnimationFrame(shifter);\n        shifter = window.requestAnimationFrame(function () {\n          // Rendering bottleneck\n          self._canvas.setCurrentTranslateXY(delta, (start_zoom - zoom_level) / scale_value * self._axis_height * 2);\n        });\n      }\n\n      var end_function = function end_function() {\n        timeout = null;\n        var scale_value = Math.abs(parseFloat(zoom_level) / start_zoom);\n\n        self._canvas.setScale(null);\n\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'panend');\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, '_anim_end');\n\n        let zoomchange = function zoomchange() {\n          _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(self._canvas, 'zoomChange', zoomchange);\n          self.refresh();\n\n          if (typeof center_residue != 'undefined') {\n            var delta = (start_zoom - zoom_level) / 25 * center_residue;\n            delta += start_x;\n\n            self._resizeContainer();\n\n            if (self._canvas.shiftPosition) {\n              self._canvas.shiftPosition(delta, 0);\n            } else {\n              self._canvas.setCurrentTranslateXY(delta, 0);\n            }\n          }\n\n          center_residue = null;\n          start_x = null;\n        };\n\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(self._canvas, 'zoomChange', zoomchange);\n\n        if (self._canvas) {\n          self._canvas.zoom = parseFloat(zoom_level);\n          _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'zoomChange');\n        }\n\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self, 'zoomChange');\n      };\n\n      if (!this.refresh.suspended) {\n        timeout = setTimeout(end_function, 100);\n      } else {\n        end_function();\n      }\n    },\n    fitZoom: function fitZoom() {\n      var container_width = renderer._container.cached_width;\n\n      if (!container_width) {\n        container_width = renderer._container.clientWidth;\n      }\n\n      var min_zoom_level = 0.5;\n\n      if (renderer.sequence) {\n        min_zoom_level = container_width / (2 * renderer.sequence.length);\n      }\n\n      renderer.zoom = min_zoom_level;\n    },\n    getZoom: function getZoom() {\n      return zoom_level || 1;\n    }\n  };\n\n  if (Object.defineProperty && !_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE8) {\n    Object.defineProperty(renderer, \"zoom\", {\n      get: accessors.getZoom,\n      set: accessors.setZoom\n    });\n  }\n\n  renderer.fitZoom = accessors.fitZoom;\n};\n/* Add some properties that will trigger a refresh on the renderer when they are changed.\n   These are all stateless\n */\n\n\n(function (clazz) {\n  var accessors = {\n    getPadding: function getPadding() {\n      return this._padding || 10;\n    },\n    setPadding: function setPadding(padding) {\n      this._padding = padding;\n      this.refresh();\n    },\n    getTrackGap: function getTrackGap() {\n      if (!this._track_gap) {\n        var default_value = \"ontouchend\" in document ? 20 : 10;\n        this._track_gap = this._track_gap || default_value;\n      }\n\n      return this._track_gap;\n    },\n    setTrackGap: function setTrackGap(trackGap) {\n      this._track_gap = trackGap;\n      this.refresh();\n    }\n  };\n\n  if (Object.defineProperty && !_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE8) {\n    Object.defineProperty(clazz.prototype, \"padding\", {\n      get: accessors.getPadding,\n      set: accessors.setPadding\n    });\n    Object.defineProperty(clazz.prototype, \"trackGap\", {\n      get: accessors.getTrackGap,\n      set: accessors.setTrackGap\n    });\n  }\n})(CondensedSequenceRenderer);\n\nCondensedSequenceRenderer.Navigation = _CondensedSequenceRendererNavigation__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n/* harmony default export */ __webpack_exports__[\"default\"] = (CondensedSequenceRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/CondensedSequenceRenderer.js\n")},"../gator/js/lib/CondensedSequenceRendererNavigation.js":
/*!**************************************************************!*\
  !*** ../gator/js/lib/CondensedSequenceRendererNavigation.js ***!
  \**************************************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SVGCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SVGCanvas */ \"../gator/js/lib/SVGCanvas.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"../gator/js/bean.js\");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MASCP */ \"../gator/js/lib/MASCP.js\");\nconst svgns = 'http://www.w3.org/2000/svg';\n\n\n\nvar touch_scale = 1,\n    touch_enabled = false;\n\nif (\"ontouchend\" in document) {\n  touch_scale = window.devicePixelRatio > 1 ? 2 : 1;\n  touch_enabled = true;\n}\n\nvar Navigation = function Navigation(parent_canvas, renderer) {\n  Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parent_canvas);\n\n  this.win = function () {\n    return renderer.win();\n  };\n\n  buildNavPane.call(this, parent_canvas);\n  var track_group = parent_canvas.group();\n  parent_canvas.insertBefore(track_group, parent_canvas.lastChild);\n  var track_canvas = document.createElementNS(svgns, 'svg');\n  buildTrackPane.call(this, track_canvas, connectRenderer.call(this, renderer));\n  track_group.appendChild(track_canvas);\n  track_group.setAttribute('clip-path', 'url(#' + this.clipping_id + ')');\n\n  this.disable = function () {\n    parent_canvas.style.display = 'none';\n    track_canvas.style.display = 'none';\n  };\n\n  this.enable = function () {\n    parent_canvas.style.display = 'block';\n    track_canvas.style.display = 'block';\n  };\n\n  this.demote = function () {\n    track_canvas.hide();\n    return;\n  };\n\n  this.promote = function () {\n    if (this.visible()) {\n      track_canvas.show();\n    } else {\n      track_canvas.hide();\n    }\n  };\n\n  this.setDimensions = function (width, height) {\n    parent_canvas.setAttribute('width', width);\n    parent_canvas.setAttribute('height', height);\n  };\n};\n\nvar connectRenderer = function connectRenderer(renderer) {\n  /**\n   * Create a layer based controller for a group. Clicking on the nominated layer will animate out the expansion of the\n   * group.\n   * @param {Object} lay Layer to turn into a group controller\n   * @param {Object} grp Group to be controlled by this layer.\n   */\n  var controller_map = {};\n  var expanded_map = {};\n  var old_remove_track = renderer.removeTrack;\n\n  renderer.removeTrack = function (layer) {\n    old_remove_track.call(this, layer);\n    delete controller_map[layer.name];\n    delete expanded_map[layer.name];\n  };\n\n  this.isController = function (layer) {\n    if (controller_map[layer.name]) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  this.getController = function (group) {\n    for (var lay in controller_map) {\n      if (controller_map.hasOwnProperty(lay) && controller_map[lay] == group) {\n        return _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(lay);\n      }\n    }\n\n    return null;\n  };\n\n  this.isControllerExpanded = function (layer) {\n    return expanded_map[layer.name];\n  };\n\n  renderer.createGroupController = function (lay, grp) {\n    var layer = _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(lay);\n    var group = _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getGroup(grp);\n\n    if (!layer || !group) {\n      return;\n    }\n\n    if (controller_map[layer.name]) {\n      return;\n    }\n\n    controller_map[layer.name] = group;\n    expanded_map[layer.name] = false;\n    var self = this;\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, 'removed', function (ev, rend) {\n      self.setGroupVisibility(group);\n    });\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, 'visibilityChange', function (rend, visible) {\n      if (group.size() > 0) {\n        if (!expanded_map.hasOwnProperty(layer.name)) {\n          expanded_map[layer.name] = false;\n        }\n\n        self.setGroupVisibility(group, expanded_map[layer.name] && visible, true);\n        renderer.refresh();\n      }\n    });\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(group, 'visibilityChange', function (rend, visible) {\n      if (visible) {\n        self.showLayer(layer, true);\n        expanded_map[layer.name] = true;\n      }\n    });\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(layer, '_expandevent');\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, '_expandevent', function (ev) {\n      expanded_map[layer.name] = !expanded_map[layer.name];\n      self.withoutRefresh(function () {\n        self.setGroupVisibility(group, expanded_map[layer.name]);\n      });\n      self.refresh(true);\n    });\n  };\n\n  return DragAndDrop(function (track, before, after) {\n    var t_order = renderer.trackOrder;\n\n    t_order.trackIndex = function (tr) {\n      if (!tr) {\n        return this.length;\n      }\n\n      return this.indexOf(tr.name);\n    };\n\n    if (after && !before) {\n      before = _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(t_order[t_order.trackIndex(after) + 1]);\n    }\n\n    t_order.splice(t_order.trackIndex(track), 1);\n    var extra_to_push = [];\n\n    if (controller_map[track.name]) {\n      let layer_func = function layer_func(lay) {\n        if (_MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getGroup(lay) === lay) {\n          _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getGroup(lay).eachLayer(layer_func);\n        }\n\n        if (t_order.trackIndex(lay) >= 0) {\n          extra_to_push = [t_order.splice(t_order.trackIndex(lay), 1)[0]].concat(extra_to_push);\n        }\n      };\n\n      _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getGroup(controller_map[track.name]).eachLayer(layer_func);\n    }\n\n    if (before) {\n      t_order.splice(t_order.trackIndex(before), 1, track.name, before ? before.name : undefined);\n\n      for (var i = 0; i < extra_to_push.length; i++) {\n        if (extra_to_push[i]) {\n          t_order.splice(t_order.trackIndex(before), 0, extra_to_push[i]);\n        }\n      }\n    } else {\n      renderer.hideLayer(track);\n      _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(track).disabled = true;\n      extra_to_push.forEach(function (lay) {\n        renderer.hideLayer(lay);\n        _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(lay).disabled = true;\n      });\n      t_order.push(track.name);\n      t_order = t_order.concat(extra_to_push);\n    }\n\n    renderer.trackOrder = t_order;\n  });\n};\n\nvar DragAndDrop = function DragAndDrop(spliceFunction) {\n  var targets = [];\n  var in_drag = false,\n      drag_el;\n  var splice_before, splice_after, trackToSplice;\n  var last_target;\n  var timeouts = {};\n  var nav_reset_set = null;\n  let spliceBefore;\n  let spliceAfter;\n\n  var drag_func = function drag_func(handle, element, track, canvas) {\n    var nav = this;\n    var old_reset = nav.reset;\n\n    if (nav_reset_set === null) {\n      nav.reset = function () {\n        targets = [];\n        old_reset.call(this);\n      };\n\n      nav_reset_set = true;\n    }\n\n    var resetDrag = function resetDrag() {\n      window.clearTimeout(timeouts.anim);\n      window.clearTimeout(timeouts.hover);\n\n      for (var i = 0; i < targets.length; i++) {\n        if (targets[i] != drag_el) {\n          targets[i].removeAttribute('dragging');\n          targets[i].removeAttribute('transform');\n          targets[i].setAttribute('pointer-events', 'all');\n        }\n      }\n    };\n\n    targets.push(element);\n    element.track = track;\n\n    var single_touch_event = function single_touch_event(fn) {\n      return function (e) {\n        if (e.touches && e.touches.length == 1) {\n          fn.call(this, e);\n        }\n      };\n    };\n\n    var beginDragging = function beginDragging(ev, tr, lbl_grp) {\n      if (drag_disabled()) {\n        return;\n      }\n\n      var target = canvas.nearestViewportElement;\n\n      if (in_drag) {\n        return;\n      }\n\n      lbl_grp.setAttribute('dragging', 'true');\n      spliceBefore = null;\n      spliceAfter = null;\n      var p_orig = lbl_grp.nearestViewportElement.createSVGPoint();\n      p_orig.x = ev.clientX || window.pageXOffset + ev.touches[0].clientX;\n      p_orig.y = ev.clientY || window.pageYOffset + ev.touches[0].clientY;\n      var rootCTM = lbl_grp.nearestViewportElement.getScreenCTM();\n      var matrix = rootCTM.inverse();\n      p_orig = p_orig.matrixTransform(matrix);\n      var oX = p_orig.x;\n      var oY = p_orig.y;\n\n      var dragfn = function dragfn(e) {\n        var p = lbl_grp.nearestViewportElement.createSVGPoint();\n        p.x = e.clientX || window.pageXOffset + e.touches[0].clientX;\n        p.y = e.clientY || window.pageYOffset + e.touches[0].clientY;\n        p = p.matrixTransform(matrix);\n        var dX = p.x - oX;\n        var dY = p.y - oY;\n        var curr_transform = lbl_grp.getAttribute('transform') || '';\n        curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n        curr_transform += ' translate(' + dX + ',' + dY + ') ';\n        curr_transform = curr_transform.replace(/\\s*$/, '');\n        lbl_grp.setAttribute('transform', curr_transform);\n        targets.forEach(function (targ) {\n          var bb = targ.getBBox();\n\n          if (bb.y < p.y && bb.y > p.y - bb.height && bb.x < p.x && bb.x > p.x - bb.width) {\n            el_move.call(targ, e, targ.track);\n          }\n        });\n        e.stopPropagation();\n        e.preventDefault();\n        return false;\n      };\n\n      if (touch_enabled) {\n        dragfn = single_touch_event(dragfn);\n      }\n\n      var enddrag = function enddrag(e) {\n        if (e.relatedTarget && (e.relatedTarget == lbl_grp || e.relatedTarget.nearestViewportElement == lbl_grp.nearestViewportElement || e.relatedTarget.nearestViewportElement == target)) {\n          if (in_drag && targets.indexOf(e.relatedTarget) >= 0) {\n            resetDrag();\n          }\n\n          return;\n        }\n\n        if (in_drag && (e.type == 'mouseup' || e.type == 'touchend')) {\n          if (spliceBefore || spliceAfter) {\n            spliceFunction(trackToSplice, spliceBefore, spliceAfter);\n          }\n        }\n\n        target.removeEventListener('touchmove', dragfn, false);\n        target.removeEventListener('mousemove', dragfn, false);\n        target.removeEventListener('touchend', enddrag, false);\n        target.removeEventListener('mouseup', enddrag, false);\n        target.removeEventListener('mouseout', enddrag, false);\n\n        if (in_drag) {\n          lbl_grp.setAttributeNS(null, 'pointer-events', 'all');\n          lbl_grp.removeAttribute('transform');\n          resetDrag();\n          in_drag = false;\n          last_target = null;\n        }\n      };\n\n      lbl_grp.setAttributeNS(null, 'pointer-events', 'none');\n      lbl_grp.addEventListener('touchmove', dragfn, false);\n      lbl_grp.addEventListener('touchend', enddrag, false);\n      target.addEventListener('mousemove', dragfn, false);\n      target.addEventListener('mouseup', enddrag, false);\n      target.addEventListener('mouseout', enddrag, false);\n      in_drag = track;\n      drag_el = lbl_grp;\n    };\n\n    var handle_start = function handle_start(e) {\n      beginDragging(e, track, element);\n    };\n\n    var el_move = function el_move(e, trk) {\n      var trck = trk ? trk : track;\n      var elem = this ? this : element;\n\n      if (in_drag && in_drag != trck && trck != last_target) {\n        last_target = trck;\n\n        if (timeouts.hover) {\n          window.clearTimeout(timeouts.hover);\n        }\n\n        timeouts.hover = window.setTimeout(function () {\n          if ((in_drag.group || trck.group) && (in_drag.group ? trck.group : !trck.group)) {\n            if (in_drag.group.name != trck.group.name) {\n              return;\n            }\n          } else {\n            if (in_drag.group || trck.group) {\n              return;\n            }\n          }\n\n          if (timeouts.anim) {\n            window.clearInterval(timeouts.anim);\n            timeouts.anim = null;\n          }\n\n          resetDrag();\n          var current_sibling = elem;\n          var elements_to_shift = [];\n\n          while (current_sibling !== null) {\n            if (current_sibling != drag_el && targets.indexOf(current_sibling) >= 0) {\n              elements_to_shift.push(current_sibling);\n            }\n\n            current_sibling = current_sibling.nextSibling;\n\n            if (current_sibling == drag_el) {\n              break;\n            }\n          }\n\n          current_sibling = elem.previousSibling;\n          var elements_to_shift_up = [];\n\n          while (current_sibling !== null) {\n            if (current_sibling != drag_el && targets.indexOf(current_sibling) >= 0) {\n              elements_to_shift_up.push(current_sibling);\n            }\n\n            current_sibling = current_sibling.previousSibling;\n\n            if (current_sibling == drag_el) {\n              break;\n            }\n          }\n\n          var anim_steps = 1;\n          var height = drag_el.getBBox().height / 4;\n          timeouts.anim = window.setInterval(function () {\n            var curr_transform,\n                i = 0;\n\n            if (anim_steps < 5) {\n              for (i = 0; i < elements_to_shift.length; i++) {\n                curr_transform = elements_to_shift[i].getAttribute('transform') || '';\n                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                curr_transform += ' translate(0,' + anim_steps * height + ')';\n                elements_to_shift[i].setAttribute('transform', curr_transform);\n              }\n\n              for (i = 0; elements_to_shift.length > 0 && i < elements_to_shift_up.length; i++) {\n                curr_transform = elements_to_shift_up[i].getAttribute('transform') || '';\n                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                curr_transform += ' translate(0,' + anim_steps * -1 * height + ')';\n                elements_to_shift_up[i].setAttribute('transform', curr_transform);\n              }\n\n              anim_steps += 1;\n            } else {\n              spliceBefore = trck;\n              trackToSplice = in_drag;\n              window.clearInterval(timeouts.anim);\n              timeouts.anim = null;\n            }\n          }, 30);\n        }, 300);\n      }\n    };\n\n    handle.addEventListener('mousedown', handle_start, false);\n    handle.addEventListener('touchstart', single_touch_event(handle_start), false);\n  };\n\n  var drag_disabled = function drag_disabled() {\n    return drag_func.disabled;\n  };\n\n  drag_func.spliceFunction = spliceFunction;\n  return drag_func;\n};\n\nvar setElementTransform = function setElementTransform(el, transform) {\n  var ua = window.navigator.userAgent;\n\n  if (ua.indexOf('Edge/') >= 0) {\n    transform = transform.replace(/px/g, '');\n    el.setAttribute('transform', transform);\n  } else {\n    el.style.transform = transform;\n  }\n};\n\nvar buildNavPane = function buildNavPane(back_canvas) {\n  var self = this;\n  self.zoom = 1;\n  self.nav_width_base = 200;\n  var nav_width = self.nav_width_base;\n  self.nav_width = self.nav_width_base;\n  var panel_back = back_canvas.group();\n  var button_group = back_canvas.group();\n  var rect = back_canvas.rect(-10, 0, nav_width.toString(), '100%');\n  var base_rounded_corner = [12 * touch_scale, 10 * touch_scale];\n  rect.setAttribute('rx', base_rounded_corner[0].toString());\n  rect.setAttribute('ry', base_rounded_corner[1].toString());\n\n  if (!touch_enabled) {\n    rect.setAttribute('opacity', '0.8');\n  }\n\n  rect.style.stroke = '#000000';\n  rect.style.strokeWidth = '2px';\n  rect.style.fill = '#000000';\n  rect.id = 'nav_back';\n  panel_back.push(rect);\n  self.clipping_id = 'nav_clipping' + new Date().getTime();\n  var clipping = document.createElementNS(svgns, 'clipPath');\n  clipping.id = self.clipping_id;\n  var rect2 = rect.cloneNode();\n  rect2.removeAttribute('id');\n  rect2.removeAttribute('opacity');\n  rect2.setAttribute('x', '0');\n  rect2.setAttribute('width', \"\" + (parseInt(rect2.getAttribute('width')) - 10));\n  rect2.removeAttribute('style');\n  rect2.setAttribute('height', '10000');\n  back_canvas.insertBefore(clipping, back_canvas.firstChild);\n  clipping.appendChild(rect2);\n  var close_group = back_canvas.crossed_circle(nav_width - (10 + touch_scale * 11), 12 * touch_scale, 10 * touch_scale);\n  close_group.style.cursor = 'pointer';\n\n  if (typeof matchMedia !== 'undefined') {\n    (this.win() || window).matchMedia('print').addListener(function (match) {\n      if (match.matches) {\n        close_group.setAttribute('display', 'none');\n        tracks_button.setAttribute('display', 'none');\n      } else {\n        close_group.setAttribute('display', 'block');\n        tracks_button.setAttribute('display', 'none');\n      }\n    });\n  }\n\n  button_group.push(close_group);\n  var tracks_button = _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].IE ? back_canvas.svgbutton(10, 5, 65, 25, 'Edit') : back_canvas.button(10, 5, 65, 25, 'Edit');\n  tracks_button.id = 'controls';\n  tracks_button.parentNode.setAttribute('clip-path', 'url(#' + self.clipping_id + ')');\n  panel_back.push(_MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].IE ? tracks_button : tracks_button.parentNode);\n  tracks_button.addEventListener('click', function () {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'toggleEdit');\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'click');\n  }, false);\n  panel_back.setAttribute('style', 'transition: all 0.25s;');\n  var old_tracks_style = tracks_button.getAttribute('style');\n  var transform_origin = \"\" + (nav_width - (10 + touch_scale * 11)) + \"px \" + 12 * touch_scale + \"px\";\n\n  var translate = function translate(amount, rotate) {\n    var trans = \" translate3d(\" + amount + \"px,0px,0px)\";\n\n    if (rotate) {\n      trans = trans + \" rotate(\" + rotate + \")\";\n    }\n\n    return \"-webkit-transform:\" + trans + \"; -moz-transform:\" + trans + \"; -ms-transform:\" + trans.replace('3d', '').replace(',0px)', ')') + \"; transform: \" + trans + \";\";\n  };\n\n  tracks_button.setAttribute('style', old_tracks_style + \" transition: all 0.25s;\");\n  close_group.style.transition = 'all 0.25s';\n  close_group.style.transformOrigin = transform_origin;\n  var visible = true;\n\n  var toggler = function toggler(vis, interactive) {\n    visible = vis === false || vis === true ? vis : !visible;\n    var close_transform;\n    var needs_transition = interactive ? \"all ease-in-out 0.4s\" : \"\";\n    let parent_transform = back_canvas.parentNode.style.transform;\n    let scaleval;\n    let yscale = touch_scale;\n\n    if (scaleval = parent_transform.match(/scale\\(([\\d\\.]+)\\)/)) {\n      yscale = 1;\n    }\n\n    var transform_origin = \"\" + (self.nav_width_base - (10 + touch_scale * 11)) + \"px \" + 12 * yscale + \"px\";\n\n    if (visible) {\n      self.promote();\n      setElementTransform(panel_back, 'translate(0,0)');\n      panel_back.style.transition = needs_transition;\n\n      close_group._button.removeAttribute('filter');\n\n      if (\"ontouchend\" in window || window.getComputedStyle(close_group).getPropertyValue(\"-ms-transform\")) {\n        setElementTransform(close_group, '');\n      }\n\n      setElementTransform(close_group, 'translate(0,0)');\n      close_group.style.transition = needs_transition;\n      close_group.style.transformOrigin = close_group.getBoundingClientRect().left + 'px ' + close_group.getBoundingClientRect().top + ' px';\n      self.refresh();\n    } else {\n      self.demote(); // Chrome bug Jan 2015 with the drop shadow\n      //close_group._button.setAttribute('filter','url(#drop_shadow)');\n\n      close_group.style.transition = needs_transition;\n      close_group.style.transition = needs_transition; // close_group.style.transformOrigin = transform_origin;\n\n      close_group.style.transformOrigin = close_group.getBoundingClientRect().left + 'px ' + close_group.getBoundingClientRect().top + ' px';\n      setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(405deg)');\n\n      if (\"ontouchend\" in window) {\n        // No longer special casing IE\n        setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(45,' + (self.nav_width_base - (10 + touch_scale * 11)) + 'px,' + 12 * touch_scale + 'px)');\n        setElementTransform(panel_back, 'translate(' + -1 * self.nav_width * self.zoom + 'px,0)');\n        panel_back.style.transition = needs_transition;\n      } else {\n        setElementTransform(panel_back, 'translate(' + -1 * self.nav_width * self.zoom + 'px,0)');\n        panel_back.style.transition = needs_transition;\n      }\n    }\n\n    return true;\n  };\n\n  self.move_closer = function () {\n    if (visible) {\n      return;\n    }\n\n    setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(405deg)');\n\n    if (\"ontouchend\" in window) {\n      // No longer special casing IE\n      setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(45,' + (self.nav_width_base - (10 + touch_scale * 11)) + 'px,' + 12 * touch_scale + 'px)');\n    }\n  };\n\n  self.hide = function (interactive) {\n    toggler.call(this, false, interactive);\n  };\n\n  self.show = function (interactive) {\n    toggler.call(this, true, interactive);\n  };\n\n  self.visible = function () {\n    return visible;\n  };\n\n  self.setZoom = function (zoom) {\n    self.nav_width = self.nav_width_base / zoom;\n    close_group.setAttribute('transform', 'scale(' + zoom + ',' + zoom + ') ');\n    let parent_transform = back_canvas.parentNode.style.transform;\n    let scaleval;\n    let yscale = touch_scale;\n\n    if (scaleval = parent_transform.match(/scale\\(([\\d\\.]+)\\)/)) {\n      yscale = 1;\n    }\n\n    var transform_origin = \"\" + (self.nav_width_base - (10 + touch_scale * 11)).toFixed(2) + \"px \" + 12 * yscale + \"px\";\n    close_group.style.transformOrigin = transform_origin;\n    close_group.move(self.nav_width_base - (10 + touch_scale * 11), 12 * touch_scale);\n    rect.setAttribute('transform', 'scale(' + zoom + ',1) ');\n    rect.setAttribute('ry', base_rounded_corner[1].toString());\n    rect.setAttribute('rx', (base_rounded_corner[0] / zoom).toString());\n    rect.setAttribute('x', parseInt(-10 / zoom).toString());\n    rect.setAttribute('width', self.nav_width.toString());\n    self.zoom = zoom;\n    toggler.call(this, visible);\n    self.refresh();\n  };\n\n  close_group.addEventListener('click', function () {\n    if (visible) {\n      self.hide(true);\n    } else {\n      self.show(true);\n    }\n  }, false);\n};\n\nvar buildTrackPane = function buildTrackPane(track_canvas, draganddrop) {\n  var self = this;\n  var close_buttons, controller_buttons, edit_enabled;\n  var nav_width_track_canvas_ctm = 0;\n  Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(track_canvas);\n  track_canvas.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n  var track_rects = [];\n\n  self.reset = function () {\n    while (track_canvas.firstChild) {\n      track_canvas.removeChild(track_canvas.firstChild);\n    }\n\n    track_rects = [];\n    ctm_refresh = []; //            self.refresh();\n  };\n\n  var ctm_refresh = [];\n\n  self.isEditing = function () {\n    return edit_enabled;\n  };\n\n  self.refresh = function () {\n    (close_buttons || []).forEach(function (button) {\n      button.setAttribute('visibility', edit_enabled ? 'visible' : 'hidden');\n    });\n    (controller_buttons || []).forEach(function (button) {\n      button.setAttribute('visibility', edit_enabled ? 'hidden' : 'visible');\n    });\n\n    if (edit_enabled) {\n      toggleMouseEvents.call(this, true);\n    } else {\n      toggleMouseEvents.call(this, false);\n    }\n\n    if (track_canvas.getAttribute('display') == 'none' || track_canvas.style.display == 'none') {\n      return;\n    }\n\n    if (ctm_refresh.length < 1) {\n      return;\n    }\n\n    var nav_back = track_canvas.ownerSVGElement.getElementById('nav_back');\n    var ctm = nav_back.getScreenCTM().inverse().multiply(track_canvas.getScreenCTM()).inverse();\n    var back_width = nav_back.getBBox().width + nav_back.getBBox().x;\n    var point = track_canvas.createSVGPoint();\n    point.x = back_width;\n    point.y = 0;\n    nav_width_track_canvas_ctm = point.matrixTransform(ctm).x;\n    ctm_refresh.forEach(function (el) {\n      var width = 0;\n\n      try {\n        width = el.getBBox().width;\n      } catch (err) {// This is a bug with Firefox on some elements getting\n        // the bounding box. We silently fail here, as I can't\n        // figure out why the call to getBBox fails.\n      }\n\n      if (width > 0) {\n        var a_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(el.getAttribute('transform') || '');\n\n        if (typeof a_y != 'undefined') {\n          a_y = a_y[2];\n        } else {\n          return;\n        }\n\n        var new_x = nav_width_track_canvas_ctm - 1.5 * parseInt(el.getAttribute('width'), 10);\n        el.setAttribute('transform', 'translate(' + new_x + ',' + a_y + ')');\n      }\n    });\n  };\n\n  var toggleMouseEvents = function toggleMouseEvents(on) {\n    if (track_rects) {\n      (track_rects || []).forEach(function (el) {\n        el.setAttribute('opacity', on ? '1' : touch_enabled ? \"0.5\" : \"0.1\");\n        el.setAttribute('pointer-events', on ? 'all' : 'none');\n        on ? el.parentNode.setAttribute('dragenabled', 'true') : el.parentNode.removeAttribute('dragenabled');\n      });\n    }\n  };\n\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(self, 'toggleEdit', function () {\n    edit_enabled = typeof edit_enabled == 'undefined' ? true : !edit_enabled;\n    draganddrop.disabled = !edit_enabled;\n    toggleMouseEvents.call(self, edit_enabled);\n    self.hide();\n    self.show();\n    (close_buttons || []).forEach(function (button) {\n      button.setAttribute('visibility', edit_enabled ? 'visible' : 'hidden');\n    });\n    (controller_buttons || []).forEach(function (button) {\n      button.setAttribute('visibility', edit_enabled ? 'hidden' : 'visible');\n    });\n  });\n\n  this.setViewBox = function (viewBox) {\n    track_canvas.setAttribute('viewBox', viewBox);\n  };\n\n  track_canvas.style.height = '100%';\n  track_canvas.style.width = '100%';\n  track_canvas.setAttribute('height', '100%');\n  track_canvas.setAttribute('width', '100%');\n\n  this.renderTrack = function (track, y, height, options) {\n    var label_group = track_canvas.group();\n    var a_rect = track_canvas.rect(0, y, '100%', height);\n    a_rect.setAttribute('stroke', '#000000');\n    a_rect.setAttribute('stroke-width', '2');\n    a_rect.setAttribute('fill', 'url(#simple_gradient)');\n    a_rect.setAttribute('opacity', touch_enabled ? '0.5' : '0.1');\n    a_rect.setAttribute('pointer-events', 'none');\n    track_rects = track_rects || [];\n    track_rects.push(a_rect);\n    label_group.push(a_rect); // Use these for debugging positioning\n    // var r = track_canvas.rect(0,y-height,height,height);\n    // r.setAttribute('fill','#ff0000');\n    // label_group.push(r);\n    // \n    // r = track_canvas.rect(0,y+height,height,height);\n    // r.setAttribute('fill','#ff0000');\n    // label_group.push(r);\n\n    var text_scale = options && options['font-scale'] ? options['font-scale'] : 1;\n    var text_left = 4 / 3 * touch_scale * height * text_scale;\n    var a_text = track_canvas.text(text_left, y + 0.5 * height, track.fullname || track.name);\n    a_text.setAttribute('height', height);\n    a_text.setAttribute('width', height);\n    a_text.setAttribute('font-size', 0.6 * height * text_scale);\n    a_text.setAttribute('fill', '#ffffff');\n    a_text.setAttribute('stroke', '#ffffff');\n    a_text.setAttribute('stroke-width', '0');\n    a_text.firstChild.setAttribute('dy', '0.5ex'); // r = track_canvas.rect(3*height*text_scale,y+0.5*height,2*height,2*height);\n    // r.setAttribute('fill','#00ff00');\n    // label_group.push(r);\n\n    label_group.push(a_text);\n    a_text.setAttribute('pointer-events', 'none');\n    var circ;\n\n    if (track.href) {\n      a_anchor = track_canvas.a(track.href);\n      var icon_name = null;\n      var icon_metrics = [0.5 * height * text_scale, 0, height * text_scale * touch_scale];\n      icon_metrics[1] = -0.5 * (icon_metrics[2] - height);\n      circ = track_canvas.circle(icon_metrics[0] + 0.5 * icon_metrics[2], 0.5 * height, 0.5 * icon_metrics[2]);\n      circ.setAttribute('fill', '#ffffff');\n      circ.setAttribute('opacity', '0.1');\n      a_anchor.appendChild(circ);\n      var url_type = track.href;\n\n      if (typeof url_type === 'string' && url_type.match(/^javascript\\:/)) {\n        icon_name = '#plus_icon';\n      } else if (typeof url_type === 'function') {\n        icon_name = '#plus_icon';\n        a_anchor.setAttribute('href', '#');\n        a_anchor.removeAttribute('target');\n        a_anchor.addEventListener('click', function (e) {\n          url_type.call();\n\n          if (e.preventDefault) {\n            e.preventDefault();\n          } else {\n            e.returnResult = false;\n          }\n\n          if (e.stopPropagation) {\n            e.stopPropagation();\n          } else {\n            e.cancelBubble = true;\n          }\n\n          return false;\n        }, false);\n      } else {\n        icon_name = '#new_link_icon';\n      }\n\n      if (track.icon) {\n        icon_name = track.icon;\n      }\n\n      var a_use = track_canvas.use(icon_name, icon_metrics[0], icon_metrics[1], icon_metrics[2], icon_metrics[2]);\n      a_use.style.cursor = 'pointer';\n      a_anchor.appendChild(a_use);\n      a_anchor.setAttribute('transform', 'translate(' + (nav_width_track_canvas_ctm - 1.5 * icon_metrics[2]) + ',' + y + ')');\n      a_anchor.setAttribute('width', icon_metrics[2].toString());\n      ctm_refresh.push(a_anchor);\n    }\n\n    label_group.addEventListener('touchstart', function () {\n      label_group.onmouseover = undefined;\n      label_group.onmouseout = undefined;\n    }, false);\n    label_group.addEventListener('touchend', function () {\n      label_group.onmouseover = undefined;\n      label_group.onmouseout = undefined;\n    }, false);\n    draganddrop.call(this, a_rect, label_group, track, track_canvas);\n\n    (function () {\n      if (track.group) {\n        return;\n      }\n\n      var t_height = 0.5 * height * touch_scale;\n\n      if (!close_buttons) {\n        close_buttons = [];\n      }\n\n      var closer = track_canvas.crossed_circle(1.5 * t_height, 0, t_height);\n      closer.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n      closer.firstChild.setAttribute('fill', 'url(#red_3d)');\n\n      for (var nodes = closer.childNodes, i = 0, len = nodes.length; i < len; i++) {\n        nodes[i].setAttribute('stroke-width', (t_height / 4).toString());\n      }\n\n      closer.addEventListener('click', function () {\n        draganddrop.spliceFunction(track);\n      }, false);\n      label_group.push(closer);\n      close_buttons.push(closer);\n      closer.setAttribute('visibility', 'hidden');\n    })();\n\n    if (this.isController(track)) {\n      if (!controller_buttons) {\n        controller_buttons = [];\n      }\n\n      var t_height = 0.5 * height * touch_scale;\n      var expander = track_canvas.group();\n      circ = track_canvas.circle(1.5 * t_height, 0, t_height);\n      circ.setAttribute('fill', '#ffffff');\n      circ.setAttribute('opacity', '0.1');\n      expander.push(circ);\n      var t_metrics = [1.1 * t_height, -1.25 * t_height, 2.25 * t_height, -0.5 * t_height, 1.1 * t_height, 0.25 * t_height];\n      t_metrics[1] += 0.5 * (t_height - 0 * height);\n      t_metrics[3] += 0.5 * (t_height - 0 * height);\n      t_metrics[5] += 0.5 * (t_height - 0 * height);\n      var group_toggler = track_canvas.poly('' + t_metrics[0] + ',' + t_metrics[1] + ' ' + t_metrics[2] + ',' + t_metrics[3] + ' ' + t_metrics[4] + ',' + t_metrics[5]);\n\n      if (this.isControllerExpanded(track)) {\n        expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ') rotate(90,' + 1.5 * t_height + ',' + t_metrics[3] + ')');\n      } else {\n        expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n      }\n\n      group_toggler.setAttribute('height', 1.75 * t_height);\n      group_toggler.setAttribute('font-size', 1.5 * t_height);\n      group_toggler.setAttribute('fill', '#ffffff');\n      group_toggler.setAttribute('pointer-events', 'none');\n      expander.push(group_toggler);\n      expander.style.cursor = 'pointer';\n      expander.addEventListener('click', function (e) {\n        e.stopPropagation();\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(track, '_expandevent');\n\n        if (self.isControllerExpanded(track)) {\n          expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ') rotate(90,' + 1.5 * t_height + ',' + t_metrics[3] + ')');\n        } else {\n          expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n        }\n      }, false);\n      label_group.push(expander);\n      controller_buttons.push(expander);\n      expander.setAttribute('visibility', 'hidden');\n    }\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Navigation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/CondensedSequenceRendererNavigation.js\n")},"../gator/js/lib/Dragger.js":
/*!**********************************!*\
  !*** ../gator/js/lib/Dragger.js ***!
  \**********************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _hammer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hammer.js */ \"../gator/js/hammer.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"../gator/js/bean.js\");\n/**\n *  @fileOverview   Basic classes and defitions for a Gene Ontology ID based map\n */\n\n\n/**\n * @class       State class for adding panning functionality to an element. Each element that is to be panned needs a new instance\n *              of the Dragger to store state.\n * @author      hjjoshi\n * @requires    svgweb\n */\n\nconst Dragger = function Dragger() {\n  this.oX = 0;\n  this.oY = 0;\n  this.dX = 0;\n  this.dY = 0;\n  this.dragging = false;\n  this.targetElement = null;\n};\n/**\n * Connect this dragger to a particular element. If an SVG element is given, panning occurs within the bounding box of the SVG, and\n * the image is shifted by using the currentTranslate property. If a regular HTML element is given, the scrollLeft and scrollTop attributes\n * are used to move the viewport around. \n * @param {Element} targetElement Element to enable panning upon.\n */\n\n\nDragger.prototype.applyToElement = function (targetElement, enabled) {\n  var self = this;\n\n  if (typeof enabled !== 'undefined') {\n    self.enabled = enabled;\n  }\n\n  var momentum = [];\n\n  if (targetElement.nodeName == 'svg') {\n    targetElement.getPosition = function () {\n      var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n      var dX = translate.x;\n      var dY = translate.y;\n      return [dX, dY];\n    };\n\n    targetElement.shiftPosition = function (x, y) {\n      var p = {\n        'x': x,\n        'y': y\n      };\n      var viewBoxScale = 1;\n      var vbox = this.getAttribute('viewBox');\n      var min_x, min_y, width, height;\n\n      if (vbox) {\n        var viewBox = this.getAttribute('viewBox').split(' ');\n        viewBoxScale = parseFloat(this.width.baseVal.value) / parseFloat(viewBox[2]);\n        min_x = 0;\n        min_y = parseInt(viewBox[1], 10);\n        width = parseInt(viewBox[2], 10);\n        height = parseInt(viewBox[3], 10);\n      } else {\n        min_x = 0;\n        min_y = 0;\n        width = targetElement.width;\n        height = targetElement.height;\n      }\n\n      if (targetElement.style.GomapScrollLeftMargin) {\n        min_x += targetElement.style.GomapScrollLeftMargin;\n      }\n\n      if (self.dragging) {\n        p.x = viewBoxScale * (p.x - self.oX);\n        p.y = viewBoxScale * (p.y - self.oY);\n        p.x += self.dX;\n        p.y += self.dY;\n        p.y = 0;\n      }\n\n      if (targetElement._snapback) {\n        clearTimeout(targetElement._snapback);\n        targetElement._snapback = null;\n      }\n\n      if (p.x > viewBoxScale * min_x && self.enabled) {\n        /* Element has shifted too far to the right\n           Induce some gravity towards the left side\n           of the screen\n        */\n        let do_snapback = function do_snapback() {\n          var evObj;\n          var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n\n          if (Math.abs(translate.x - viewBoxScale * min_x) > 35) {\n            var new_pos = 0.95 * (translate.x - viewBoxScale * min_x);\n\n            if (new_pos < viewBoxScale * min_x) {\n              new_pos = viewBoxScale * min_x;\n            }\n\n            targetElement.setCurrentTranslateXY(new_pos, 0);\n            window.requestAnimationFrame(do_snapback, targetElement); //                        targetElement._snapback = setTimeout(arguments.callee,10);\n\n            if (document.createEvent) {\n              var evObj = document.createEvent('Events');\n              evObj.initEvent('panstart', false, true);\n              targetElement.dispatchEvent(evObj);\n            }\n          } else {\n            targetElement.setCurrentTranslateXY(viewBoxScale * min_x, 0);\n\n            if (document.createEvent) {\n              var evObj = document.createEvent('Events');\n              evObj.initEvent('pan', false, true);\n              targetElement.dispatchEvent(evObj);\n            }\n\n            if (!self.dragging) {\n              _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(targetElement, 'panend');\n            }\n\n            targetElement._snapback = null;\n          }\n        };\n\n        targetElement._snapback = setTimeout(do_snapback, 300);\n      }\n\n      var min_val = viewBoxScale * (width - 2 * min_x);\n\n      if (min_x === 0) {\n        min_val *= 0.90;\n      }\n\n      if (p.x < 0 && Math.abs(p.x) > min_val && self.enabled) {\n        /* Element has shifted too far to the left\n           Induce some gravity to the right side of the screen\n        */\n        let do_snapback = function do_snapback() {\n          var evObj;\n          var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n\n          if (Math.abs(translate.x - -1 * min_val) > 35) {\n            var new_pos = 0.95 * translate.x;\n\n            if (new_pos > -1 * min_val) {\n              new_pos = -1 * min_val;\n            }\n\n            targetElement.setCurrentTranslateXY(new_pos, 0);\n            window.requestAnimationFrame(do_snapback, targetElement); //                        targetElement._snapback = setTimeout(arguments.callee,10);\n\n            if (document.createEvent) {\n              evObj = document.createEvent('Events');\n              evObj.initEvent('panstart', false, true);\n              targetElement.dispatchEvent(evObj);\n            }\n          } else {\n            targetElement.setCurrentTranslateXY(-1 * min_val, 0);\n\n            if (document.createEvent) {\n              evObj = document.createEvent('Events');\n              evObj.initEvent('pan', false, true);\n              targetElement.dispatchEvent(evObj);\n            }\n\n            if (!self.dragging) {\n              _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(targetElement, 'panend');\n            }\n\n            targetElement._snapback = null;\n          }\n        };\n\n        targetElement._snapback = setTimeout(do_snapback, 300);\n      }\n\n      if (p.y > viewBoxScale * min_y) {\n        p.y = viewBoxScale * min_y;\n      }\n\n      if (Math.abs(p.y) > 0.50 * viewBoxScale * height) {\n        p.y = -0.50 * viewBoxScale * height;\n      }\n\n      if (this.setCurrentTranslateXY) {\n        this.setCurrentTranslateXY(p.x, p.y);\n      } else if (this.currentTranslate.setXY) {\n        this.currentTranslate.setXY(p.x, p.y);\n      } else {\n        this.currentTranslate.x = p.x;\n        this.currentTranslate.y = p.y;\n      }\n\n      if (document.createEvent) {\n        var evObj = document.createEvent('Events');\n        evObj.initEvent('pan', false, true);\n        this.dispatchEvent(evObj);\n      }\n    };\n  } else {\n    targetElement.getPosition = function () {\n      return [this.scrollLeft, this.scrollTop];\n    };\n\n    targetElement.shiftPosition = function (x, y) {\n      this.scrollLeft = self.dX + (self.oX - x);\n      this.scrollTop = self.dY + (self.oY - y);\n\n      if (document.createEvent) {\n        var evObj = document.createEvent('Events');\n        evObj.initEvent('pan', false, true);\n        this.dispatchEvent(evObj);\n      }\n    };\n  }\n\n  var stationary;\n\n  var svgMouseDown = function svgMouseDown(evt) {\n    if (!self.enabled) {\n      return true;\n    }\n\n    var targ = self.targetElement ? self.targetElement : targetElement;\n    var positions = mousePosition(evt);\n    self.dragging = true;\n    self.moved = false;\n    targ.setAttribute('dragging', 'true');\n\n    if (self.targetElement) {\n      self.oX = positions[0];\n      self.oY = positions[1];\n      self.dX = self.targetElement.scrollLeft;\n      self.dY = self.targetElement.scrollTop;\n      evt.preventDefault(true);\n      return;\n    }\n\n    var p = targetElement.createSVGPoint();\n    positions = mousePosition(evt);\n    p.x = positions[0];\n    p.y = positions[1];\n    var rootCTM = this.firstElementChild.getScreenCTM();\n    self.matrix = rootCTM.inverse();\n    p = p.matrixTransform(self.matrix);\n    self.dX = targetElement.getPosition()[0];\n    self.dY = targetElement.getPosition()[1];\n    self.oX = p.x;\n    self.oY = p.y;\n    evt.preventDefault(true);\n\n    if (document.createEvent) {\n      self.clicktimeout = setTimeout(function () {\n        var evObj = document.createEvent('Events');\n        self.clicktimeout = null;\n        evObj.initEvent('panstart', false, true);\n        targ.dispatchEvent(evObj);\n      }, 200);\n    }\n  };\n\n  var mousePosition = function mousePosition(evt) {\n    var posx = 0;\n    var posy = 0;\n\n    if (!evt) {\n      evt = window.event;\n    }\n\n    if (evt.pageX || evt.pageY) {\n      posx = evt.pageX;\n      posy = evt.pageY;\n    } else if (evt.clientX || evt.clientY) {\n      posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n      posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    }\n\n    if (self.targetElement) {\n      posx = evt.screenX;\n      posy = evt.screenY;\n    }\n\n    return [posx, posy];\n  };\n\n  var mouseMove = function mouseMove(evt) {\n    var positions = mousePosition(evt);\n\n    if (self.clicktimeout && Math.abs(positions[0] - self.oX) < 10) {\n      mouseUp();\n    }\n\n    if (!self.dragging) {\n      return;\n    }\n\n    targetElement.shiftPosition(positions[0], positions[1]);\n    evt.preventDefault(true);\n  };\n\n  var mouseDown = function mouseDown(evt) {\n    self.dragging = true;\n    self.moved = false;\n    var positions = mousePosition(evt);\n    self.oX = positions[0];\n    self.oY = positions[1];\n    self.dX = targetElement.getPosition()[0];\n    self.dY = targetElement.getPosition()[1];\n    evt.preventDefault(true);\n    var targ = self.targetElement ? self.targetElement : targetElement;\n    targ.setAttribute('dragging', 'true');\n\n    if (document.createEvent) {\n      var evObj = document.createEvent('Events');\n      evObj.initEvent('panstart', false, true);\n      targ.dispatchEvent(evObj);\n    }\n  };\n\n  var svgMouseMove = function svgMouseMove(evt) {\n    if (!self.enabled) {\n      return true;\n    } // this.style.cursor = 'url(http://maps.gstatic.com/intl/en_us/mapfiles/openhand_8_8.cur), move';\n\n\n    if (!self.dragging) {\n      return;\n    } // if (stationary) {\n    //     clearTimeout(stationary);\n    //     stationary = null;\n    // }\n    // \n    // stationary = window.setTimeout(function() {\n    //     self.dragging = false;\n    // },200);        \n\n\n    doMouseMove.call(this, evt);\n  };\n\n  var doMouseMove = function doMouseMove(evt) {\n    var positions = mousePosition(evt); // this.style.cursor = 'url(http://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur), -moz-grabbing';\n\n    if (self.targetElement) {\n      self.targetElement.shiftPosition(positions[0], positions[1]);\n      self.moved = true;\n      return;\n    }\n\n    var p = targetElement._cachedpoint || targetElement.createSVGPoint();\n    targetElement._cachedpoint = p;\n    positions = mousePosition(evt);\n    p.x = positions[0];\n    p.y = positions[1];\n    var rootCTM = targetElement._cachedrctm || targetElement.firstElementChild.getScreenCTM();\n    targetElement._cachedrctm = rootCTM;\n    p = p.matrixTransform(self.matrix);\n    targetElement.shiftPosition(p.x, p.y);\n    self.moved = true; //        momentum = p.x;        \n  };\n\n  var captureClick = function captureClick(evt) {\n    evt.stopPropagation();\n    this.removeEventListener('click', captureClick, true);\n  };\n\n  var mouseUp = function mouseUp(evt) {\n    if (self.clicktimeout) {\n      clearTimeout(self.clicktimeout);\n      self.clicktimeout = null;\n    }\n\n    if (!self.enabled) {\n      return true;\n    }\n\n    self.oX = 0;\n    self.oY = 0;\n    self.dX = null;\n    self.dY = null;\n    self.dragging = false;\n    evt.preventDefault(true);\n    var targ = self.targetElement ? self.targetElement : targetElement;\n    targ.removeAttribute('dragging');\n\n    if (!targ._snapback) {\n      _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(targ, 'panend', true);\n    }\n\n    if (evt.type == 'mouseup' && self.moved) {\n      targ.addEventListener('click', captureClick, true);\n    }\n\n    self.moved = false;\n  };\n\n  var mouseOut = function mouseOut(e) {\n    if (!self.dragging || !self.enabled) {\n      return true;\n    }\n\n    if (this == self.targetElement) {\n      mouseUp(e);\n    }\n\n    if (e.target != this && !e.currentTarget) {\n      return;\n    }\n\n    var toTarget = e.relatedTarget ? e.relatedTarget : e.toElement;\n\n    while (toTarget !== null) {\n      if (toTarget == this) {\n        return;\n      }\n\n      toTarget = toTarget.parentNode;\n    }\n\n    mouseUp(e);\n  };\n\n  if (!targetElement.addEventListener) {\n    targetElement.addEventListener = function (name, func, bool) {\n      this.attachEvent(name, func);\n    };\n  }\n\n  targetElement.addEventListener('touchstart', function (e) {\n    if (!self.enabled) {\n      return;\n    }\n\n    var targ = self.targetElement ? self.targetElement : targetElement;\n\n    if (self.momentum) {\n      window.clearTimeout(self.momentum);\n      self.momentum = null;\n    }\n\n    if (e.touches.length == 1) {\n      var positions = mousePosition(e.touches[0]);\n      var p;\n\n      if (targ.nodeName == 'svg') {\n        p = targ.createSVGPoint();\n        p.x = positions[0];\n        p.y = positions[1];\n        var rootCTM = this.getScreenCTM();\n        self.matrix = rootCTM.inverse();\n        p = p.matrixTransform(self.matrix);\n      } else {\n        p.x = positions[0];\n        p.y = positions[1];\n      }\n\n      self.oX = p.x;\n      self.oY = p.y;\n      self.dragging = true;\n      self.dX = targ.getPosition()[0];\n      self.dY = targ.getPosition()[1];\n      self._momentum_shrinker = setInterval(function () {\n        momentum.shift();\n      }, 20);\n\n      if (document.createEvent) {\n        var evObj = document.createEvent('Events');\n        evObj.initEvent('panstart', false, true);\n        targ.dispatchEvent(evObj);\n      }\n\n      e.preventDefault();\n    }\n  }, false); // document.addEventListener('touchmove',function(e) {\n  //     console.log('touchmove for the document');\n  //     console.log(self.dragging);\n  //     if ( ! self.dragging ) {\n  //         return;\n  //     }\n  //     console.log(\"Ending the drag for document move\");\n  //     self.oX = 0;\n  //     self.oY = 0;\n  //     self.dX = null;\n  //     self.dY = null;\n  //     self.dragging = false;\n  // \n  //     var targ = self.targetElement ? self.targetElement : targetElement;      \n  // \n  //     if (document.createEvent) {\n  //         var evObj = document.createEvent('Events');\n  //         evObj.initEvent('panend',false,true);\n  //         targ.dispatchEvent(evObj);\n  //     }      \n  // },false);\n\n  targetElement.addEventListener('touchmove', function (e) {\n    if (self.drag_zoom) {\n      return;\n    }\n\n    if (self.momentum) {\n      window.clearTimeout(self.momentum);\n      self.momentum = null;\n    }\n\n    if (e.touches.length != 1) {\n      self.dragging = false;\n    }\n\n    var targ = self.targetElement ? self.targetElement : targetElement;\n    var positions = mousePosition(e.touches[0]);\n\n    if (!positions || !self.matrix) {\n      return;\n    }\n\n    var p;\n\n    if (targ.nodeName == 'svg') {\n      p = targ.createSVGPoint();\n      p.x = positions[0];\n      p.y = positions[1];\n      p = p.matrixTransform(self.matrix);\n    } else {\n      p.x = positions[0];\n      p.y = positions[1];\n    }\n\n    if (self.dragging && 6 * Math.abs(self.oX - p.x) > Math.abs(self.oY - p.y)) {// FIXME - PASSIVE\n      // e.preventDefault();\n    }\n\n    if (!self.dragging) {\n      self.oX = 0;\n      self.oY = 0;\n      self.dX = null;\n      self.dY = null;\n      return;\n    }\n\n    if (momentum.length > 3) {\n      momentum.splice(2);\n    }\n\n    targ.shiftPosition(p.x, p.y);\n    momentum.push(targ.getPosition()[0] - self.dX);\n  }, {\n    passive: true\n  }); // FIXME - PASSIVE\n\n  var momentum_func = function momentum_func(e) {\n    if (!self.enabled) {\n      return true;\n    }\n\n    if (!self.dragging) {\n      clearInterval(self._momentum_shrinker);\n      mouseUp(e);\n      return;\n    }\n\n    var targ = self.targetElement ? self.targetElement : targetElement;\n    var delta = 0;\n\n    if (momentum.length > 0) {\n      var last_val = momentum[0];\n      momentum.forEach(function (m) {\n        if (typeof last_val != 'undefined') {\n          delta += m - last_val;\n        }\n\n        last_val = m;\n      });\n      delta = delta / momentum.length;\n    }\n\n    var start = targ.getPosition()[0];\n    var start_delta = delta;\n    self.dragging = false;\n\n    if (self.momentum) {\n      window.clearTimeout(self.momentum);\n    }\n\n    self.momentum = 1;\n\n    let moment = function moment() {\n      start = targ.getPosition()[0];\n\n      if (self.dragging) {\n        start += self.oX - self.dX;\n      } else {\n        self.oX = 0;\n        self.dX = 0;\n      }\n\n      targ.shiftPosition(start + delta, 0);\n      start = start + delta;\n      delta = delta * 0.5;\n\n      if (delta > 0 && Math.abs(start_delta / delta) < 10) {\n        window.requestAnimationFrame(moment, targ); //                window.setTimeout(arguments.callee,50);\n      } else {\n        self.momentum = null;\n        clearInterval(self._momentum_shrinker);\n        mouseUp(e);\n      }\n    };\n\n    moment();\n  };\n\n  targetElement.addEventListener('touchend', momentum_func, false);\n\n  if (targetElement.nodeName == 'svg') {\n    targetElement.addEventListener('mousedown', svgMouseDown, false);\n    targetElement.addEventListener('mousemove', svgMouseMove, false);\n    targetElement.addEventListener('mouseup', mouseUp, false);\n    targetElement.addEventListener('mouseout', mouseOut, false);\n\n    if (self.targetElement) {\n      self.targetElement.addEventListener('mouseout', mouseOut, false);\n    } // targetElement.addEventListener('click',function(ev) { ev.preventDefault(); ev.stopPropagation(); },false);\n\n  } else {\n    targetElement.addEventListener('mousedown', mouseDown, false);\n    targetElement.addEventListener('mousemove', mouseMove, false);\n    targetElement.addEventListener('mouseup', mouseUp, false);\n    targetElement.addEventListener('mouseout', mouseOut, false);\n  }\n};\n\nDragger.addTouchZoomControls = function (zoomElement, touchElement, controller) {\n  if (!controller) {\n    controller = {\n      \"enabled\": true\n    };\n  }\n\n  Dragger.prototype.addTouchZoomControls.call(controller, zoomElement, touchElement);\n  return controller;\n};\n\nDragger.prototype.addTouchZoomControls = function (zoomElement, touchElement) {\n  var self = this;\n  var last_touch_start = null;\n  var xform = null;\n  var max_y = null;\n\n  var mousePosition = function mousePosition(evt) {\n    var posx = 0;\n    var posy = 0;\n\n    if (!evt) {\n      evt = window.event;\n    }\n\n    if (evt.pageX || evt.pageY) {\n      posx = evt.pageX;\n      posy = evt.pageY;\n    } else if (evt.clientX || evt.clientY) {\n      posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n      posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    }\n\n    if (self.targetElement) {\n      posx = evt.screenX;\n      posy = evt.screenY;\n    }\n\n    return [posx, posy];\n  };\n\n  var drag_zoom_move = function drag_zoom_move(evt) {\n    if (!self.enabled || !self.drag_zoom) {\n      return;\n    }\n\n    if (evt.touches.length == 1) {\n      var positions = mousePosition(evt.touches[0]);\n      var p = {};\n      p.x = positions[0];\n      p.y = positions[1];\n\n      if (touchElement.nodeName == 'svg') {\n        p = touchElement.createSVGPoint();\n        p.x = positions[0];\n        p.y = positions[1];\n        p = p.matrixTransform(xform);\n      }\n\n      zoomElement.zoom = self.zoom_start * Math.pow(10, (p.y - zoomElement.zoomCenter.y) / max_y);\n    }\n  };\n\n  var drag_zoom_end = function drag_zoom_end(evt) {\n    touchElement.removeEventListener('touchmove', drag_zoom_move);\n    touchElement.removeEventListener('touchend', drag_zoom_end);\n    self.drag_zoom = false;\n  };\n\n  touchElement.addEventListener('touchstart', function (e) {\n    if (!self.enabled) {\n      return;\n    }\n\n    if (e.touches.length == 1) {\n      if (new Date().getTime() - last_touch_start <= 300) {\n        self.drag_zoom = true;\n        self.zoom_start = zoomElement.zoom;\n        var positions = mousePosition(e.touches[0]);\n        var positions2 = mousePosition(e.touches[0]);\n        var p;\n\n        if (touchElement.nodeName == 'svg') {\n          p = touchElement.createSVGPoint();\n          p.x = 0.5 * (positions[0] + positions2[0]);\n          p.y = 0.5 * (positions[1] + positions2[1]);\n          var rootCTM = this.getScreenCTM();\n          xform = rootCTM.inverse();\n          p = p.matrixTransform(xform);\n          max_y = parseInt(touchElement.getAttribute('viewBox').split(' ')[3]);\n        } else {\n          p.x = 0.5 * (positions[0] + positions2[0]);\n          p.y = 0.5 * (positions[1] + positions2[1]);\n        }\n\n        zoomElement.zoomCenter = p;\n        touchElement.addEventListener('touchmove', drag_zoom_move, {\n          passive: true\n        });\n        touchElement.addEventListener('touchend', drag_zoom_end, false);\n        e.preventDefault();\n        return;\n      }\n\n      last_touch_start = new Date().getTime();\n      return;\n    }\n\n    if (e.touches.length == 2) {\n      var positions = mousePosition(e.touches[0]);\n      var positions2 = mousePosition(e.touches[1]);\n      var p;\n\n      if (touchElement.nodeName == 'svg') {\n        p = touchElement.createSVGPoint();\n        p.x = 0.5 * (positions[0] + positions2[0]);\n        p.y = 0.5 * (positions[1] + positions2[1]);\n        var rootCTM = this.getScreenCTM();\n        self.matrix = rootCTM.inverse();\n        p = p.matrixTransform(self.matrix);\n      } else {\n        p.x = 0.5 * (positions[0] + positions2[0]);\n        p.y = 0.5 * (positions[1] + positions2[1]);\n      }\n\n      zoomElement.zoomCenter = p;\n      e.preventDefault();\n    }\n  }, false); // touchElement.addEventListener('gesturestart',function(e) {\n\n  Hammer(touchElement).on(\"touch\", function (e) {\n    if (!self.enabled) {\n      return;\n    } // zoomElement.zoomLeft = null;\n\n\n    var zoomStart = zoomElement.zoom;\n\n    var zoomscale = function zoomscale(ev) {\n      if (zoomElement.zoomCenter) {\n        zoomElement.zoom = zoomStart * ev.gesture.scale;\n      }\n\n      ev.preventDefault();\n    };\n\n    Hammer(touchElement).on('pinch', zoomscale, false);\n\n    let hammer_release = function hammer_release(ev) {\n      Hammer(touchElement).off('pinch', zoomscale);\n      Hammer(touchElement).off('release', hammer_release);\n      zoomElement.zoomCenter = null;\n      zoomElement.zoomLeft = null;\n      _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(zoomElement, 'gestureend');\n    };\n\n    Hammer(touchElement).on('release', hammer_release, false);\n    e.preventDefault();\n  }, false);\n};\n/**\n * Given an element that implements a zoom attribute, creates a div that contains controls for controlling the zoom attribute. The\n * zoomElement must have a zoom attribute, and can fire the zoomChange event whenever the zoom value is changed on the object. The\n * scrollwheel is connected to this element so that when the mouse hovers over the controls, it can control the zoom using only\n * the scroll wheel.\n * @param {Object} zoomElement Element to control the zooming for.\n * @param {Number} min Minimum value for the zoom attribute (default 0)\n * @param {Number} max Maximum value for the zoom attribute (default 10)\n * @param {Number} precision Step precision for the zoom control (default 0.5)\n * @param {Number} value Default value for this control\n * @returns DIV element containing the controls\n * @type Element\n * @see GOMap.Diagram#event:zoomChange\n */\n\n\nDragger.addZoomControls = function (zoomElement, min, max, precision, value) {\n  min = min || 0;\n  max = max || 10;\n  precision = precision || 0.5;\n  value = value || zoomElement.zoom || min;\n  var controls_container = document.createElement('div');\n  var zoomIn = document.createElement('input');\n  zoomIn.setAttribute('type', 'button');\n  zoomIn.setAttribute('value', '+');\n  var zoomOut = document.createElement('input');\n  zoomOut.setAttribute('type', 'button');\n  zoomOut.setAttribute('value', '-');\n  var reset = document.createElement('input');\n  reset.setAttribute('type', 'button');\n  reset.setAttribute('value', 'Reset');\n  controls_container.appendChild(reset);\n  reset.addEventListener('click', function () {\n    zoomElement.zoom = zoomElement.defaultZoom || value;\n  }, false);\n  var range = document.createElement('input');\n  range.setAttribute('min', min);\n  range.setAttribute('max', max);\n  range.setAttribute('step', precision);\n  range.setAttribute('value', value);\n  range.setAttribute('type', 'range');\n  range.setAttribute('style', '-webkit-appearance: slider-horizontal; width: 100%; position: absolute; top: 0px; bottom: 0px; margin-top: 0.5em; left: 100%; margin-left: -0.5em;');\n\n  if (range.type == 'range') {\n    range.addEventListener('change', function () {\n      zoomElement.zoom = this.value;\n    }, false);\n    var evFunction = null;\n\n    if (zoomElement.addEventListener) {\n      evFunction = zoomElement.addEventListener;\n    } else if (zoomElement.bind) {\n      evFunction = zoomElement.bind;\n    }\n\n    evFunction.apply(zoomElement, ['zoomChange', function () {\n      range.value = zoomElement.zoom;\n    }, false]);\n    reset.style.margin = '0px';\n    reset.style.display = 'block';\n    reset.style.position = 'absolute';\n    reset.style.top = '0px';\n    controls_container.appendChild(range);\n    controls_container.style.height = '100%';\n  } else {\n    if (!zoomIn.addEventListener) {\n      var addevlis = function addevlis(name, func) {\n        this.attachEvent(name, func);\n      };\n\n      zoomIn.addEventListener = addevlis;\n      reset.addEventListener = addevlis;\n      zoomOut.addEventListener = addevlis;\n    }\n\n    zoomIn.addEventListener('click', function () {\n      zoomElement.zoom += precision;\n    }, false);\n    zoomOut.addEventListener('click', function () {\n      zoomElement.zoom -= precision;\n    }, false);\n    zoomIn.style.margin = '0px';\n    zoomIn.style.display = 'block';\n    zoomIn.style.position = 'absolute';\n    zoomIn.style.top = '0px';\n    zoomIn.style.left = '29px';\n    zoomOut.style.margin = '0px';\n    zoomOut.style.display = 'block';\n    zoomOut.style.position = 'absolute';\n    zoomOut.style.top = '0px';\n    reset.style.margin = '0px';\n    reset.style.display = 'block';\n    reset.style.position = 'absolute';\n    reset.style.top = '23px';\n    reset.style.left = '3px';\n    controls_container.appendChild(zoomOut);\n    controls_container.appendChild(zoomIn);\n    controls_container.appendChild(reset);\n  }\n\n  this.addScrollZoomControls(zoomElement, controls_container, precision);\n  return controls_container;\n};\n\nDragger.addScrollBar = function (target, controlElement, scrollContainer) {\n  return;\n  var scroller = document.createElement('div');\n\n  while (scrollContainer.childNodes.length > 0) {\n    scrollContainer.removeChild(scrollContainer.firstChild);\n  }\n\n  scrollContainer.appendChild(scroller);\n\n  if (!scrollContainer.style.position) {\n    scrollContainer.style.position = 'relative';\n  }\n\n  scrollContainer.style.overflowX = 'scroll';\n  scrollContainer.style.overflowY = 'hidden';\n  scroller.style.position = 'absolute';\n  scroller.style.left = '0px';\n  scroller.style.width = '100%';\n  scroller.style.height = '100%';\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'scroll');\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'mouseenter');\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(scrollContainer, 'mouseenter', function () {\n    var size = 100 * target.getTotalLength() / target.getVisibleLength();\n    scroller.cached_width = scroller.clientWidth / size;\n    disabled = true;\n    scrollContainer.scrollLeft += 1;\n    scrollContainer.scrollLeft -= 1;\n    setTimeout(function () {\n      disabled = false;\n    }, 0);\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'scroll', scroll_func);\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(scrollContainer, 'scroll', scroll_func);\n  });\n  var disabled = false;\n\n  if (window.matchMedia) {\n    window.matchMedia('print').addListener(function (matcher) {\n      disabled = true;\n      setTimeout(function () {\n        disabled = false;\n      }, 0);\n    });\n  }\n\n  var scroll_func = function scroll_func() {\n    if (disabled || !console) {\n      return;\n    }\n\n    if (document.createEvent) {\n      var evObj = document.createEvent('Events');\n      evObj.initEvent('panstart', false, true);\n      controlElement.dispatchEvent(evObj);\n    }\n\n    var size = 100 * target.getTotalLength() / target.getVisibleLength();\n    var width = scroller.cached_width ? parseInt(scroller.cached_width * size) : scroller.clientWidth;\n    target.setLeftPosition(parseInt(scrollContainer.scrollLeft * target.getTotalLength() / width));\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(controlElement, 'panend');\n  };\n\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(scrollContainer, 'scroll', scroll_func);\n  var left_setter;\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(controlElement, 'pan', function () {\n    cancelAnimationFrame(left_setter);\n    var size = 100 * target.getTotalLength() / target.getVisibleLength();\n    scroller.style.width = parseInt(size) + '%';\n    var width = scroller.cached_width ? parseInt(scroller.cached_width * size) : scroller.clientWidth;\n    scroller.cached_width = width / size;\n    var left_shift = parseInt(width * (target.getLeftPosition() / target.getTotalLength()));\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'scroll', scroll_func);\n    left_setter = requestAnimationFrame(function () {\n      // Rendering bottleneck\n      scrollContainer.scrollLeft = left_shift;\n    });\n  });\n};\n/**\n * Connect the scroll wheel to the controls to control zoom\n */\n\n\nDragger.addScrollZoomControls = function (target, controlElement, precision) {\n  precision = precision || 0.5;\n  var self;\n\n  if (this.enabled === null) {\n    self = {\n      'enabled': true\n    };\n  } else {\n    self = this;\n  }\n\n  var hookEvent = function hookEvent(element, eventName, callback) {\n    if (typeof element == 'string') {\n      element = document.getElementById(element);\n    }\n\n    if (element === null) {\n      return;\n    }\n\n    if (element.addEventListener) {\n      if (eventName == 'mousewheel') {\n        element.addEventListener('DOMMouseScroll', callback, false);\n        element.addEventListener('wheel', callback, false);\n      }\n\n      element.addEventListener(eventName, callback, false);\n    } else if (element.attachEvent) {\n      element.attachEvent(\"on\" + eventName, callback);\n    }\n  };\n\n  var mousePosition = function mousePosition(evt) {\n    if (!self.enabled) {\n      return;\n    }\n\n    var posx = 0;\n    var posy = 0;\n\n    if (!evt) {\n      evt = window.event;\n    }\n\n    if (evt.pageX || evt.pageY) {\n      posx = evt.pageX;\n      posy = evt.pageY;\n    } else if (evt.clientX || evt.clientY) {\n      posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n      posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    }\n\n    var p = {};\n\n    if (controlElement.nodeName == 'svg') {\n      p = controlElement.createSVGPoint();\n      p.x = posx;\n      p.y = posy;\n      /* Fix for mouse position in firefox - http://jsfiddle.net/JNKgR/6/ */\n\n      var rootCTM = controlElement.firstElementChild.getScreenCTM();\n      self.matrix = rootCTM.inverse();\n      p = p.matrixTransform(self.matrix);\n    } else {\n      p.x = posx;\n      p.y = posy;\n    }\n\n    return p;\n  };\n\n  var mouseWheel = function mouseWheel(e) {\n    if (!self.enabled) {\n      return;\n    }\n\n    e = e ? e : window.event;\n    var wheelData = e.detail ? e.detail * -1 : e.wheelDelta;\n\n    if (!wheelData) {\n      wheelData = e.deltaY;\n    }\n\n    target.zoomCenter = mousePosition(e);\n\n    if (wheelData > 0) {\n      target.zoom = target.zoom += precision;\n    } else {\n      target.zoom = target.zoom -= precision;\n    }\n\n    if (e.preventDefault) {\n      e.preventDefault();\n    }\n\n    e.returnValue = false;\n    e.stopPropagation();\n    return false;\n  };\n\n  var isFF = false;\n\n  if (navigator.userAgent.indexOf('Gecko') >= 0) {\n    isFF = parseFloat(navigator.userAgent.split('Firefox/')[1]) || undefined;\n  }\n\n  if (isFF && typeof svgweb != 'undefined' && svgweb.getHandlerType() == 'native') {\n    hookEvent(controlElement, 'mousewheel', mouseWheel);\n  } else {\n    hookEvent(controlElement, 'mousewheel', mouseWheel);\n  }\n\n  hookEvent(controlElement, 'mousemove', function (e) {\n    if (!self.enabled) {\n      return;\n    }\n\n    if (target.zoomCenter && Math.abs(target.zoomCenter.x - mousePosition(e).x) > 100) {\n      target.zoomCenter = null;\n      target.zoomLeft = null;\n    }\n  });\n  return self;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Dragger);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/Dragger.js\n")},"../gator/js/lib/GatorComponent.js":
/*!*****************************************!*\
  !*** ../gator/js/lib/GatorComponent.js ***!
  \*****************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Dragger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Dragger */ \"../gator/js/lib/Dragger.js\");\n/* harmony import */ var _CondensedSequenceRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CondensedSequenceRenderer */ \"../gator/js/lib/CondensedSequenceRenderer.js\");\n/* harmony import */ var _Service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Service */ \"../gator/js/lib/Service.js\");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MASCP */ \"../gator/js/lib/MASCP.js\");\n\n\n\n\nconst component_symbol = Symbol('component');\n\nclass DraggableRenderer extends _CondensedSequenceRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  constructor(container, component) {\n    super(container);\n    this[component_symbol] = component;\n  }\n\n  getVisibleLength() {\n    return this.rightVisibleResidue() - this.leftVisibleResidue();\n  }\n\n  getTotalLength() {\n    return this.sequence.length;\n  }\n\n  getLeftPosition() {\n    return this.leftVisibleResidue();\n  }\n\n  setLeftPosition(pos) {\n    return this.setLeftVisibleResidue(pos);\n  }\n\n  get selecting() {\n    return this[component_symbol].selecting;\n  }\n\n}\n\nconst tmpl = document.createElement('template');\ntmpl.innerHTML = \"\\n<style>\\n  :host {\\n    display: block;\\n    position: relative;\\n  }\\n  :host([resizeable]) {\\n    resize: both;\\n    overflow: auto;\\n    padding-right: 5px;\\n    padding-bottom: 5px;\\n  }\\n  #container, .widget_contents {\\n    width: 100%;\\n    height: 100%;\\n  }\\n  #container {\\n  }\\n</style>\\n<div class=\\\"widget_contents\\\" >\\n  <div id=\\\"container\\\">\\n  </div>\\n</div>\\n<slot></slot>\\n\";\nconst interactive_symb = Symbol('interactive');\n\nclass InteractiveState {\n  constructor(component) {\n    this.component = component;\n  }\n\n  get enabled() {\n    return this.component.interactive && !this.component.selecting;\n  }\n\n  set enabled(toggle) {\n    this.component.interactive = toggle;\n  }\n\n}\n\nclass ComponentDragger extends _Dragger__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(component) {\n    super();\n    this.component = component;\n  }\n\n  get enabled() {\n    return this.component.interactive && !this.component.selecting;\n  }\n\n  set enabled(toggle) {\n    this.component.interactive = toggle;\n  }\n\n}\n\nfunction WrapHTML() {\n  return Reflect.construct(HTMLElement, [], Object.getPrototypeOf(this).constructor);\n}\n\nObject.setPrototypeOf(WrapHTML.prototype, HTMLElement.prototype);\nObject.setPrototypeOf(WrapHTML, HTMLElement);\n\nif (window.ShadyCSS) {\n  ShadyCSS.prepareTemplate(tmpl, 'x-protviewer');\n}\n\nlet setup_renderer = function setup_renderer(renderer) {\n  renderer.font_order = 'Helvetica, Arial, sans-serif';\n  renderer.zoom = 0.81;\n  renderer.padding = 10;\n  renderer.trackOrder = [];\n  renderer.reset();\n  renderer.trackGap = 6;\n  renderer.trackHeight = 5;\n  renderer.fixedFontScale = 1;\n};\n\nlet create_renderer = function create_renderer(container) {\n  let renderer = new DraggableRenderer(container, this);\n  setup_renderer(renderer);\n  wire_renderer_sequence_change.call(this, renderer);\n  return renderer;\n};\n\nlet try_import_symbols = (renderer, namespace, url) => {\n  _Service__WEBPACK_IMPORTED_MODULE_2__[\"default\"].request(url, function (err, doc) {\n    if (doc) {\n      renderer.importIcons(namespace, doc.documentElement, url);\n    }\n  }, \"xml\");\n};\n\nlet zoom_to_fit = renderer => {\n  renderer.fitZoom();\n};\n\nlet make_draggable = function make_draggable(renderer, dragger) {\n  dragger.applyToElement(renderer._canvas);\n  dragger.addTouchZoomControls(renderer, renderer._canvas, this[interactive_symb]);\n\n  renderer._canvas.addEventListener('panned', () => {\n    let evObj = new Event('pandone', {\n      bubbles: true,\n      cancelable: true\n    });\n    this.dispatchEvent(evObj);\n  });\n\n  _Dragger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addScrollZoomControls.call(this[interactive_symb], renderer, renderer._canvas, 0.1);\n};\n\nlet wire_renderer_sequence_change = function wire_renderer_sequence_change(renderer) {\n  var dragger = new ComponentDragger(this);\n\n  let seq_change_func = () => {\n    try_import_symbols(renderer, \"ui\", \"https://glycodomain.glycomics.ku.dk/icons.svg\");\n    try_import_symbols(renderer, \"sugar\", \"https://glycodomain.glycomics.ku.dk/sugars.svg\");\n    zoom_to_fit(renderer);\n    make_draggable.call(this, renderer, dragger);\n    populate_tracks.call(this);\n    setup_renderer(renderer);\n    renderer.navigation.show();\n    renderer.refresh();\n  };\n\n  renderer.bind('sequenceChange', seq_change_func);\n};\n\nlet populate_tracks = function populate_tracks() {\n  for (let track of this.querySelectorAll('x-gatortrack')) {\n    this.createTrack(track);\n  }\n};\n\nlet wire_selection_change = function wire_selection_change(renderer) {\n  renderer.bind('selection', selections => {\n    let positions = selections.get(renderer);\n\n    if (!positions[0] && !positions[1]) {\n      this.removeAttribute('selected');\n    } else {\n      this.setAttribute('selected', \"\".concat(positions[0], \":\").concat(positions[1]));\n    }\n\n    for (let track of this.querySelectorAll('x-gatortrack')) {\n      let positions = selections.get(track.layer);\n\n      if (!positions[0] && !positions[1]) {\n        track.removeAttribute('selected');\n      } else {\n        track.setAttribute('selected', \"\".concat(positions[0], \":\").concat(positions[1]));\n      }\n    }\n  });\n};\n\nclass GatorComponent extends WrapHTML {\n  static get observedAttributes() {\n    return [];\n  }\n\n  constructor() {\n    super();\n  }\n\n  attributeChangedCallback(name) {}\n\n  connectedCallback() {\n    if (window.ShadyCSS) {\n      ShadyCSS.styleElement(this);\n    }\n\n    let shadowRoot = this.attachShadow({\n      mode: 'open'\n    });\n    shadowRoot.appendChild(tmpl.content.cloneNode(true));\n    this[interactive_symb] = new InteractiveState(this);\n    this.renderer = create_renderer.call(this, shadowRoot.getElementById('container'));\n    this.renderer.grow_container = true;\n\n    if (window.getComputedStyle(this).height && window.getComputedStyle(this).height !== '0px' && window.getComputedStyle(this).height !== 'auto') {\n      this.renderer.grow_container = false;\n\n      if (window.getComputedStyle(this).getPropertyValue('--fill-viewer')) {\n        this.renderer.fixed_size = true;\n      }\n    }\n\n    wire_selection_change.call(this, this.renderer);\n  }\n\n  fitToZoom() {\n    zoom_to_fit(this.renderer);\n  }\n\n  createTrack(track) {\n    _MASCP__WEBPACK_IMPORTED_MODULE_3__[\"default\"].registerLayer(track.name, {}, [this.renderer]);\n    this.renderer.trackOrder = this.renderer.trackOrder.concat([track.name]);\n    this.renderer.showLayer(track.name);\n    this.renderer.refresh();\n  }\n\n  refreshTracks() {\n    populate_tracks.call(this);\n  }\n\n  get selecting() {\n    return this.hasAttribute('selecting');\n  }\n\n  set selecting(toggle) {\n    if (toggle) {\n      this.setAttribute('selecting', '');\n    } else {\n      this.removeAttribute('selecting');\n    }\n  }\n\n  get interactive() {\n    return this.hasAttribute('interactive');\n  }\n\n  set interactive(toggle) {\n    if (toggle) {\n      this.setAttribute('interactive', '');\n    } else {\n      this.removeAttribute('interactive');\n    }\n  }\n\n}\n\ncustomElements.define('x-protviewer', GatorComponent);\n/* harmony default export */ __webpack_exports__[\"default\"] = (GatorComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZ2F0b3IvanMvbGliL0dhdG9yQ29tcG9uZW50LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2dhdG9yL2pzL2xpYi9HYXRvckNvbXBvbmVudC5qcz8yZDk0Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IERyYWdnZXIgZnJvbSAnLi9EcmFnZ2VyJztcbmltcG9ydCBDb25kZW5zZWRTZXF1ZW5jZVJlbmRlcmVyIGZyb20gJy4vQ29uZGVuc2VkU2VxdWVuY2VSZW5kZXJlcic7XG5pbXBvcnQgU2VydmljZSBmcm9tICcuL1NlcnZpY2UnO1xuaW1wb3J0IE1BU0NQIGZyb20gJy4vTUFTQ1AnO1xuXG5jb25zdCBjb21wb25lbnRfc3ltYm9sID0gU3ltYm9sKCdjb21wb25lbnQnKTtcblxuY2xhc3MgRHJhZ2dhYmxlUmVuZGVyZXIgZXh0ZW5kcyBDb25kZW5zZWRTZXF1ZW5jZVJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3IoY29udGFpbmVyLGNvbXBvbmVudCkge1xuICAgIHN1cGVyKGNvbnRhaW5lcik7XG4gICAgdGhpc1tjb21wb25lbnRfc3ltYm9sXSA9IGNvbXBvbmVudDtcbiAgfVxuICBnZXRWaXNpYmxlTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLnJpZ2h0VmlzaWJsZVJlc2lkdWUoKSAtIHRoaXMubGVmdFZpc2libGVSZXNpZHVlKCk7XG4gIH1cbiAgZ2V0VG90YWxMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VxdWVuY2UubGVuZ3RoO1xuICB9XG4gIGdldExlZnRQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5sZWZ0VmlzaWJsZVJlc2lkdWUoKTtcbiAgfVxuICBzZXRMZWZ0UG9zaXRpb24ocG9zKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0TGVmdFZpc2libGVSZXNpZHVlKHBvcyk7XG4gIH1cblxuICBnZXQgc2VsZWN0aW5nKCkge1xuICAgIHJldHVybiB0aGlzW2NvbXBvbmVudF9zeW1ib2xdLnNlbGVjdGluZztcbiAgfVxufVxuXG5jb25zdCB0bXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxudG1wbC5pbm5lckhUTUwgPSBgXG48c3R5bGU+XG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbiAgOmhvc3QoW3Jlc2l6ZWFibGVdKSB7XG4gICAgcmVzaXplOiBib3RoO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xuICB9XG4gICNjb250YWluZXIsIC53aWRnZXRfY29udGVudHMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuICAjY29udGFpbmVyIHtcbiAgfVxuPC9zdHlsZT5cbjxkaXYgY2xhc3M9XCJ3aWRnZXRfY29udGVudHNcIiA+XG4gIDxkaXYgaWQ9XCJjb250YWluZXJcIj5cbiAgPC9kaXY+XG48L2Rpdj5cbjxzbG90Pjwvc2xvdD5cbmA7XG5cbmNvbnN0IGludGVyYWN0aXZlX3N5bWIgPSBTeW1ib2woJ2ludGVyYWN0aXZlJyk7XG5cbmNsYXNzIEludGVyYWN0aXZlU3RhdGUge1xuICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgfVxuICBnZXQgZW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuaW50ZXJhY3RpdmUgJiYgISB0aGlzLmNvbXBvbmVudC5zZWxlY3Rpbmc7XG4gIH1cbiAgc2V0IGVuYWJsZWQodG9nZ2xlKSB7XG4gICAgdGhpcy5jb21wb25lbnQuaW50ZXJhY3RpdmUgPSB0b2dnbGU7XG4gIH1cbn1cblxuY2xhc3MgQ29tcG9uZW50RHJhZ2dlciBleHRlbmRzIERyYWdnZXIge1xuICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICB9XG4gIGdldCBlbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5pbnRlcmFjdGl2ZSAmJiAhIHRoaXMuY29tcG9uZW50LnNlbGVjdGluZztcbiAgfVxuICBzZXQgZW5hYmxlZCh0b2dnbGUpIHtcbiAgICB0aGlzLmNvbXBvbmVudC5pbnRlcmFjdGl2ZSA9IHRvZ2dsZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBXcmFwSFRNTCgpIHsgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0KEhUTUxFbGVtZW50LCBbXSwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKFdyYXBIVE1MLnByb3RvdHlwZSwgSFRNTEVsZW1lbnQucHJvdG90eXBlKTtcbk9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwSFRNTCwgSFRNTEVsZW1lbnQpO1xuXG5pZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAneC1wcm90dmlld2VyJyk7XG59XG5cbmxldCBzZXR1cF9yZW5kZXJlciA9IGZ1bmN0aW9uKHJlbmRlcmVyKSB7XG4gIHJlbmRlcmVyLmZvbnRfb3JkZXIgPSAnSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZic7XG4gIHJlbmRlcmVyLnpvb20gPSAwLjgxO1xuICByZW5kZXJlci5wYWRkaW5nID0gMTA7XG4gIHJlbmRlcmVyLnRyYWNrT3JkZXIgPSBbXTtcbiAgcmVuZGVyZXIucmVzZXQoKTtcbiAgcmVuZGVyZXIudHJhY2tHYXAgPSA2O1xuICByZW5kZXJlci50cmFja0hlaWdodCA9IDU7XG4gIHJlbmRlcmVyLmZpeGVkRm9udFNjYWxlID0gMTtcbn07XG5cbmxldCBjcmVhdGVfcmVuZGVyZXIgPSBmdW5jdGlvbihjb250YWluZXIpe1xuICBsZXQgcmVuZGVyZXIgPSBuZXcgRHJhZ2dhYmxlUmVuZGVyZXIoY29udGFpbmVyLHRoaXMpO1xuICBzZXR1cF9yZW5kZXJlcihyZW5kZXJlcik7XG4gIHdpcmVfcmVuZGVyZXJfc2VxdWVuY2VfY2hhbmdlLmNhbGwodGhpcyxyZW5kZXJlcik7XG4gIHJldHVybiByZW5kZXJlcjtcbn07XG5cbmxldCB0cnlfaW1wb3J0X3N5bWJvbHMgPSAocmVuZGVyZXIsbmFtZXNwYWNlLHVybCkgPT4ge1xuICBTZXJ2aWNlLnJlcXVlc3QodXJsLGZ1bmN0aW9uKGVycixkb2MpIHtcbiAgICBpZiAoZG9jKSB7XG4gICAgICByZW5kZXJlci5pbXBvcnRJY29ucyhuYW1lc3BhY2UsZG9jLmRvY3VtZW50RWxlbWVudCx1cmwpO1xuICAgIH1cbiAgfSxcInhtbFwiKTtcbn07XG5cbmxldCB6b29tX3RvX2ZpdCA9IChyZW5kZXJlcikgPT4ge1xuICByZW5kZXJlci5maXRab29tKCk7XG59O1xuXG5sZXQgbWFrZV9kcmFnZ2FibGUgPSBmdW5jdGlvbihyZW5kZXJlcixkcmFnZ2VyKSB7XG4gIGRyYWdnZXIuYXBwbHlUb0VsZW1lbnQocmVuZGVyZXIuX2NhbnZhcyk7XG4gIGRyYWdnZXIuYWRkVG91Y2hab29tQ29udHJvbHMocmVuZGVyZXIsIHJlbmRlcmVyLl9jYW52YXMsdGhpc1tpbnRlcmFjdGl2ZV9zeW1iXSk7XG4gIHJlbmRlcmVyLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncGFubmVkJywgKCkgPT4ge1xuICAgIGxldCBldk9iaiA9IG5ldyBFdmVudCgncGFuZG9uZScsIHtidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlfSk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2T2JqKTtcbiAgfSk7XG4gIERyYWdnZXIuYWRkU2Nyb2xsWm9vbUNvbnRyb2xzLmNhbGwodGhpc1tpbnRlcmFjdGl2ZV9zeW1iXSxyZW5kZXJlciwgcmVuZGVyZXIuX2NhbnZhcywwLjEpO1xufTtcblxubGV0IHdpcmVfcmVuZGVyZXJfc2VxdWVuY2VfY2hhbmdlID0gZnVuY3Rpb24ocmVuZGVyZXIpIHtcbiAgdmFyIGRyYWdnZXIgPSBuZXcgQ29tcG9uZW50RHJhZ2dlcih0aGlzKTtcbiAgbGV0IHNlcV9jaGFuZ2VfZnVuYyA9ICgpID0+IHtcbiAgICB0cnlfaW1wb3J0X3N5bWJvbHMocmVuZGVyZXIsIFwidWlcIiwgXCJodHRwczovL2dseWNvZG9tYWluLmdseWNvbWljcy5rdS5kay9pY29ucy5zdmdcIik7XG4gICAgdHJ5X2ltcG9ydF9zeW1ib2xzKHJlbmRlcmVyLCBcInN1Z2FyXCIsIFwiaHR0cHM6Ly9nbHljb2RvbWFpbi5nbHljb21pY3Mua3UuZGsvc3VnYXJzLnN2Z1wiKTtcbiAgICB6b29tX3RvX2ZpdChyZW5kZXJlcik7XG4gICAgbWFrZV9kcmFnZ2FibGUuY2FsbCh0aGlzLHJlbmRlcmVyLGRyYWdnZXIpO1xuICAgIHBvcHVsYXRlX3RyYWNrcy5jYWxsKHRoaXMpO1xuICAgIHNldHVwX3JlbmRlcmVyKHJlbmRlcmVyKTtcbiAgICByZW5kZXJlci5uYXZpZ2F0aW9uLnNob3coKTtcbiAgICByZW5kZXJlci5yZWZyZXNoKCk7XG4gIH07XG4gIHJlbmRlcmVyLmJpbmQoJ3NlcXVlbmNlQ2hhbmdlJywgc2VxX2NoYW5nZV9mdW5jKTtcbn07XG5cbmxldCBwb3B1bGF0ZV90cmFja3MgPSBmdW5jdGlvbigpIHtcbiAgZm9yIChsZXQgdHJhY2sgb2YgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCd4LWdhdG9ydHJhY2snKSkge1xuICAgIHRoaXMuY3JlYXRlVHJhY2sodHJhY2spO1xuICB9XG59XG5cbmxldCB3aXJlX3NlbGVjdGlvbl9jaGFuZ2UgPSBmdW5jdGlvbihyZW5kZXJlcikge1xuICByZW5kZXJlci5iaW5kKCdzZWxlY3Rpb24nLCAoc2VsZWN0aW9ucykgPT4ge1xuICAgIGxldCBwb3NpdGlvbnMgPSBzZWxlY3Rpb25zLmdldChyZW5kZXJlcik7XG4gICAgaWYgKCAhIHBvc2l0aW9uc1swXSAmJiAhIHBvc2l0aW9uc1sxXSApIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsYCR7cG9zaXRpb25zWzBdfToke3Bvc2l0aW9uc1sxXX1gKTtcbiAgICB9XG4gICAgZm9yIChsZXQgdHJhY2sgb2YgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCd4LWdhdG9ydHJhY2snKSkge1xuICAgICAgbGV0IHBvc2l0aW9ucyA9IHNlbGVjdGlvbnMuZ2V0KHRyYWNrLmxheWVyKTtcbiAgICAgIGlmICggISBwb3NpdGlvbnNbMF0gJiYgISBwb3NpdGlvbnNbMV0gKSB7XG4gICAgICAgIHRyYWNrLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhY2suc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsYCR7cG9zaXRpb25zWzBdfToke3Bvc2l0aW9uc1sxXX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5cbmNsYXNzIEdhdG9yQ29tcG9uZW50IGV4dGVuZHMgV3JhcEhUTUwge1xuXG4gIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuXG4gIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lKSB7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAod2luZG93LlNoYWR5Q1NTKSB7XG4gICAgICBTaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICAgIGxldCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJ30pO1xuICAgIHNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodG1wbC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gICAgdGhpc1tpbnRlcmFjdGl2ZV9zeW1iXSA9IG5ldyBJbnRlcmFjdGl2ZVN0YXRlKHRoaXMpO1xuICAgIHRoaXMucmVuZGVyZXIgPSBjcmVhdGVfcmVuZGVyZXIuY2FsbCh0aGlzLHNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpKTtcbiAgICB0aGlzLnJlbmRlcmVyLmdyb3dfY29udGFpbmVyID0gdHJ1ZTtcbiAgICBpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLmhlaWdodCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKS5oZWlnaHQgIT09ICcwcHgnICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLmhlaWdodCAhPT0gJ2F1dG8nICkge1xuICAgICAgdGhpcy5yZW5kZXJlci5ncm93X2NvbnRhaW5lciA9IGZhbHNlO1xuICAgICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLmdldFByb3BlcnR5VmFsdWUoJy0tZmlsbC12aWV3ZXInKSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmZpeGVkX3NpemUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB3aXJlX3NlbGVjdGlvbl9jaGFuZ2UuY2FsbCh0aGlzLHRoaXMucmVuZGVyZXIpO1xuICB9XG5cbiAgZml0VG9ab29tKCkge1xuICAgIHpvb21fdG9fZml0KHRoaXMucmVuZGVyZXIpO1xuICB9XG5cbiAgY3JlYXRlVHJhY2sodHJhY2spIHtcbiAgICBNQVNDUC5yZWdpc3RlckxheWVyKHRyYWNrLm5hbWUse30sW3RoaXMucmVuZGVyZXJdKTtcbiAgICB0aGlzLnJlbmRlcmVyLnRyYWNrT3JkZXIgPSB0aGlzLnJlbmRlcmVyLnRyYWNrT3JkZXIuY29uY2F0KFt0cmFjay5uYW1lXSk7XG4gICAgdGhpcy5yZW5kZXJlci5zaG93TGF5ZXIodHJhY2submFtZSk7XG4gICAgdGhpcy5yZW5kZXJlci5yZWZyZXNoKCk7XG4gIH1cblxuICByZWZyZXNoVHJhY2tzKCkge1xuICAgIHBvcHVsYXRlX3RyYWNrcy5jYWxsKHRoaXMpO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGluZycpO1xuICB9XG5cbiAgc2V0IHNlbGVjdGluZyh0b2dnbGUpIHtcbiAgICBpZiAodG9nZ2xlKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc2VsZWN0aW5nJywnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RpbmcnKTtcbiAgICB9XG4gIH1cblxuXG4gIGdldCBpbnRlcmFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUoJ2ludGVyYWN0aXZlJyk7XG4gIH1cblxuICBzZXQgaW50ZXJhY3RpdmUodG9nZ2xlKSB7XG4gICAgaWYgKHRvZ2dsZSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2ludGVyYWN0aXZlJywnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdpbnRlcmFjdGl2ZScpO1xuICAgIH1cbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3gtcHJvdHZpZXdlcicsR2F0b3JDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBHYXRvckNvbXBvbmVudDsiXSwibWFwcGluZ3MiOiJBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckJBO0FBQ0E7QUFzQkE7QUFFQTtBQTBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFWQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBQ0E7QUFZQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXZFQTtBQUNBO0FBd0VBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../gator/js/lib/GatorComponent.js\n")},"../gator/js/lib/GatorDataReader.js":
/*!******************************************!*\
  !*** ../gator/js/lib/GatorDataReader.js ***!
  \******************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Service */ \"../gator/js/lib/Service.js\");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MASCP */ \"../gator/js/lib/MASCP.js\");\n/* harmony import */ var _ClustalRunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ClustalRunner */ \"../gator/js/lib/ClustalRunner.js\");\n/* harmony import */ var _UniprotReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./UniprotReader */ \"../gator/js/lib/UniprotReader.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../bean */ \"../gator/js/bean.js\");\n/**\n * @fileOverview    Retrieve data from the Gator web service\n */\n\n\n\n\n\nvar localhosts = ['localhost', '10.0.2.2'];\nvar url_base = localhosts.indexOf(window.location.hostname) >= 0 ? 'https://test.glycocode.com/api' : '/api';\nvar cloudfront_host = '';\n\nconst set_reducer = (data_by_mime, set) => {\n  var mimetype = set.metadata.mimetype;\n\n  if (!mimetype) {\n    return;\n  }\n\n  if (!data_by_mime['samples']) {\n    data_by_mime['samples'] = {};\n  }\n\n  set.data.forEach(dat => {\n    dat.dataset = set.dataset;\n    dat.acc = set.acc;\n\n    if (set.metadata.sample) {\n      dat.species = set.metadata.sample.species;\n    }\n  });\n  data_by_mime['samples'][set.dataset] = set.metadata.sample;\n  data_by_mime[mimetype] = (data_by_mime[mimetype] || []).concat(set.data);\n};\n\nvar data_parser = function data_parser(data) {\n  var doc = this.datasetname || (data || {}).datasetname || 'combined';\n\n  if (!data || !data.data) {\n    return this;\n  }\n\n  var actual_data = data.data.filter(function (set) {\n    return set.dataset.indexOf(doc) >= 0;\n  })[0] || {\n    'data': []\n  };\n\n  if (doc.split(',').length > 1) {\n    doc = doc.split(',');\n    var data_by_mime = {};\n    data.data.filter(set => doc.indexOf(set.dataset) >= 0).forEach(set_reducer.bind(null, data_by_mime));\n    actual_data = {\n      'data': data_by_mime\n    };\n  }\n\n  if (doc == 'glycodomain') {\n    actual_data = data.data.filter(function (set) {\n      return set.metadata.mimetype == 'application/json+glycodomain';\n    })[0] || {\n      'data': []\n    };\n    console.log(actual_data);\n  }\n\n  if (doc == 'combined' || doc == 'homology' || doc == 'predictions') {\n    var data_by_mime = {};\n    data.data.forEach(set_reducer.bind(null, data_by_mime));\n    actual_data = {\n      'data': data_by_mime\n    };\n  }\n\n  if (doc == 'homology') {\n    actual_data.alignments = data.data.filter(function (set) {\n      return set.dataset == 'homology_alignment';\n    })[0].data;\n  }\n\n  this._raw_data = actual_data;\n  return this;\n};\n/** Default class constructor\n */\n\n\nconst GatorDataReader = _Service__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buildService(data_parser);\n\nGatorDataReader.prototype.requestData = function () {\n  var reader_conf = {\n    type: \"GET\",\n    dataType: \"json\",\n    data: {}\n  };\n  var acc = (this._requestset || 'combined') + '/' + (this.agi || this.acc).toLowerCase();\n  var gatorURL = (this._endpointURL || GatorDataReader.server).slice(-1) == '/' ? this._endpointURL + acc : this._endpointURL + '/' + acc;\n  reader_conf.auth = _MASCP__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GATOR_AUTH_TOKEN;\n  reader_conf.api_key = _MASCP__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GATOR_CLIENT_ID;\n  reader_conf.session_cache = true;\n  reader_conf.url = gatorURL;\n  return reader_conf;\n};\n\nvar id_token;\nObject.defineProperty(GatorDataReader, 'server', {\n  get: function get() {\n    return url_base.replace('/api', '');\n  },\n  set: function set(url) {\n    url_base = url.replace('/$', '') + '/api';\n  }\n});\nObject.defineProperty(GatorDataReader, 'ID_TOKEN', {\n  get: function get() {\n    return id_token;\n  },\n  set: function set(token) {\n    id_token = token;\n    authenticating_promise = null;\n    _bean__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fire(GatorDataReader, 'idtoken');\n  }\n});\nvar is_anonymous;\nObject.defineProperty(GatorDataReader, 'anonymous', {\n  get: function get() {\n    return is_anonymous;\n  },\n  set: function set(anon) {\n    is_anonymous = anon;\n    id_token = null;\n    authenticating_promise = null;\n  }\n});\nvar authenticating_promise;\n\nvar anonymous_login = function anonymous_login() {\n  return new Promise(function (resolve, reject) {\n    _Service__WEBPACK_IMPORTED_MODULE_0__[\"default\"].request({\n      'url': url_base + '/login?cachebuster=' + new Date().getTime(),\n      'type': 'GET'\n    }, function (err, token) {\n      if (err) {\n        reject(err);\n      } else {\n        var auth_token = JSON.parse(token);\n\n        if (typeof auth_token == 'string') {\n          auth_token = {\n            id_token: auth_token\n          };\n        }\n\n        GatorDataReader.ID_TOKEN = auth_token.id_token;\n        resolve(url_base);\n      }\n    }, true);\n  });\n};\n\nvar reading_was_ok = true;\n\nvar reauth_reader = function reauth_reader(reader_class) {\n  var current_retrieve = reader_class.prototype.retrieve;\n\n  reader_class.prototype.retrieve = function () {\n    console.log('Retrieve with auth retry');\n    var current_arguments = [].slice.call(arguments);\n    var self = this;\n    this.bind('error', function (err) {\n      if (err.status == 401 || err.status == 403) {\n        if (!self.tried_auth) {\n          self.unbind('error');\n          self.tried_auth = true;\n\n          if (reading_was_ok) {\n            delete _MASCP__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GATOR_AUTH_TOKEN;\n            GatorDataReader.ID_TOKEN = null;\n            authenticating_promise = null;\n            _bean__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fire(GatorDataReader, 'unauthorized');\n            reading_was_ok = false;\n          }\n\n          authenticate_gator().catch(function (err) {\n            console.log(\"Error after auth\", err);\n            throw err;\n          }).then(function () {\n            reading_was_ok = true;\n            self.retrieve.apply(self, current_arguments);\n          }).catch(function (err) {\n            console.log(\"Died on doing the reauth\", err);\n          });\n        }\n      }\n    });\n    current_retrieve.apply(self, current_arguments);\n  };\n};\n\nreauth_reader(GatorDataReader);\nwindow.addEventListener(\"unhandledrejection\", function (err, promise) {\n  if (err.reason && err.reason.message == 'Unauthorized' && !err.reason.handled) {\n    err.reason.handled = true;\n    _bean__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fire(GatorDataReader, 'unauthorized');\n    return;\n  }\n\n  console.log(err);\n});\n\nvar authenticate_gator = function authenticate_gator() {\n  if (authenticating_promise) {\n    return authenticating_promise;\n  } // Need to put this somewhere for the moment\n  // Temporary code until we move to a single host\n\n\n  _ClustalRunner__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SERVICE_URL = url_base + '/tools/clustal';\n  _UniprotReader__WEBPACK_IMPORTED_MODULE_3__[\"default\"].SERVICE_URL = url_base + '/data/latest/uniprot';\n\n  if (!_UniprotReader__WEBPACK_IMPORTED_MODULE_3__[\"default\"].reauthed) {\n    reauth_reader(_UniprotReader__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n  }\n\n  _UniprotReader__WEBPACK_IMPORTED_MODULE_3__[\"default\"].reauthed = true;\n\n  if (!GatorDataReader.ID_TOKEN && GatorDataReader.anonymous) {\n    console.log(\"Doing an anonymous login\");\n    authenticating_promise = anonymous_login().then(function () {\n      authenticating_promise = null;\n    }).then(authenticate_gator);\n    return authenticating_promise;\n  }\n\n  if (!GatorDataReader.ID_TOKEN && !GatorDataReader.anonymous) {\n    console.log(\"We cannot log in without an ID TOKEN, waiting for token\");\n    authenticating_promise = new Promise(function (resolve, reject) {\n      var resolver = function resolver() {\n        console.log(\"Got a new ID token\");\n        _bean__WEBPACK_IMPORTED_MODULE_4__[\"default\"].remove(GatorDataReader, 'idtoken', resolver);\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GATOR_AUTH_TOKEN = GatorDataReader.ID_TOKEN;\n        resolve(url_base);\n      };\n\n      _bean__WEBPACK_IMPORTED_MODULE_4__[\"default\"].add(GatorDataReader, 'idtoken', resolver);\n      setTimeout(function () {\n        console.log(\"Timed out logging in\");\n        reject(new Error('Timed out'));\n      }, 5000);\n    });\n    return authenticating_promise;\n  }\n\n  authenticating_promise = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      _MASCP__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GATOR_AUTH_TOKEN = GatorDataReader.ID_TOKEN;\n      _bean__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fire(GatorDataReader, 'auth', [url_base]);\n      resolve(url_base);\n    }, 0);\n  });\n  return authenticating_promise;\n};\n\nGatorDataReader.prototype.setupSequenceRenderer = function (renderer) {\n  var self = this;\n\n  if (this.datasetname !== 'homology') {\n    return;\n  }\n\n  renderer.forceTrackAccs = true;\n  renderer.addAxisScale('homology', function (pos, accession, inverse) {\n    if (!self.result || self.agi === accession.name || self.acc === accession.name) {\n      return pos;\n    }\n\n    if (inverse) {\n      return self.result.calculateSequencePositionFromPosition(self.agi || self.acc, accession.name.toLowerCase(), pos);\n    }\n\n    return self.result.calculatePositionForSequence(self.agi || self.acc, accession.name.toLowerCase(), pos);\n  });\n};\n\n(function () {\n  var normalise_insertions = function normalise_insertions(inserts) {\n    var pos;\n    var positions = [];\n    var result_data = {};\n\n    for (pos in inserts) {\n      if (inserts.hasOwnProperty(pos) && parseInt(pos) >= -1) {\n        positions.push(parseInt(pos));\n      }\n    }\n\n    positions = positions.sort(function sortfunction(a, b) {\n      return a - b;\n    }); // From highest to lowest position, loop through and\n    // subtract the lengths of previous subtratctions from\n    // the final position value.\n\n    for (var i = positions.length - 1; i >= 0; i--) {\n      var j = i - 1;\n      pos = parseInt(positions[i]);\n      var value = inserts[pos];\n\n      while (j >= 0) {\n        pos -= inserts[positions[j]].length;\n        j--;\n      }\n\n      if (!value.match(/^\\s+$/)) {\n        result_data[pos + 1] = value + (result_data[pos + 1] || '');\n      }\n    } //    delete result_data[0];\n\n\n    return result_data;\n  };\n\n  var splice_char = function splice_char(seqs, index, insertions) {\n    for (var i = 0; i < seqs.length; i++) {\n      var seq = seqs[i].toString();\n\n      if (seq.charAt(index) != '-') {\n        if (!insertions[i]) {\n          insertions[i] = {};\n          insertions[i][-1] = '';\n        }\n\n        insertions[i][index - 1] = seq.charAt(index);\n\n        if (insertions[i][index] && insertions[i][index].match(/\\w/)) {\n          insertions[i][index - 1] += insertions[i][index];\n          delete insertions[i][index];\n        }\n      } else {\n        if (insertions[i]) {\n          insertions[i][index - 1] = ' ';\n\n          if ((insertions[i][index] || '').match(/^\\s+$/)) {\n            insertions[i][index - 1] += insertions[i][index];\n            delete insertions[i][index];\n          }\n        }\n      }\n\n      seqs[i] = seq.slice(0, index) + seq.slice(index + 1);\n    }\n  };\n\n  GatorDataReader.Result.prototype.makeSequences = function (ref_acc, alignments) {\n    var seqs = [];\n    var insertions = [];\n    var accs = [];\n    var ref_cigar = '';\n    alignments.forEach(function (align) {\n      if (!align.cigar && align.cigar_line) {\n        align.cigar = align.cigar_line;\n        delete align.cigar_line;\n      } // If the cigar line hasn't already been revivified\n\n\n      if (!align.cigar.match(/^[\\-\\.]*$/)) {\n        // Expand out the cigar line replacing M with . and D with -\n        align.cigar = align.cigar.match(/\\d*[MD]/g).map(function (bit) {\n          return new Array((parseInt(bit.slice(0, -1)) || 1) + 1).join(bit.slice(-1) == 'M' ? '.' : '-');\n        }).join('');\n      }\n\n      if (align.uniprot !== ref_acc.toUpperCase()) {\n        accs.push(align.uniprot);\n        seqs.push(align.cigar);\n      } else {\n        ref_cigar = align.cigar;\n      }\n    });\n    var aligning_seq = ref_cigar,\n        i = aligning_seq.length - 1;\n\n    for (i; i >= 0; i--) {\n      if (aligning_seq.charAt(i) == '-') {\n        splice_char(seqs, i, insertions);\n      }\n    }\n\n    for (i = 0; i < seqs.length; i++) {\n      if (insertions[i]) {\n        insertions[i] = normalise_insertions(insertions[i]);\n        var seq = seqs[i];\n        seqs[i] = {\n          'sequence': seq,\n          'insertions': insertions[i]\n        };\n\n        seqs[i].toString = function () {\n          return this.sequence;\n        };\n      }\n    }\n\n    var result = {};\n    accs.forEach(function (acc, idx) {\n      result[acc.toLowerCase()] = seqs[idx];\n    });\n    result[ref_acc.toLowerCase()] = ref_cigar.replace('-', '');\n    return result;\n  };\n})();\n\nGatorDataReader.Result.prototype.calculatePositionForSequence = function (ref_acc, idx, pos) {\n  if (ref_acc.toLowerCase() === idx.toLowerCase()) {\n    return pos;\n  }\n\n  if (!this.sequences) {\n    this.sequences = this.makeSequences(ref_acc, this._raw_data.alignments);\n  }\n\n  var inserts = this.sequences[idx.toLowerCase()].insertions || {};\n  var result = pos;\n  var actual_position = 0;\n  var seq = this.sequences[idx.toLowerCase()].toString();\n\n  for (var i = 0; i < seq.length; i++) {\n    if (inserts[i]) {\n      actual_position += inserts[i].length;\n    }\n\n    actual_position += 1;\n\n    if (seq.charAt(i) == '-') {\n      actual_position -= 1;\n    }\n\n    if (pos <= actual_position) {\n      if (pos == actual_position) {\n        return i + 1;\n      } else {\n        if (i == 0) {\n          i = 1;\n        }\n\n        return -1 * i;\n      }\n    }\n  }\n\n  return -1 * seq.length;\n};\n\nGatorDataReader.Result.prototype.calculateSequencePositionFromPosition = function (ref_acc, idx, pos) {\n  if (ref_acc.toLowerCase() === idx.toLowerCase()) {\n    return pos;\n  }\n\n  if (!this.sequences) {\n    this.sequences = this.makeSequences(ref_acc, this._raw_data.alignments);\n  }\n\n  var inserts = this.sequences[idx.toLowerCase()].insertions || {};\n  var result = pos;\n  var actual_position = 0;\n  var seq = this.sequences[idx.toLowerCase()].toString();\n\n  for (var i = 0; i < pos; i++) {\n    if (inserts[i]) {\n      actual_position += inserts[i].length;\n    }\n\n    actual_position += 1;\n\n    if (seq.charAt(i) == '-') {\n      actual_position -= 1;\n    }\n  }\n\n  if (actual_position == 0) {\n    actual_position += 1;\n  }\n\n  return actual_position;\n};\n\nvar default_result = GatorDataReader.Result;\nObject.defineProperty(GatorDataReader.prototype, 'datasetname', {\n  get: function get() {\n    return this._datasetname;\n  },\n  set: function set(value) {\n    this._datasetname = value;\n    this._requestset = value === 'homology' ? 'homology' : 'combined';\n    let alt_result = class extends default_result {\n      constructor(data) {\n        data.datasetname = value;\n        super(data);\n        return this;\n      }\n\n    };\n    this.Result = alt_result;\n  }\n});\n\nGatorDataReader.authenticate = function () {\n  return authenticate_gator();\n};\n\nvar running_promises = {};\n\nvar new_retrieve = function new_retrieve(acc) {\n  var self = this;\n  var orig_arguments = [].slice.call(arguments);\n\n  if (running_promises[acc + '-' + this._requestset]) {\n    running_promises[acc + '-' + this._requestset].then(function (result) {\n      GatorDataReader.prototype.retrieve.apply(self, orig_arguments);\n    }).catch(function (err) {\n      authenticate_gator().then(function () {\n        new_retrieve.apply(self, orig_arguments);\n      });\n    });\n\n    return;\n  }\n\n  running_promises[acc + '-' + this._requestset] = new Promise(function (resolve, reject) {\n    self.bind('resultReceived', resolve);\n    self.once('error', reject);\n  });\n\n  running_promises[acc + '-' + this._requestset].catch(function (err) {\n    authenticate_gator().then(function () {\n      running_promises[acc + '-' + self._requestset] = null;\n    });\n  });\n\n  GatorDataReader.prototype.retrieve.apply(self, orig_arguments);\n};\n\nGatorDataReader.createReader = function (doc) {\n  // Do the auth dance here\n  var reader = new GatorDataReader(null, url_base + '/data/latest/');\n  console.log(doc);\n  reader.datasetname = doc; // MASCP.Service.CacheService(reader);\n\n  authenticate_gator().then(function () {\n    reader.retrieve = new_retrieve;\n    _bean__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fire(reader, 'ready');\n  });\n  return reader;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GatorDataReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/GatorDataReader.js\n")},"../gator/js/lib/GeneComponent.js":
/*!****************************************!*\
  !*** ../gator/js/lib/GeneComponent.js ***!
  \****************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GenomeReader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GenomeReader */ \"../gator/js/lib/GenomeReader.js\");\n/* harmony import */ var _GatorComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GatorComponent */ \"../gator/js/lib/GatorComponent.js\");\n\n\nconst last_retrieved_gene = Symbol('last_retrieved_gene');\n\nclass GeneComponent extends _GatorComponent__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n  static get observedAttributes() {\n    return ['geneid'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    setup_renderer.call(this);\n\n    if (this.geneid) {\n      retrieve_data.call(this);\n    }\n  }\n\n  attributeChangedCallback(name, old, newval) {\n    if (name === 'geneid' && this.renderer) {\n      retrieve_data.call(this);\n      return;\n    }\n  }\n\n  get geneid() {\n    return this.getAttribute('geneid');\n  }\n\n  set geneid(id) {\n    this.setAttribute('geneid', id);\n  }\n\n}\n\nlet reader_has_data = function reader_has_data() {\n  if (!this.geneid) {\n    return;\n  }\n\n  if (this[last_retrieved_gene] === this.geneid) {\n    return;\n  }\n\n  this[last_retrieved_gene] = this.geneid;\n  console.log('Getting data for ', this.geneid);\n  var reader = new _GenomeReader__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  reader.geneid = this.geneid;\n\n  if (this.hasAttribute('reviewed')) {\n    reader.reviewed = true;\n  } // reader.uniprot = 'Q10472';\n\n\n  reader.exon_margin = 300; //..this.exonmargin || 300;\n\n  if (this.nt_mapping) {\n    reader.nt_mapping = this.nt_mapping;\n  }\n\n  if (!this.ready) {\n    reader.registerSequenceRenderer(this.renderer);\n    reader.bind('requestComplete', () => {\n      this.renderer.hideAxis();\n      this.renderer.fitZoom();\n    });\n    this.ready = new Promise(resolve => {\n      reader.bind('requestComplete', () => {\n        this.uniprots = Object.keys(reader.result._raw_data.data).map(up => up.toUpperCase());\n\n        if (reader.reviewed) {\n          this.uniprots = this.uniprots.filter(up => up === reader.swissprot.toUpperCase());\n        }\n\n        this.refreshTracks();\n        resolve();\n        delete this.ready;\n        var event = new Event('ready', {\n          bubbles: true\n        });\n        this.dispatchEvent(event);\n      });\n    });\n  }\n\n  reader.retrieve(this.accession || \"\" + this.geneid);\n};\n\nlet setup_renderer = function setup_renderer() {\n  this.renderer.trackOrder = [];\n  this.renderer.reset();\n};\n\nlet retrieve_data = function retrieve_data() {\n  this.renderer.bind('sequenceChange', reader_has_data.bind(this));\n  this.renderer.setSequence('M');\n};\n\ncustomElements.define('x-geneviewer', GeneComponent);\n/* harmony default export */ __webpack_exports__[\"default\"] = (GeneComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZ2F0b3IvanMvbGliL0dlbmVDb21wb25lbnQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZ2F0b3IvanMvbGliL0dlbmVDb21wb25lbnQuanM/NDFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIgXG5pbXBvcnQgR2Vub21lUmVhZGVyIGZyb20gJy4vR2Vub21lUmVhZGVyJztcbmltcG9ydCBHYXRvckNvbXBvbmVudCBmcm9tICcuL0dhdG9yQ29tcG9uZW50JztcblxuY29uc3QgbGFzdF9yZXRyaWV2ZWRfZ2VuZSA9IFN5bWJvbCgnbGFzdF9yZXRyaWV2ZWRfZ2VuZScpO1xuXG5jbGFzcyBHZW5lQ29tcG9uZW50IGV4dGVuZHMgR2F0b3JDb21wb25lbnQge1xuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gWydnZW5laWQnXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHNldHVwX3JlbmRlcmVyLmNhbGwodGhpcyk7XG4gICAgaWYgKHRoaXMuZ2VuZWlkKSB7XG4gICAgICByZXRyaWV2ZV9kYXRhLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsb2xkLG5ld3ZhbCkge1xuICAgIGlmIChuYW1lID09PSAnZ2VuZWlkJyAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXRyaWV2ZV9kYXRhLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgZ2V0IGdlbmVpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2dlbmVpZCcpO1xuICB9XG4gIHNldCBnZW5laWQoaWQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZ2VuZWlkJyxpZCk7XG4gIH1cbn1cblxubGV0IHJlYWRlcl9oYXNfZGF0YSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICEgdGhpcy5nZW5laWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICggdGhpc1tsYXN0X3JldHJpZXZlZF9nZW5lXSA9PT0gdGhpcy5nZW5laWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXNbbGFzdF9yZXRyaWV2ZWRfZ2VuZV0gPSB0aGlzLmdlbmVpZDtcblxuICBjb25zb2xlLmxvZygnR2V0dGluZyBkYXRhIGZvciAnLHRoaXMuZ2VuZWlkKTtcbiAgdmFyIHJlYWRlciA9IG5ldyBHZW5vbWVSZWFkZXIoKTtcbiAgcmVhZGVyLmdlbmVpZCA9IHRoaXMuZ2VuZWlkO1xuICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ3Jldmlld2VkJykpIHtcbiAgICByZWFkZXIucmV2aWV3ZWQgPSB0cnVlO1xuICB9XG4gIC8vIHJlYWRlci51bmlwcm90ID0gJ1ExMDQ3Mic7XG4gIHJlYWRlci5leG9uX21hcmdpbiA9IDMwMDsvLy4udGhpcy5leG9ubWFyZ2luIHx8IDMwMDtcbiAgaWYgKHRoaXMubnRfbWFwcGluZykge1xuICAgIHJlYWRlci5udF9tYXBwaW5nID0gdGhpcy5udF9tYXBwaW5nO1xuICB9XG4gIGlmICggISB0aGlzLnJlYWR5ICkge1xuICAgIHJlYWRlci5yZWdpc3RlclNlcXVlbmNlUmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XG4gICAgcmVhZGVyLmJpbmQoJ3JlcXVlc3RDb21wbGV0ZScsKCkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlci5oaWRlQXhpcygpO1xuICAgICAgdGhpcy5yZW5kZXJlci5maXRab29tKCk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWFkeSA9IG5ldyBQcm9taXNlKCAocmVzb2x2ZSkgPT4ge1xuICAgICAgcmVhZGVyLmJpbmQoJ3JlcXVlc3RDb21wbGV0ZScsKCkgPT4ge1xuICAgICAgICB0aGlzLnVuaXByb3RzID0gT2JqZWN0LmtleXMocmVhZGVyLnJlc3VsdC5fcmF3X2RhdGEuZGF0YSkubWFwKCB1cCA9PiB1cC50b1VwcGVyQ2FzZSgpICk7XG4gICAgICAgIGlmIChyZWFkZXIucmV2aWV3ZWQpIHtcbiAgICAgICAgICB0aGlzLnVuaXByb3RzID0gdGhpcy51bmlwcm90cy5maWx0ZXIoIHVwID0+IHVwID09PSByZWFkZXIuc3dpc3Nwcm90LnRvVXBwZXJDYXNlKCkgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnJlc2hUcmFja3MoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICBkZWxldGUgdGhpcy5yZWFkeTtcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdyZWFkeScse2J1YmJsZXM6IHRydWV9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVhZGVyLnJldHJpZXZlKHRoaXMuYWNjZXNzaW9uIHx8IFwiXCIrdGhpcy5nZW5laWQpO1xuXG59O1xuXG5sZXQgc2V0dXBfcmVuZGVyZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW5kZXJlci50cmFja09yZGVyID0gW107XG4gIHRoaXMucmVuZGVyZXIucmVzZXQoKTtcbn07XG5cbmxldCByZXRyaWV2ZV9kYXRhID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVuZGVyZXIuYmluZCgnc2VxdWVuY2VDaGFuZ2UnLHJlYWRlcl9oYXNfZGF0YS5iaW5kKHRoaXMpKTtcbiAgdGhpcy5yZW5kZXJlci5zZXRTZXF1ZW5jZSgnTScpO1xufTtcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCd4LWdlbmV2aWV3ZXInLEdlbmVDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBHZW5lQ29tcG9uZW50OyJdLCJtYXBwaW5ncyI6IkFBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUE5QkE7QUFDQTtBQStCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../gator/js/lib/GeneComponent.js\n")},"../gator/js/lib/GenomeReader.js":
/*!***************************************!*\
  !*** ../gator/js/lib/GenomeReader.js ***!
  \***************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MASCP */ "../gator/js/lib/MASCP.js");\n/* harmony import */ var _Service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Service */ "../gator/js/lib/Service.js");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bean */ "../gator/js/bean.js");\n/** @fileOverview   Classes for reading data from MyGene.info */\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Mygene.info for given sequences\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\n\nconst GenomeReader = _Service__WEBPACK_IMPORTED_MODULE_1__["default"].buildService(function (data) {\n  this._raw_data = data;\n  return this;\n});\nGenomeReader.SERVICE_URL = \'http://mygene.info/v2/query\';\n\nGenomeReader.prototype.requestData = function () {\n  this.acc = this.agi;\n\n  if (!this.geneid) {\n    return {\n      type: "GET",\n      dataType: "json",\n      url: \'https://mygene.info/v2/query\',\n      data: {\n        \'q\': \'uniprot:\' + this.acc.toUpperCase(),\n        \'fields\': \'entrezgene\',\n        \'email\': \'joshi%40sund.ku.dk\'\n      }\n    };\n  } else if (!this.acc) {\n    this.acc = this.agi = "" + this.geneid;\n  }\n\n  if (!this.exons) {\n    return {\n      type: "GET",\n      url: \'https://mygene.info/v3/gene/\' + this.geneid,\n      dataType: "json",\n      data: {\n        \'fields\': \'exons_hg19,uniprot.Swiss-Prot\'\n      }\n    };\n  }\n\n  if (this.tried_isoform) {\n    return _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].GatorDataReader.authenticate().then(url_base => {\n      this.tried_bare = true;\n      return {\n        type: "GET",\n        dataType: "json",\n        auth: _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].GATOR_AUTH_TOKEN,\n        api_key: _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].GATOR_CLIENT_ID,\n        url: url_base + \'/data/latest/combined/\' + this.swissprot.toUpperCase()\n      };\n    });\n  }\n\n  return _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].GatorDataReader.authenticate().then(url_base => {\n    this.tried_isoform = true;\n    return {\n      type: "GET",\n      dataType: "json",\n      auth: _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].GATOR_AUTH_TOKEN,\n      api_key: _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].GATOR_CLIENT_ID,\n      url: url_base + \'/data/latest/combined/\' + this.swissprot.toUpperCase() + \'-1\'\n    };\n  });\n  return {\n    type: "GET",\n    dataType: "txt",\n    url: "https://www.uniprot.org/mapping/",\n    data: {\n      "from": "REFSEQ_NT_ID",\n      "to": "ACC",\n      "format": "tab",\n      "query": Object.keys(this.exons).join(\' \')\n    }\n  };\n};\n\nlet update_structure = data => {\n  let result = {};\n\n  for (let transcript of data) {\n    result[transcript.transcript] = transcript;\n    transcript.exons = transcript.position;\n    delete transcript.position;\n  }\n\n  return result;\n};\n\n(function (serv) {\n  var defaultDataReceived = serv.prototype._dataReceived;\n\n  serv.prototype._dataReceived = function (data, status) {\n    var self = this;\n\n    if (data.data && status === "db") {\n      self.sequences = [{\n        "agi": "genome"\n      }];\n      Object.keys(data.data).forEach(function (uniprot) {\n        self.sequences.push({\n          "agi": uniprot.toLowerCase()\n        });\n      });\n      return defaultDataReceived.call(this, data, status);\n    }\n\n    if (status < 200 || status >= 400) {\n      return defaultDataReceived.call(this, null, status);\n    }\n\n    if (!this.geneid) {\n      this.geneid = data.hits[0].entrezgene;\n      this.retrieve(this.acc || this.agi);\n      return;\n    }\n\n    if (!this.exons) {\n      this.exons = update_structure(data.exons_hg19 || data.exons);\n      this.swissprot = (data.uniprot || {})[\'Swiss-Prot\'].toLowerCase();\n\n      if (!this.nt_mapping) {\n        this.retrieve(this.acc || this.agi);\n        return;\n      }\n\n      data = this.nt_mapping.map(function (map) {\n        return map.join(\'\\t\');\n      }).join(\'\\n\');\n    }\n\n    data = data.data.filter(dat => dat.dataset == \'uniprot_refseqnt\');\n\n    if (data.length > 0) {\n      data = data[0].data.map(mapping => [mapping.refseqnt.replace(/\\..*/, \'\'), mapping.uniprot].join(\'\\t\')).join(\'\\n\');\n    } else {\n      if (this.tried_isoform && !this.tried_bare) {\n        this.retrieve(this.acc || this.agi);\n        return;\n      }\n\n      data = "";\n    }\n\n    var mapped = {};\n    self.sequences = [{\n      "agi": "genome"\n    }];\n    (data || "").split(\'\\n\').forEach(function (row) {\n      var bits = row.split(\'\\t\');\n\n      if (!bits[1]) {\n        return;\n      }\n\n      var uniprot = bits[1].toLowerCase().replace(/-\\d+/, \'\');\n      var nuc = bits[0];\n      nuc = nuc.replace(/\\..*$/, \'\');\n\n      if (!self.exons[nuc]) {\n        return;\n      }\n\n      if (!self.agi || !self.acc) {\n        self.acc = uniprot;\n        self.agi = uniprot;\n      }\n\n      if (!mapped[uniprot]) {\n        mapped[uniprot] = [];\n      }\n\n      self.exons[nuc]._id = nuc;\n      mapped[uniprot].push(self.exons[nuc]);\n      self.sequences.push({\n        "agi": uniprot.toLowerCase()\n      });\n    });\n    return defaultDataReceived.call(this, {\n      "data": mapped\n    }, status);\n  };\n})(GenomeReader);\n\nGenomeReader.Result.prototype.getSequences = function () {\n  var results = [];\n  var cds_data = this._raw_data.data;\n  var uniprots = Object.keys(cds_data);\n  let min, max;\n  min = max = null;\n  uniprots.forEach(function (uniprot) {\n    var ends = cds_data[uniprot].map(function (cd) {\n      if (Array.isArray(cd)) {\n        cd = cd.filter(function (c) {\n          return c.chr.match(/^[\\dXx]+$/);\n        })[0];\n      }\n\n      return [cd.txstart, cd.txend];\n    });\n    ends.forEach(function (cd) {\n      if (!min || cd[0] < min) {\n        min = cd[0];\n      }\n\n      if (!max || cd[1] > max) {\n        max = cd[1];\n      }\n    });\n  });\n  results = [Array(Math.floor((max - min) / 3)).join(\'.\')];\n  this.min = min;\n  this.max = max;\n  return results;\n};\n\nGenomeReader.Result.prototype.getIntrons = function (margin) {\n  var self = this;\n  var results = [];\n  var uprots = Object.keys(self._raw_data.data);\n  uprots.forEach(function (up) {\n    var cds = self._raw_data.data[up];\n    cds.forEach(function (target_cds) {\n      if (Array.isArray(target_cds)) {\n        target_cds = target_cds.filter(function (c) {\n          return c.chr.match(/^[\\dXx]+$/);\n        })[0];\n\n        if (!target_cds) {\n          return null;\n        }\n      }\n\n      var exons = target_cds.exons;\n      var target_position;\n\n      for (var i = 0; i < exons.length; i++) {\n        if (i == 0) {\n          results.push([self.min, exons[i][0] - margin]);\n        } else {\n          results.push([exons[i - 1][1] + margin, exons[i][0] - margin]);\n        }\n\n        if (i == exons.length - 1) {\n          results.push([exons[i][1] + margin, self.max]);\n        }\n\n        if (results.slice(-1)[0][0] > results.slice(-1)[0][1]) {\n          results.splice(results.length - 1, 1);\n        }\n      }\n    });\n  });\n  return results;\n};\n\nGenomeReader.prototype.proteinLength = function (target_cds) {\n  var exons = target_cds.exons;\n  var total = 0;\n\n  for (var i = 0; i < exons.length; i++) {\n    if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n      continue;\n    }\n\n    if (target_cds.cdsend < exons[i][0]) {\n      continue;\n    }\n\n    var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n    var end = target_cds.cdsend < exons[i][1] ? target_cds.cdsend : exons[i][1];\n    total += end - start;\n  }\n\n  return Math.floor(total / 3) - 1;\n};\n\nGenomeReader.prototype.calculateSequencePositionFromProteinPosition = function (idx, pos) {\n  var self = this;\n  var wanted_identifier = idx;\n\n  var cds = self.result._raw_data.data[wanted_identifier.toLowerCase()];\n\n  if (!cds) {\n    return -1;\n  }\n\n  if (!cds.txstart) {\n    cds = cds.map(function (cd) {\n      if (Array.isArray(cd)) {\n        cd = cd.filter(function (c) {\n          return c.chr.match(/^[\\dXx]+$/);\n        })[0];\n\n        if (!cd) {\n          return null;\n        }\n      }\n\n      return cd;\n    });\n  }\n\n  var target_cds = cds[0] || {};\n  var exons = target_cds.exons || [];\n  var position_genome = Math.floor(pos / 3);\n  var target_position = 0;\n\n  if (pos < target_cds.cdsstart) {\n    target_position = 6;\n\n    if (target_cds.strand == -1) {\n      target_position = 3;\n    }\n  }\n\n  if (pos > target_cds.cdsend) {\n    target_position = self.proteinLength(target_cds) * 3;\n\n    if (target_cds.strand == 1) {\n      target_position += 3;\n    }\n  }\n\n  if (target_position == 0) {\n    for (var i = 0; i < exons.length; i++) {\n      if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n        continue;\n      }\n\n      var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n      var end = target_cds.cdsend < exons[i][1] ? target_cds.cdsend : exons[i][1];\n\n      if (pos < start) {\n        break;\n      }\n\n      if (pos <= end && pos >= start) {\n        target_position += pos - start;\n        break;\n      } else {\n        target_position += end - start;\n      }\n    }\n  }\n\n  target_position = Math.floor(target_position / 3) - 1;\n\n  if (target_cds.strand == -1) {\n    target_position = self.proteinLength(target_cds) - target_position;\n  }\n\n  return target_position;\n};\n\nGenomeReader.prototype.calculateProteinPositionForSequence = function (idx, pos) {\n  var self = this;\n  var wanted_identifier = idx;\n\n  var cds = self.result._raw_data.data[wanted_identifier.toLowerCase()];\n\n  if (!cds) {\n    return -1;\n  }\n\n  if (!cds.txstart) {\n    cds = cds.map(function (cd) {\n      if (Array.isArray(cd)) {\n        cd = cd.filter(function (c) {\n          return c.chr.match(/^[\\dXx]+$/);\n        })[0];\n\n        if (!cd) {\n          return null;\n        }\n      }\n\n      return cd;\n    });\n  }\n\n  var target_cds = cds[0] || {};\n  var exons = target_cds.exons || [];\n\n  if (target_cds.strand == -1) {\n    pos = self.proteinLength(target_cds) - pos;\n  }\n\n  var position_genome = pos * 3;\n  var target_position;\n\n  for (var i = 0; i < exons.length; i++) {\n    if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n      continue;\n    }\n\n    var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n    var bases = exons[i][1] - start;\n\n    if (bases >= position_genome) {\n      target_position = start + position_genome;\n      break;\n    } else {\n      position_genome -= bases;\n    }\n  }\n\n  return target_position;\n};\n\nGenomeReader.prototype.calculatePositionForSequence = function (idx, pos) {\n  var self = this;\n  var wanted_identifier = self.sequences[idx].agi;\n  var empty_regions = [];\n  var calculated_pos = pos;\n\n  if (wanted_identifier == \'genome\') {// Don\'t change the genome identifier\n  } else {\n    calculated_pos = self.calculateProteinPositionForSequence(idx, pos);\n  }\n\n  for (var i = 0; i < empty_regions.length; i++) {\n    if (pos > empty_regions[i][1]) {\n      calculated_pos -= empty_regions[i][1] - empty_regions[i][0];\n    }\n\n    if (pos < empty_regions[i][1] && pos > empty_regions[i][0]) {\n      calculated_pos = -1;\n    }\n  }\n\n  return calculated_pos;\n};\n\n(function (serv) {\n  var get_exon_boxes = function get_exon_boxes(result, uniprot) {\n    var cds_data = result._raw_data.data;\n\n    if (uniprot) {\n      console.log(\'Filtering exons so we only show\', uniprot);\n    }\n\n    var uniprots = Object.keys(cds_data);\n    var max = result.max;\n    var min = result.min;\n    var return_data = [];\n    var base_offset = 0;\n    uniprots.filter(up => uniprot ? up === (uniprot || \'\').toLowerCase() : true).forEach(function (uniprot) {\n      var ends = cds_data[uniprot].map(function (cd, idx) {\n        if (Array.isArray(cd)) {\n          cd = cd.filter(function (c) {\n            return c.chr.match(/^[\\dXx]+$/);\n          })[0];\n\n          if (!cd) {\n            return;\n          }\n        }\n\n        var exons = cd.exons;\n        var color = idx == 0 ? \'#999\' : \'#f99\';\n        exons.forEach(function (exon) {\n          return_data.push({\n            "aa": 1 + exon[0],\n            "type": "box",\n            "width": exon[1] - exon[0],\n            "options": {\n              "offset": base_offset,\n              "height_scale": 1,\n              "fill": color,\n              "merge": false\n            }\n          });\n\n          if (cd.strand > 0) {\n            return_data.push({\n              "aa": exon[1] - 1,\n              "type": "marker",\n              "options": {\n                "height": 4,\n                "content": {\n                  "type": "right_triangle",\n                  "fill": \'#aaa\'\n                },\n                "offset": base_offset + 2,\n                "bare_element": true\n              }\n            });\n          } else {\n            return_data.push({\n              "aa": exon[0] + 1,\n              "type": "marker",\n              "options": {\n                "height": 4,\n                "content": {\n                  "type": "left_triangle",\n                  "fill": \'#aaa\'\n                },\n                "offset": base_offset + 2,\n                "bare_element": true\n              }\n            });\n          }\n        });\n        return_data.push({\n          "aa": cd.cdsstart,\n          "type": "box",\n          "width": 1,\n          "options": {\n            "fill": "#0000ff",\n            "height_scale": 2,\n            "offset": base_offset - 2,\n            "merge": false\n          }\n        });\n        return_data.push({\n          "aa": cd.cdsend,\n          "type": "box",\n          "width": 1,\n          "options": {\n            "fill": "#0000ff",\n            "height_scale": 2,\n            "offset": base_offset - 2,\n            "merge": false\n          }\n        });\n        base_offset += 1;\n      });\n      base_offset += 2;\n    });\n    return return_data;\n  };\n\n  var get_removed_labels = function get_removed_labels(result) {\n    var removed = result.removed_regions || [];\n    var results = [];\n    var max = result.max;\n    var min = result.min;\n    var cds_data = result._raw_data.data;\n    var uniprots = Object.keys(cds_data);\n    var total = uniprots.reduce(function (prev, up) {\n      return prev + cds_data[up].length;\n    }, 0);\n    removed.forEach(function (vals) {\n      var start = vals[0];\n      var end = vals[1];\n      var start_txt = Math.floor(start % 1e6 / 1000) + "kb";\n      var end_txt = Math.floor(end % 1e6 / 1000) + "kb";\n      results.push({\n        "aa": start - 1,\n        "type": "box",\n        width: end - start + 3,\n        "options": {\n          "fill": "#999",\n          "height_scale": total * 3,\n          "offset": -1 * total\n        }\n      });\n      results.push({\n        "aa": start - 3,\n        "type": "text",\n        "options": {\n          "txt": start_txt,\n          "fill": "#000",\n          "height": 4,\n          "offset": -4,\n          "align": "right"\n        }\n      });\n      results.push({\n        "aa": end + 3,\n        "type": "text",\n        "options": {\n          "txt": end_txt,\n          "fill": "#000",\n          "height": 4,\n          "offset": 4,\n          "align": "left"\n        }\n      });\n    });\n    return results;\n  };\n\n  var calculate_removed_regions = function calculate_removed_regions(result, margin) {\n    var introns = result.getIntrons(margin);\n    var intervals = [{\n      "index": result.min - 2,\n      "start": true,\n      "idx": -1\n    }, {\n      "index": result.min,\n      "start": false,\n      "idx": -1\n    }];\n    introns.forEach(function (intron, idx) {\n      intervals.push({\n        "index": intron[0],\n        "start": true,\n        "idx": idx\n      });\n      intervals.push({\n        "index": intron[1],\n        "start": false,\n        "idx": idx\n      });\n    });\n    intervals.sort(function (a, b) {\n      if (a.index < b.index) {\n        return -1;\n      }\n\n      if (a.index > b.index) {\n        return 1;\n      }\n\n      if (a.index == b.index) {\n        return a.start ? -1 : 1;\n      }\n    });\n    var results = [];\n    intervals.forEach(function (intr, idx) {\n      if (intr.start && intervals[idx + 1] && intervals[idx + 1].start == false) {\n        if (intr.index != intervals[idx + 1].index && intervals[idx + 1].index != result.min) {\n          results.push([intr.index, intervals[idx + 1].index]);\n        }\n      }\n    });\n    result.removed_regions = results;\n  };\n\n  var generate_scaler_function = function generate_scaler_function(reader) {\n    return function (in_pos, layer, inverse) {\n      var pos = in_pos;\n\n      if (!reader.result) {\n        return inverse ? pos * 3 : Math.floor(pos / 3);\n      }\n\n      var introns = reader.result.removed_regions || [];\n\n      if (inverse) {\n        pos = in_pos * 3;\n        calculated_pos = pos;\n\n        for (var i = 0; i < introns.length && pos > 0; i++) {\n          var left_exon = i > 0 ? introns[i - 1] : [null, reader.result.min];\n          var right_exon = introns[i] || [reader.result.max, null];\n          pos -= right_exon[0] - left_exon[1];\n\n          if (pos > 0) {\n            calculated_pos += introns[i][1] - introns[i][0];\n          }\n        }\n\n        return calculated_pos + reader.result.min;\n      }\n\n      var calculated_pos = pos - reader.result.min;\n\n      for (var i = 0; i < introns.length; i++) {\n        if (pos > introns[i][1]) {\n          calculated_pos -= introns[i][1] - introns[i][0];\n        }\n\n        if (pos < introns[i][1] && pos > introns[i][0]) {\n          calculated_pos = introns[i][1] - reader.result.min;\n        }\n      }\n\n      if (calculated_pos < 3) {\n        calculated_pos = 3;\n      }\n\n      return Math.floor(calculated_pos / 3);\n    };\n  };\n\n  Object.defineProperty(serv.prototype, \'exon_margin\', {\n    set: function set(val) {\n      this._exon_margin = val;\n\n      if (this.result) {\n        calculate_removed_regions(this.result, val);\n        this.redrawIntrons();\n      }\n    },\n    get: function get() {\n      return this._exon_margin;\n    }\n  });\n\n  var redrawIntrons = function redrawIntrons(renderer, controller_name, scaler_function) {\n    var labs = [];\n\n    var zoomCheck = function zoomCheck() {\n      if (labs.length < 1 || !labs[0].parentNode) {\n        return;\n      }\n\n      var hidden = false;\n\n      for (var i = 0; !hidden && i < labs.length - 3; i += 3) {\n        if (labs[i].hasAttribute(\'display\')) {\n          hidden = true;\n          continue;\n        }\n\n        if (labs[i].getBoundingClientRect().right > labs[i + 3].getBoundingClientRect().left) {\n          hidden = true;\n        }\n      }\n\n      labs.forEach(function (lab) {\n        if (lab.nodeName == \'rect\') {\n          return;\n        }\n\n        if (hidden) {\n          lab.setAttribute(\'display\', \'none\');\n        } else {\n          lab.removeAttribute(\'display\');\n        }\n      });\n    };\n\n    renderer.bind(\'zoomChange\', zoomCheck);\n    return function () {\n      var result = this.result;\n      renderer.sequence = Array(scaler_function(result.max)).join(\'.\');\n\n      if (labs.length > 0) {\n        labs.forEach(function (lab) {\n          renderer.remove(controller_name, lab);\n        });\n        labs = [];\n      }\n\n      var proxy_reader = {\n        agi: controller_name,\n        gotResult: function gotResult() {\n          labs = renderer.renderObjects(controller_name, get_removed_labels(result));\n          renderer.refresh();\n          zoomCheck();\n        }\n      };\n      _Service__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.registerSequenceRenderer.call(proxy_reader, renderer);\n      proxy_reader.gotResult();\n    };\n  };\n\n  serv.prototype.setupSequenceRenderer = function (renderer) {\n    var self = this;\n    renderer.addAxisScale(\'genome\', function (pos, layer, inverse) {\n      if (layer && layer.scales.has(\'genomic\')) {\n        return pos;\n      }\n\n      let all_scales = Object.keys(self.result._raw_data.data);\n      let identifier = layer.name;\n\n      for (let scale of all_scales) {\n        if (layer.scales.has(scale.toUpperCase()) || layer.scales.has(scale.toLowerCase())) {\n          identifier = scale;\n        }\n      }\n\n      if (inverse) {\n        return self.calculateSequencePositionFromProteinPosition(identifier, pos);\n      }\n\n      return self.calculateProteinPositionForSequence(identifier, pos);\n    });\n    var controller_name = \'cds\';\n\n    var redraw_alignments = function redraw_alignments(sequence_index) {\n      if (!sequence_index) {\n        sequence_index = 0;\n      }\n\n      _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].registerLayer(controller_name, {\n        \'fullname\': \'Exons\',\n        \'color\': \'#000000\'\n      });\n      _MASCP__WEBPACK_IMPORTED_MODULE_0__["default"].getLayer(controller_name).scales.add(\'genomic\');\n\n      if (renderer.trackOrder.indexOf(controller_name) < 0) {\n        renderer.trackOrder.push(controller_name);\n      }\n\n      renderer.showLayer(controller_name);\n      var result = this.result;\n      var aligned = result.getSequences();\n      var scaler_function = generate_scaler_function(self);\n      renderer.addAxisScale(\'removeIntrons\', scaler_function);\n      calculate_removed_regions(self.result, self.exon_margin || 300);\n\n      if (!renderer.sequence) {\n        // Not sure what to do with this bit here\n        renderer.setSequence(Array(scaler_function(result.max)).join(\'.\'))(function () {\n          redraw_alignments(sequence_index);\n        });\n        return;\n      } else {\n        renderer.sequence = Array(scaler_function(result.max)).join(\'.\');\n        renderer.redrawAxis();\n      }\n\n      var proxy_reader = {\n        agi: controller_name,\n        gotResult: function gotResult() {\n          renderer.renderObjects(controller_name, get_exon_boxes(result, self.reviewed ? self.swissprot : self.uniprot));\n        }\n      };\n      _Service__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.registerSequenceRenderer.call(proxy_reader, renderer);\n      proxy_reader.gotResult();\n      self.redrawIntrons = redrawIntrons(renderer, controller_name, scaler_function);\n      self.redrawIntrons();\n    };\n\n    this.bind(\'resultReceived\', redraw_alignments);\n  };\n})(GenomeReader);\n\n/* harmony default export */ __webpack_exports__["default"] = (GenomeReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/GenomeReader.js\n')},"../gator/js/lib/MASCP.js":
/*!********************************!*\
  !*** ../gator/js/lib/MASCP.js ***!
  \********************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bean */ "../gator/js/bean.js");\n\n/**\n *  @namespace MASCP namespace\n */\n\nconst MASCP = {};\n/**\n *  @fileOverview   Basic classes and defitions for the MASCP services\n */\n\nif (Object.defineProperty && !MASCP.IE8) {\n  (function () {\n    var ready_callbacks = [];\n    var is_ready = false;\n    Object.defineProperty(MASCP, "ready", {\n      get: function get() {\n        if (ready_callbacks.length === 0 && !is_ready) {\n          return false;\n        }\n\n        return function () {\n          ready_callbacks.forEach(function (cb) {\n            cb.call();\n          });\n        };\n      },\n      set: function set(cb) {\n        if (cb === false || cb === true) {\n          ready_callbacks = [];\n\n          if (cb) {\n            is_ready = true;\n          }\n\n          return is_ready;\n        } else {\n          if (is_ready) {\n            cb.call();\n            return;\n          }\n\n          ready_callbacks.push(cb);\n        }\n      }\n    });\n  })();\n}\n/**\n *  @lends MASCP.Group.prototype\n *  @property   {String}        name                        Name for this group to be used as an identifier\n *  @property   {String}        fullname                    The full (long) name for this group, that can be used in UI widgets for labelling\n *  @property   {String}        color                       Color string to apply to this group\n *  @property   {Boolean}       hide_member_controllers     For controllers for this group, do not show the layer controllers for this group\n *  @property   {Boolean}       hide_group_controller       For controllers for this group do not show the parent group controller\n */\n\n/**\n * Register a group with metadata for all sequence renderers.\n * @static\n * @param {String} groupName    Name to give to this group\n * @param {Hash} options        Options to apply to this group - see MASCP.Group for all the fields\n * @returns New group object\n * @type MASCP.Group\n * @see MASCP.event:groupRegistered\n * @see MASCP.Group\n */\n\n\nMASCP.registerGroup = function (groupName, options) {\n  if (!this.groups) {\n    this.groups = {};\n  }\n\n  if (this.groups[groupName]) {\n    return;\n  }\n\n  var group = new MASCP.Group();\n  group.name = groupName;\n  options = options || {};\n\n  if (options.hide_member_controllers) {\n    group.hide_member_controllers = true;\n  }\n\n  if (options.hide_group_controller) {\n    group.hide_group_controller = true;\n  }\n\n  if (options.fullname) {\n    group.fullname = options.fullname;\n  }\n\n  if (options.color) {\n    group.color = options.color;\n  }\n\n  if (options.group) {\n    group.group = this.getGroup(options.group);\n\n    if (!group.group) {\n      throw "Cannot register this layer with the given group - the group has not been registered yet";\n    }\n\n    group.group._layers.push(group);\n  }\n\n  group._layers = [];\n  group.group_id = new Date().getMilliseconds();\n  this.groups[groupName] = group;\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(MASCP, \'groupRegistered\', [group]);\n  return group;\n};\n/**\n *  @lends MASCP.Layer.prototype\n *  @property   {String}        name        Name for this layer to be used as an identifier\n *  @property   {String}        fullname    The full (long) name for this layer, that can be used in UI widgets for labelling\n *  @property   {String}        color       Color string to apply to this layer\n *  @property   {MASCP.Group}   group       Group that this layer is part of. Either a group object, or the name for the group.\n *  @property   {String}        css         CSS block for this layer. Active and inactive layers are children of the .active and .inactive classes respectively. To target a track-based rendering, use the .tracks class first, and to target overlays, use the .overlay class last\n *  @property   {Object}        data        Data for this layer\n */\n\n/**\n * Register a layer with metadata for all sequence renderers.\n * @static\n * @param {String} layerName    Name to give to this layer\n * @param {Hash} options        Options to set field values for this layer - see the fields for MASCP.Layer.\n * @returns New layer object\n * @type MASCP.Layer\n * @see MASCP.Layer\n * @see MASCP.event:layerRegistered\n */\n\n\nMASCP.registerLayer = function (layerName, options, renderers) {\n  if (!this.layers) {\n    this.layers = {};\n  }\n\n  if (!renderers) {\n    renderers = [];\n  }\n\n  var layer;\n\n  if (this.layers[layerName]) {\n    if (this.layers[layerName].disabled || renderers.length > 0) {\n      this.layers[layerName].disabled = false;\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(MASCP, \'layerRegistered\', [this.layers[layerName]].concat(renderers));\n    }\n\n    layer = this.layers[layerName];\n  }\n\n  if (layer && options.group) {\n    if (layer.group !== this.getGroup(options.group)) {\n      layer.group = this.getGroup(options.group);\n\n      layer.group._layers.push(layer);\n    }\n\n    if (!layer.group) {\n      throw "Cannot register this layer with the given group - the group has not been registered yet";\n    }\n  }\n\n  if (layer) {\n    return layer;\n  }\n\n  layer = new MASCP.Layer();\n  layer.name = layerName;\n  options = options || {};\n\n  if (options.fullname) {\n    layer.fullname = options.fullname;\n  }\n\n  if (options.color) {\n    layer.color = options.color;\n  }\n\n  if (options.data) {\n    layer.data = options.data;\n  }\n\n  if (layer && options.group) {\n    layer.group = this.getGroup(options.group);\n\n    if (!layer.group) {\n      throw "Cannot register this layer with the given group - the group has not been registered yet";\n    }\n\n    layer.group._layers.push(layer);\n  }\n\n  this.layers[layerName] = layer;\n\n  if (options.css) {\n    console.log("options.css is deprecated");\n  }\n\n  layer.layer_id = new Date().getMilliseconds();\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(MASCP, \'layerRegistered\', [layer].concat(renderers));\n  return layer;\n};\n/**\n * @class\n * Metadata for a group of layers to be rendered\n */\n\n\nMASCP.Group = function () {\n  return;\n};\n/**\n * Describe what this method does\n * @private\n * @param {String|Object|Array|Boolean|Number} paramName Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n\n\nMASCP.Group.prototype.size = function () {\n  var counter = 0;\n\n  for (var i = 0; i < this._layers.length; i++) {\n    if (!this._layers[i].disabled) {\n      counter += 1;\n    }\n  }\n\n  return counter;\n};\n\nMASCP.Group.prototype.eachLayer = function (func) {\n  for (var i = 0; i < this._layers.length; i++) {\n    if (!this._layers[i].disabled) {\n      func.call(this._layers[i], this._layers[i]);\n    }\n  }\n};\n/**\n * @class\n * Metadata for a single layer to be rendered\n */\n\n\nMASCP.Layer = function () {\n  this.scales = new Set();\n  return;\n};\n/**\n * Retrieve a layer object from the layer registry. If a layer object is passed to this method, the same layer is returned.\n * @param {String} layer    Layer name\n * @returns Layer object\n * @type Object\n * @see MASCP.Layer\n */\n\n\nMASCP.getLayer = function (layer) {\n  if (!MASCP.layers) {\n    return;\n  }\n\n  return typeof layer == \'string\' ? MASCP.layers[layer] : layer;\n};\n/**\n * Retrieve a group object from the group registry. If a grop object is passed to this method, the same group is returned.\n * @param {String} group    Group name\n * @returns Group object\n * @type Object\n * @see MASCP.Group\n */\n\n\nMASCP.getGroup = function (group) {\n  if (typeof group == \'undefined\') {\n    return;\n  }\n\n  if (!MASCP.groups) {\n    return;\n  }\n\n  if (typeof group == \'string\') {\n    return MASCP.groups[group];\n  }\n\n  return group == MASCP.groups[group.name] ? group : null;\n};\n\n/* harmony default export */ __webpack_exports__["default"] = (MASCP);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/MASCP.js\n')},"../gator/js/lib/SVGCanvas.js":
/*!************************************!*\
  !*** ../gator/js/lib/SVGCanvas.js ***!
  \************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bean */ \"../gator/js/bean.js\");\n\n\nconst SVGCanvas = function () {\n  var extended_elements = [];\n  var DEFAULT_RS = 1;\n  var svgns = 'http://www.w3.org/2000/svg';\n\n  function extend_array(an_array, RS) {\n    var curr_x, curr_y, curr_transform, targ_disp, a_disp;\n\n    an_array.visibility = function () {\n      var curr_disp = 'hidden';\n\n      for (var i = 0; i < an_array.length; i++) {\n        if (Array.isArray(an_array[i])) {\n          continue;\n        }\n\n        a_disp = an_array[i].getAttribute('visibility');\n\n        if (a_disp && a_disp != 'hidden') {\n          curr_disp = a_disp;\n          break;\n        }\n      }\n\n      return curr_disp;\n    };\n\n    an_array.currenty = function () {\n      var a_y;\n      var filtered = an_array.filter(function (el) {\n        return el && !Array.isArray(el);\n      });\n\n      if (filtered[0] && filtered[0].getAttribute('transform')) {\n        a_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(filtered[0].getAttribute('transform'));\n\n        if (a_y !== null && typeof a_y !== 'undefined') {\n          a_y = a_y[2];\n        }\n      }\n\n      return filtered[0] ? parseInt(a_y || filtered[0].getAttribute('y') || 0, 10) : 0;\n    };\n\n    an_array.animate = function (hsh) {\n      if (typeof hsh.y == 'undefined') {\n        attr(hsh);\n        return;\n      }\n\n      if (an_array.length === 0) {\n        return;\n      }\n\n      var hash = {};\n      var key;\n\n      for (key in hsh) {\n        if (hsh.hasOwnProperty(key)) {\n          hash[key] = hsh[key];\n        }\n      }\n\n      setup_anim_clocks();\n\n      if (an_array.animating) {\n        for (var i = 0; i < (anim_clock_funcs || []).length; i++) {\n          if (anim_clock_funcs[i].target_set != an_array) {\n            continue;\n          }\n\n          an_array.animating = false;\n          anim_clock_funcs.splice(i, 1);\n        }\n      }\n\n      var curr_disp = an_array.visibility();\n      var target_disp = hash.visibility;\n\n      if (curr_disp == target_disp && target_disp == 'hidden') {\n        attr(hsh);\n        return;\n      }\n\n      var curr_y = an_array.currenty();\n\n      if (isNaN(parseInt(curr_y, 10))) {\n        console.log(\"Have a NaN y value, skipping\");\n        return;\n      }\n\n      var target_y = parseInt(hash.y, 10);\n      delete hash.y;\n\n      if (curr_disp == target_disp && target_disp == 'visible') {\n        delete hash.visibility;\n        target_disp = null;\n        attr({\n          'visibility': 'visible'\n        });\n      }\n\n      if (hash.visibility == 'hidden') {\n        delete hash.visibility;\n      }\n\n      attr(hash);\n      var counter = 0;\n\n      if (target_y != curr_y) {\n        var anim_steps = 1 * (Math.abs(parseInt((target_y - curr_y) / (50 * RS), 10) / rate) + 1);\n        var diff = (target_y - curr_y) / anim_steps;\n        hash.y = curr_y || 0;\n        var orig_func = an_array.animate;\n        an_array.animating = true;\n        hash.y = curr_y + diff * 1;\n\n        let step_func = function step_func(step) {\n          if (diff < 0 && hash.y < target_y) {\n            hash.y = target_y;\n          }\n\n          if (diff > 0 && hash.y > target_y) {\n            hash.y = target_y;\n          }\n\n          attr(hash);\n          counter += step || 1;\n\n          if (hash.y != target_y) {\n            hash.y = curr_y + diff * (counter + 1);\n            return;\n          }\n\n          an_array.animating = false;\n\n          if (target_disp) {\n            attr({\n              'visibility': target_disp\n            });\n          }\n\n          anim_clock_funcs.splice(anim_clock_funcs.indexOf(step_func), 1);\n        };\n\n        anim_clock_funcs.push(step_func);\n        anim_clock_funcs[anim_clock_funcs.length - 1].target_set = an_array;\n      }\n\n      return;\n    };\n\n    an_array.attr = function (hsh) {\n      if (in_anim) {\n        return this.animate(hsh);\n      }\n\n      return attr(hsh);\n    };\n\n    var attr = function attr(hsh) {\n      var hash = {};\n      var key;\n\n      for (key in hsh) {\n        if (hsh.hasOwnProperty(key)) {\n          hash[key] = hsh[key];\n        }\n      }\n\n      var curr_disp = an_array.visibility();\n      var targ_y = parseInt(hash.y, 10);\n      targ_disp = hash.visibility;\n\n      for (key in hash) {\n        if (hash.hasOwnProperty(key)) {\n          for (var i = 0; i < an_array.length; i++) {\n            if (!an_array[i]) {\n              continue;\n            }\n\n            if (Array.isArray(an_array[i])) {\n              continue;\n            }\n\n            if (an_array[i].style.display == 'none') {\n              continue;\n            }\n\n            var value = hash[key];\n\n            if (key == 'style' && an_array[i].hasAttribute('style')) {\n              var curr_style = an_array[i].getAttribute('style');\n              curr_style += '; ' + hash[key];\n              value = curr_style;\n            }\n\n            var has_translate = an_array[i].hasAttribute('transform') && an_array[i].getAttribute('transform').indexOf('translate') >= 0;\n\n            if (key == 'height' && an_array[i].setHeight) {\n              //hasAttribute('transform') && ! an_array[i].no_scale) {\n              an_array[i].setHeight(hash[key]);\n            } else if (!(has_translate && (key == 'y' || key == 'x'))) {\n              an_array[i].setAttribute(key, value);\n            }\n\n            if (key == 'y' && an_array[i].hasAttribute('d')) {\n              var curr_path = an_array[i].getAttribute('d');\n              var re = /M\\s*([\\d\\.]+) ([\\d\\.]+)/;\n              curr_path = curr_path.replace(re, '');\n\n              if (isNaN(parseInt(value, 10))) {\n                throw \"Error \" + key + \" is \" + hash[key];\n              }\n\n              an_array[i].setAttribute('d', 'M0 ' + parseInt(value, 10) + ' ' + curr_path);\n            }\n\n            if (key == 'y' && an_array[i].hasAttribute('cy')) {\n              an_array[i].setAttribute('cy', hash[key]);\n            }\n\n            if (key == 'y' && an_array[i].hasAttribute('transform')) {\n              curr_transform = an_array[i].getAttribute('transform');\n              curr_x = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)?\\)/.exec(an_array[i].getAttribute('transform'));\n\n              if (curr_x === null) {\n                continue;\n              }\n\n              curr_x = curr_x[1];\n              curr_transform = curr_transform.replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)?\\)/, 'translate(' + curr_x + ',' + value + ')');\n              an_array[i].setAttribute('transform', curr_transform);\n            }\n\n            if (key == 'x' && an_array[i].hasAttribute('transform')) {\n              curr_transform = an_array[i].getAttribute('transform');\n              curr_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(an_array[i].getAttribute('transform'));\n\n              if (curr_y === null) {\n                continue;\n              }\n\n              curr_y = curr_y[2];\n              curr_transform = curr_transform.replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/, 'translate(' + value + ',' + curr_y + ')');\n              an_array[i].setAttribute('transform', curr_transform);\n            }\n\n            if (key == 'text-anchor' && an_array[i].hasAttribute('style')) {\n              an_array[i].style.textAnchor = hash[key];\n            }\n\n            ;\n          }\n        }\n      }\n    };\n\n    an_array.hide = function () {\n      this.attr({\n        'visibility': 'hidden'\n      });\n    };\n\n    an_array.show = function () {\n      this.attr({\n        'visibility': 'visible'\n      });\n    };\n\n    an_array.refresh_zoom = function () {\n      for (var i = 0; i < an_array.length; i++) {\n        if (Array.isArray(an_array[i])) {\n          continue;\n        }\n\n        if (an_array[i].zoom_level && an_array[i].zoom_level == 'text') {\n          if (an_array[i].ownerSVGElement && an_array[i].ownerSVGElement.zoom > 3.5) {\n            an_array[i].setAttribute('display', 'inline');\n            an_array[i].setAttribute('opacity', 1);\n          } else {\n            an_array[i].setAttribute('display', 'none');\n          }\n        }\n\n        if (an_array[i].zoom_level && an_array[i].zoom_level == 'summary') {\n          if (an_array[i].ownerSVGElement && an_array[i].ownerSVGElement.zoom <= 3.5) {\n            an_array[i].setAttribute('display', 'inline');\n            an_array[i].setAttribute('opacity', 1);\n          } else {\n            an_array[i].setAttribute('display', 'none');\n          }\n        }\n      }\n    };\n\n    return an_array;\n  }\n\n  var anim_clock_funcs = null,\n      in_anim = false;\n  var anim_clock = null;\n  var rate = 75;\n  var new_rate = null;\n\n  var setup_anim_clocks = function setup_anim_clocks() {\n    if (anim_clock_funcs === null) {\n      anim_clock_funcs = [];\n    } else {\n      anim_clock_funcs.forEach(function (func) {\n        func._last_step = null;\n      });\n      clearInterval(anim_clock);\n    }\n\n    if (!in_anim) {\n      extended_elements.forEach(function (canv) {\n        _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(canv, '_anim_begin');\n      });\n      in_anim = true;\n    }\n\n    var start = null;\n    anim_clock = setInterval(function () {\n      if (!anim_clock_funcs || anim_clock_funcs.length === 0) {\n        clearInterval(anim_clock);\n        anim_clock = null;\n        anim_clock_funcs = null;\n        in_anim = false;\n        extended_elements.forEach(function (canv) {\n          _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(canv, '_anim_end');\n        });\n        return;\n      }\n\n      var suspended_ids = [];\n      extended_elements.forEach(function (canv) {\n        suspended_ids.push(canv.suspendRedraw(5000));\n      });\n      var tic = new Date().getTime();\n\n      if (!start) {\n        start = new Date().getTime();\n      }\n\n      for (var i = 0; i < (anim_clock_funcs || []).length; i++) {\n        var end = new Date().getTime();\n        var step_id = parseInt((end - start) / rate, 10);\n\n        if (new_rate === null && step_id - anim_clock_funcs[i]._last_step > 2) {\n          new_rate = Math.round(1.6 * rate);\n        }\n\n        anim_clock_funcs[i].apply(null, [step_id - (anim_clock_funcs[i]._last_step || step_id)]);\n\n        if (anim_clock_funcs && anim_clock_funcs[i]) {\n          anim_clock_funcs[i]._last_step = step_id;\n        }\n      }\n\n      var toc = new Date().getTime();\n      extended_elements.forEach(function (canv) {\n        canv.unsuspendRedraw(suspended_ids.shift());\n      });\n      var actual_speed = toc - tic;\n\n      if (actual_speed < rate && new_rate === null && actual_speed >= 1) {\n        rate = Math.round(1.5 * (toc - tic));\n        setup_anim_clocks();\n      } else if (new_rate !== null && new_rate != rate) {\n        rate = new_rate;\n        setup_anim_clocks();\n      }\n    }, rate);\n  };\n\n  var scale_re = /scale\\((-?\\d+\\.?\\d*)\\)/;\n\n  var setHeight = function setHeight(height) {\n    var curr_transform = this.getAttribute('transform').toString();\n    var curr_scale = scale_re.exec(curr_transform);\n    var curr_height = parseFloat(this.getAttribute('height') || 1);\n    var new_scale = 1;\n\n    if (curr_scale === null) {\n      curr_transform += ' scale(1) ';\n      curr_scale = 1;\n    } else {\n      curr_scale = parseFloat(curr_scale[1]);\n    }\n\n    new_scale = parseFloat(height) / curr_height * curr_scale;\n    curr_transform = curr_transform.replace(scale_re, 'scale(' + new_scale + ')');\n    this.setAttribute('transform', curr_transform);\n    this.setAttribute('height', height);\n    return new_scale;\n  };\n\n  return function (canvas) {\n    var RS = canvas.RS || DEFAULT_RS;\n    canvas.RS = RS;\n    canvas.font_order = 'Helvetica, Verdana, Arial, Sans-serif';\n    extended_elements.push(canvas);\n\n    canvas.makeEl = function (name, attributes) {\n      var result = canvas.ownerDocument.createElementNS(svgns, name);\n\n      for (var attribute in attributes) {\n        if (attributes.hasOwnProperty(attribute)) {\n          result.setAttribute(attribute, attributes[attribute]);\n        }\n      }\n\n      return result;\n    };\n\n    canvas.make_gradient = function (id, x2, y2, stops, opacities) {\n      var gradient = this.makeEl('linearGradient', {\n        'id': id,\n        'x1': '0%',\n        'x2': x2,\n        'y1': '0%',\n        'y2': y2\n      });\n      var total_stops = stops.length;\n\n      while (stops.length > 0) {\n        var stop_id = Math.round((total_stops - stops.length) / total_stops * 100);\n        var stop = stops.shift();\n        var opacity = opacities.shift();\n        gradient.appendChild(this.makeEl('stop', {\n          'offset': stop_id + '%',\n          'style': 'stop-color:' + stop + ';stop-opacity:' + opacity\n        }));\n      }\n\n      return gradient;\n    };\n\n    canvas.path = function (pathdesc) {\n      var a_path = document.createElementNS(svgns, 'path');\n      a_path.setAttribute('d', pathdesc);\n      a_path.setAttribute('stroke', '#000000');\n      a_path.setAttribute('stroke-width', '1');\n      this.appendChild(a_path);\n      return a_path;\n    };\n\n    canvas.poly = function (points) {\n      var a_poly = document.createElementNS(svgns, 'polygon');\n      a_poly.setAttribute('points', points);\n      this.appendChild(a_poly);\n      return a_poly;\n    };\n\n    canvas.circle = function (x, y, radius) {\n      var a_circle = document.createElementNS(svgns, 'circle');\n      a_circle.setAttribute('cx', typeof x == 'string' ? x : x * RS);\n      a_circle.setAttribute('cy', typeof y == 'string' ? y : y * RS);\n      a_circle.setAttribute('r', typeof radius == 'string' ? radius : radius * RS);\n\n      a_circle.move = function (new_x) {\n        a_circle.setAttribute('cx', new_x * RS);\n      };\n\n      this.appendChild(a_circle);\n      return a_circle;\n    };\n\n    canvas.group = function () {\n      var a_g = document.createElementNS(svgns, 'g');\n      this.appendChild(a_g);\n\n      a_g.push = function (new_el) {\n        a_g.appendChild(new_el);\n      };\n\n      return a_g;\n    };\n\n    canvas.clipPath = function () {\n      var el = document.createElementNS(svgns, 'clipPath');\n      this.appendChild(el);\n\n      el.push = function (new_el) {\n        el.appendChild(new_el);\n      };\n\n      return el;\n    };\n\n    canvas.line = function (x, y, x2, y2) {\n      var a_line = document.createElementNS(svgns, 'line');\n      a_line.setAttribute('x1', typeof x == 'string' ? x : x * RS);\n      a_line.setAttribute('y1', typeof y == 'string' ? y : y * RS);\n      a_line.setAttribute('x2', typeof x2 == 'string' ? x2 : x2 * RS);\n      a_line.setAttribute('y2', typeof y2 == 'string' ? y2 : y2 * RS);\n      this.appendChild(a_line);\n      return a_line;\n    };\n\n    canvas.rect = function (x, y, width, height, opts) {\n      if (!opts) {\n        opts = {};\n      }\n\n      var a_rect = document.createElementNS(svgns, 'rect');\n      a_rect.setAttribute('x', typeof x == 'string' ? x : x * RS);\n      a_rect.setAttribute('y', typeof y == 'string' ? y : y * RS);\n      a_rect.setAttribute('width', typeof width == 'string' ? width : width * RS);\n      a_rect.setAttribute('height', typeof height == 'string' ? height : height * RS);\n      a_rect.setAttribute('stroke', '#000000');\n      this.appendChild(a_rect);\n\n      if (typeof opts.offset !== \"undefined\") {\n        a_rect.offset = opts.offset;\n        a_rect.setAttribute('transform', 'translate(' + a_rect.getAttribute('x') + ',' + a_rect.getAttribute('y') + ')');\n        a_rect.setAttribute('x', '0');\n        a_rect.setAttribute('y', a_rect.offset * RS);\n      }\n\n      a_rect.move = function (new_x, new_width) {\n        if (typeof this.offset !== \"undefined\" && this.getAttribute('transform')) {\n          var transform_attr = this.getAttribute('transform');\n          var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n\n          if (matches[1]) {\n            this.setAttribute('transform', 'translate(' + new_x * RS + ',' + matches[1] + ')');\n          }\n\n          this.setAttribute('width', new_width * RS);\n        } else {\n          this.setAttribute('x', new_x * RS);\n          this.setAttribute('width', new_width * RS);\n        }\n      };\n\n      return a_rect;\n    };\n\n    canvas.roundRect = function (x, y, width, height, r, opts) {\n      var a_rect = this.rect(x, y, width, height, opts);\n\n      if (typeof r != 'object' || !r.x) {\n        r = {\n          'x': r,\n          'y': r\n        };\n      }\n\n      a_rect.setAttribute('rx', r.x * RS);\n      a_rect.setAttribute('ry', r.y * RS);\n      return a_rect;\n    };\n\n    canvas.ellipticalRect = function (x, y, width, height) {\n      return this.roundRect(x, y, width, height, {\n        'x': 0.25 * width,\n        'y': 0.5 * height\n      });\n    };\n\n    canvas.pentagon = function (x, y, width, height, rotate) {\n      return this.nagon(x, y, width, height, 5, rotate);\n    };\n\n    canvas.hexagon = function (x, y, width, height, rotate) {\n      return this.nagon(x, y, width, height, 6, rotate);\n    };\n\n    var shape_set_attribute = function shape_set_attribute(attr, val) {\n      this.constructor.prototype.setAttribute.call(this, attr, val);\n\n      if (attr == 'height' || attr == 'width' || attr == 'x' || attr == 'y') {\n        this.redraw(Math.floor(parseFloat(this.getAttribute('height'))));\n      }\n    };\n\n    canvas.nagon = function (x, y, width, height, n, rotate) {\n      var shape = this.poly(\"\"); // shape.setAttribute('transform','translate('+(x*RS)+','+(RS*y)+')');\n\n      shape.setAttribute('x', x * RS);\n      shape.setAttribute('y', y * RS);\n      shape.setAttribute('width', width * RS);\n\n      shape.redraw = function (hght) {\n        if (hght) {\n          this.last_height = hght;\n        } else {\n          hght = this.last_height;\n        }\n\n        var a = 0.5 * Math.floor(parseFloat(shape.getAttribute('width')));\n        var b = 0.5 * hght;\n        var points = [];\n        var min_x = null;\n        var max_x = null;\n\n        for (var i = 0; i < n; i++) {\n          var angle = rotate / 360 * 2 * Math.PI + 2 / n * Math.PI * i;\n          var a_x = parseInt(a + a * Math.cos(angle));\n          var a_y = parseInt(b + b * Math.sin(angle));\n          points.push([a_x, a_y]);\n\n          if (min_x === null || a_x < min_x) {\n            min_x = a_x;\n          }\n\n          if (max_x === null || a_x > max_x) {\n            max_x = a_x;\n          }\n        }\n\n        var x_pos = Math.floor(parseFloat(shape.getAttribute('x')));\n        var y_pos = Math.floor(parseFloat(shape.getAttribute('y')));\n        points.map(function (points) {\n          if (points[0] == min_x) {\n            points[0] = 0;\n          }\n\n          if (points[0] == max_x) {\n            points[0] = a * 2;\n          }\n\n          points[0] += x_pos;\n          points[1] = y_pos + 0.5 * hght * (points[1] / b);\n          return points.join(\",\");\n        });\n        this.setAttribute('points', points.join(\" \"));\n      };\n\n      shape.setHeight = shape.redraw;\n\n      shape.move = function (new_x, new_width) {\n        var curr_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(this.getAttribute('transform'));\n\n        if (curr_y === null) {\n          return;\n        }\n\n        curr_y = curr_y[2];\n        var curr_transform = this.getAttribute('transform').replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/, 'translate(' + new_x * RS + ',' + curr_y + ')');\n        this.setAttribute('transform', curr_transform);\n        a = 0.5 * new_width * RS;\n      };\n\n      shape.setAttribute = shape_set_attribute;\n      shape.redraw(height * RS);\n      return shape;\n    };\n\n    canvas.use = function (ref, x, y, width, height) {\n      var a_use = document.createElementNS(svgns, 'use');\n      a_use.setAttribute('x', typeof x == 'string' ? x : x * RS);\n      a_use.setAttribute('y', typeof y == 'string' ? y : y * RS);\n      a_use.setAttribute('width', typeof width == 'string' ? width : width * RS);\n      a_use.setAttribute('height', typeof height == 'string' ? height : height * RS);\n      a_use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', ref);\n      this.appendChild(a_use);\n      return a_use;\n    };\n\n    canvas.a = function (href) {\n      var a_anchor = document.createElementNS(svgns, 'a');\n      a_anchor.setAttribute('target', '_new');\n      a_anchor.setAttributeNS('http://www.w3.org/1999/xlink', 'href', href);\n      this.appendChild(a_anchor);\n      return a_anchor;\n    };\n\n    canvas.button = function (x, y, width, height, text) {\n      var fo = document.createElementNS(svgns, 'foreignObject');\n      fo.setAttribute('x', x);\n      fo.setAttribute('y', y);\n      fo.setAttribute('width', x + width);\n      fo.setAttribute('height', y + height);\n\n      if (!fo.style) {\n        fo.setAttribute('style', 'position: absolute;');\n      } else {\n        fo.style.position = 'absolute';\n      }\n\n      this.appendChild(fo);\n      var button = document.createElement('button');\n      button.style.display = 'block';\n      button.textContent = text;\n      fo.appendChild(button);\n      return button;\n    };\n\n    canvas.svgbutton = function (x, y, width, height, txt) {\n      var button = this.group();\n      var back = this.rect(x, y, width, height);\n      back.setAttribute('rx', '10');\n      back.setAttribute('ry', '10');\n      back.setAttribute('stroke', '#ffffff');\n      back.setAttribute('stroke-width', '2');\n      back.setAttribute('fill', 'url(#simple_gradient)');\n      x = back.x.baseVal.value;\n      y = back.y.baseVal.value;\n      width = back.width.baseVal.value;\n      height = back.height.baseVal.value;\n      var text = this.text(x + width / 2, y + height / 3, txt);\n      text.setAttribute('text-anchor', 'middle');\n      text.firstChild.setAttribute('dy', '1.5ex');\n      text.setAttribute('font-size', 0.5 * height);\n      text.setAttribute('fill', '#ffffff');\n      button.push(back);\n      button.push(text);\n      button.background_element = back;\n      button.text_element = text;\n      button.setAttribute('cursor', 'pointer');\n\n      var button_trigger = function button_trigger() {\n        back.setAttribute('fill', '#999999');\n        back.setAttribute('stroke', '#000000');\n      };\n\n      button.addEventListener('mousedown', button_trigger, false);\n      button.addEventListener('touchstart', button_trigger, false);\n\n      var button_reset = function button_reset() {\n        back.setAttribute('stroke', '#ffffff');\n        back.setAttribute('fill', 'url(#simple_gradient)');\n      };\n\n      button.addEventListener('mouseup', button_reset, false);\n      button.addEventListener('mouseout', button_reset, false);\n      button.addEventListener('touchend', button_reset, false);\n      return button;\n    };\n\n    canvas.callout = function (x, y, content, opts) {\n      var callout = this.group();\n      var back = this.roundRect(-0.5 * (opts.width + 4), 20, opts.width + 4, opts.height + 4, 4);\n      back.setAttribute('fill', '#000000');\n      var pres_box = this.roundRect(-0.5 * (opts.width + 1), 22, opts.width + 1, opts.height, 4);\n      pres_box.setAttribute('fill', '#eeeeee');\n      callout.push(back);\n      callout.push(pres_box);\n      var poly = this.poly('0,500 500,1000 -500,1000');\n      poly.setAttribute('fill', '#000000');\n      callout.push(poly);\n      var fo = document.createElementNS(svgns, 'foreignObject');\n      fo.setAttribute('x', -0.5 * (opts.width + 1) * RS);\n      fo.setAttribute('y', 22 * RS);\n      fo.setAttribute('width', opts.width * RS);\n      fo.setAttribute('height', opts.height * RS);\n      callout.push(fo);\n      var html = document.createElementNS('http://www.w3.org/1999/xhtml', 'html');\n      html.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n      var body = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');\n      body.style.fontSize = (opts['font-size'] || 15) * RS + 'px';\n      body.style.margin = 5 * RS + 'px';\n      body.style.height = opts.height * RS * 10 + 'px';\n      html.appendChild(body);\n      body.appendChild(content);\n      fo.appendChild(html);\n      var scale = opts.height / 15;\n      callout.setAttribute('transform', 'translate(' + x * RS + ',' + (y + 20) * RS + ') scale(' + scale + ')');\n      callout.setHeight = setHeight;\n\n      if (!opts.align) {\n        var currVbox = parseFloat(this.getAttribute('viewBox').split(/\\s+/)[2]);\n\n        if ((x + 10 + 0.5 * opts.width) * RS > currVbox) {\n          opts.align = 'right';\n        }\n\n        if ((x - 0.5 * opts.width) * RS < 0) {\n          opts.align = 'left';\n        }\n      }\n\n      if (opts.align) {\n        var shifter = opts.align == \"right\" ? -0.5 : 0.5;\n        back.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n        pres_box.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n        poly.setAttribute('transform', 'translate(' + 0 * shifter * opts.width * RS + ',0)');\n        poly.setAttribute('points', shifter > 0 ? \"0,500 500,1000 0,1000\" : \"0,500 0,1000 -500,1000\");\n        fo.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n      }\n\n      callout.setAttribute('height', opts.height * RS);\n      return callout;\n    };\n\n    canvas.growingMarker = function (x, y, symbol, opts) {\n      var container = document.createElementNS(svgns, 'svg');\n\n      if (!opts.stretch && !(Array.isArray && Array.isArray(opts.content))) {\n        container.setAttribute('viewBox', '-50 -100 200 250');\n        container.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n      } else {\n        container = this.group();\n      }\n\n      container.setAttribute('x', x);\n      container.setAttribute('y', y);\n      var the_marker = this.marker(50 / RS, 50 / RS, 50 / RS, symbol, opts);\n      container.appendChild(the_marker);\n      container.contentElement = the_marker.contentElement;\n      var result = this.group();\n      var positioning_group = this.group();\n      result.appendChild(positioning_group);\n      positioning_group.appendChild(container);\n\n      if (!opts.stretch && !(Array.isArray && Array.isArray(opts.content))) {\n        container.setAttribute('width', '200');\n        container.setAttribute('height', '250');\n      }\n\n      if (opts.angle) {\n        result.angle = opts.angle;\n      } // var rect = document.createElementNS(svgns,'rect');\n      // rect.setAttribute('stroke','#f00');\n      // rect.setAttribute('stroke-width','10');\n      // rect.setAttribute('x','-50');\n      // rect.setAttribute('y','-100');\n      // rect.setAttribute('width','100%');\n      // rect.setAttribute('height','100%');\n      // rect.setAttribute('fill','none');\n      // container.appendChild(rect);\n      // var rect = document.createElementNS(svgns,'rect');\n      // rect.setAttribute('stroke','#0f0');\n      // rect.setAttribute('stroke-width','10');\n      // rect.setAttribute('x','50');\n      // rect.setAttribute('y','25');\n      // rect.setAttribute('width','50%');\n      // rect.setAttribute('height','50%');\n      // rect.setAttribute('fill','none');\n      // container.appendChild(rect);\n\n\n      result.setAttribute('height', '250');\n      result.setAttribute('transform', 'scale(1)');\n\n      result.setHeight = function (height) {\n        // this.setAttribute('height',height);\n        var scale_val = setHeight.call(this, height);\n        this.setAttribute('height', height);\n        var top_offset = this.offset || 0;\n\n        if (!this.angle) {\n          this.angle = 0;\n        }\n\n        this.firstChild.setAttribute('transform', 'translate(-100,' + top_offset * RS + ') rotate(' + this.angle + ',100,0)');\n      };\n\n      result.container = container;\n      return result;\n    };\n\n    canvas.marker = function (cx, cy, r, symbol, opts) {\n      var units = 0;\n\n      if (typeof cx == 'string') {\n        var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n        units = parts[2];\n        cx = parseFloat(parts[1]);\n        parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n        cy = parseFloat(parts[1]);\n        parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n        r = parseFloat(parts[1]);\n      }\n\n      var dim = {\n        CX: cx + units,\n        CY: cy + units,\n        R: r + units,\n        MIN_X: cx - r + units,\n        MAX_X: cx + r + units,\n        MIN_Y: cy - r + units,\n        MAX_Y: cy + r + units,\n        MID_X1: cx - r / 2 + units,\n        MID_X2: cx + r / 2 + units,\n        MID_Y1: cy - r / 2 + units,\n        MID_Y2: cy + r / 2 + units\n      };\n      var marker = this.group();\n\n      if (!opts) {\n        opts = {};\n      }\n\n      var fill_color = opts && opts.border ? opts.border : 'rgb(0,0,0)';\n\n      if (!opts.bare_element) {\n        if (opts.width) {\n          marker.push(this.roundRect(-0.5 * opts.width - 1, -0.5, opts.width + 2, 3, 1.5));\n          marker.lastChild.setAttribute('fill', fill_color);\n        } else {\n          marker.push(this.circle(0, -0.5 * r, r));\n          marker.lastChild.setAttribute('fill', fill_color);\n          marker.lastChild.setAttribute('border', 'true');\n          marker.push(this.circle(0, 1.5 * r, r));\n          marker.lastChild.setAttribute('fill', fill_color);\n          marker.lastChild.setAttribute('border', 'true');\n          var arrow = this.poly(-0.9 * r * RS + ',' + 0 * r * RS + ' 0,' + -2.5 * r * RS + ' ' + 0.9 * r * RS + ',' + 0 * r * RS);\n          arrow.setAttribute('fill', fill_color);\n          arrow.setAttribute('stroke-width', '0');\n          marker.push(arrow);\n          marker.lastChild.setAttribute('border', 'true');\n        }\n      }\n\n      marker.setAttribute('transform', 'translate(' + cx * RS + ',' + 0.5 * cy * RS + ') scale(1)');\n      marker.setHeight = setHeight;\n      marker.setAttribute('height', dim.R * RS);\n\n      if (typeof symbol == 'string') {\n        if (symbol.match(/^(:?https?:)?\\/?.*#/)) {\n          marker.contentElement = this.use(symbol, -r, 0, 2 * r, 2 * r);\n          marker.contentElement.setAttribute('content', 'true');\n        } else {\n          marker.contentElement = this.text_circle(0, 0, 2 * r, symbol, opts);\n          marker.contentElement.firstChild.setAttribute('content', 'true');\n        }\n\n        marker.push(marker.contentElement);\n      } else if (Array.isArray && Array.isArray(symbol)) {\n        marker.contentElement = this.group();\n        var phase = Math.PI / symbol.length; // phase -= (Math.PI / 2);\n\n        var needs_stretch = opts.stretch;\n        var nrow = 2;\n        symbol.forEach(function (symb, i) {\n          var x_pos = i % nrow;\n          var y_pos = 2 + Math.floor(i / nrow);\n          x_pos *= 2 * r;\n          y_pos *= 2 * r;\n          x_pos -= 0.5 * r;\n          var rotate_amount = 180 * i / symbol.length;\n          rotate_amount -= 0 * 90;\n          rotate_amount = 0;\n\n          if (needs_stretch) {\n            if (rotate_amount >= -90 && rotate_amount <= 90) {\n              opts.stretch = 'right';\n            } else {\n              opts.stretch = 'left';\n            }\n\n            if (rotate_amount % 90 == 0 && rotate_amount != 90 && rotate_amount != -90) {\n              if (rotate_amount == 0) {\n                opts.stretch = 'right';\n              }\n\n              if (symbol.length == 1) {\n                opts.stretch = true;\n              }\n            }\n          }\n\n          if (rotate_amount > 90 && rotate_amount < 270) {\n            rotate_amount = 180 + rotate_amount;\n          }\n\n          let new_el = null;\n\n          if (symb.match(/^(:?https?:)?\\/?.*#/)) {\n            new_el = canvas.use(symb, (x_pos - 0.5) * r, (y_pos - 0.5) * r, 2 * r, 2 * r);\n            new_el.setAttribute('pointer-events', 'none');\n            new_el.setAttribute('content', 'true');\n          } else {\n            var opts_copy = JSON.parse(JSON.stringify(opts));\n            opts_copy.no_tracer = true;\n            delete opts_copy.offset;\n            delete opts_copy.height;\n            new_el = canvas.text_circle(x_pos * r, y_pos * r, 1.75 * r, symb, opts_copy);\n            new_el.firstChild.setAttribute('content', 'true');\n          }\n\n          var curr_transform = new_el.getAttribute('transform') || '';\n          curr_transform = curr_transform + ' rotate(' + rotate_amount + ',' + 0 * r * RS + ',' + y_pos * r * RS + ')';\n          new_el.setAttribute('transform', curr_transform);\n          marker.contentElement.push(new_el);\n        });\n        marker.push(marker.contentElement);\n      } else {\n        marker.contentElement = this.group();\n\n        if (!opts.bare_element) {\n          marker.contentElement.push(this.text_circle(0, 0.5 * r, 1.75 * r, \"\", opts));\n          marker.contentElement.lastChild.firstChild.setAttribute('content', 'true');\n        }\n\n        if (symbol) {\n          if (!opts.bare_element) {\n            symbol.setAttribute('transform', 'translate(0,' + 0.5 * r * RS + ')');\n          }\n\n          symbol.setAttribute('content', 'true');\n          marker.contentElement.push(symbol);\n        }\n\n        marker.push(marker.contentElement);\n      }\n\n      marker.setAttribute('marker', 'true');\n      return marker;\n    };\n\n    canvas.text_circle = function (cx, cy, r, txt, opts) {\n      if (!opts) {\n        opts = {};\n      }\n\n      var units = 0;\n\n      if (typeof cx == 'string') {\n        var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n        units = parts[2];\n        cx = parseFloat(parts[1]);\n        parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n        cy = parseFloat(parts[1]);\n        parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n        r = parseFloat(parts[1]);\n      }\n\n      var dim = {\n        CX: cx + units,\n        CY: cy + units,\n        R: r + units,\n        MIN_X: cx - r + units,\n        MAX_X: cx + r + units,\n        MIN_Y: cy - r + units,\n        MAX_Y: cy + r + units,\n        MID_X1: cx - r / 2 + units,\n        MID_X2: cx + r / 2 + units,\n        MID_Y1: cy - r / 2 + units,\n        MID_Y2: cy + r / 2 + units\n      };\n      var marker_group = this.group();\n      var text = this.text(0, dim.CY, txt);\n      text.setAttribute('font-size', 10 * RS);\n      text.setAttribute('font-weight', opts.weight || 'bolder');\n      text.setAttribute('fill', opts.text_fill || '#ffffff');\n      text.setAttribute('style', 'font-family: sans-serif; text-anchor: middle;');\n      text.firstChild.setAttribute('dy', '0.35em');\n      text.setAttribute('text-anchor', 'middle');\n      var back;\n\n      if (!opts.stretch) {\n        back = this.circle(0, dim.CY, 9 / 10 * dim.R);\n      } else {\n        var text_width = 1.2 * (opts.font_size || r) * text.getBBox().width / (10 * RS);\n        var text_height = 3 / 2 * dim.R;\n        var left_pos = -0.5 * text_width;\n\n        if (text_width > 3 * dim.R) {\n          left_pos = -0.5 * text_width;\n\n          if (opts.stretch == 'right') {\n            left_pos = -0.1 * text_width;\n          }\n\n          if (opts.stretch == 'left') {\n            left_pos = -0.9 * text_width;\n          }\n        } else {\n          text_width = 3 * dim.R;\n          left_pos = -0.5 * text_width;\n        }\n\n        text.setAttribute('x', (0.5 * text_width + left_pos) * RS);\n        back = this.roundRect(left_pos, dim.CY - 0.5 * text_height, text_width, text_height, {\n          'x': 0.5 * dim.R,\n          'y': 0.5 * text_height\n        }, {});\n      }\n\n      text.setAttribute('font-size', (opts.font_size || r) * RS);\n      back.setAttribute('fill', opts.fill || 'url(#simple_gradient)');\n      window.matchMedia('print').addListener(function (match) {\n        back.setAttribute('fill', match.matches ? '#aaaaaa' : opts.fill || 'url(#simple_gradient)');\n      });\n      back.setAttribute('stroke', opts.border || '#000000');\n      back.setAttribute('stroke-width', r / 10 * RS);\n      marker_group.push(back);\n      marker_group.push(text);\n      marker_group.setAttribute('transform', 'translate(' + dim.CX * RS + ', 1) scale(1)');\n      marker_group.setAttribute('height', dim.R / 2 * RS);\n      marker_group.setHeight = setHeight;\n      return marker_group;\n    };\n\n    canvas.crossed_circle = function (cx, cy, r) {\n      var units = 0;\n\n      if (typeof cx == 'string') {\n        var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n        units = parts[2];\n        cx = parseFloat(parts[1]);\n        parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n        cy = parseFloat(parts[1]);\n        parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n        r = parseFloat(parts[1]);\n      }\n\n      var dim = {\n        CX: cx + units,\n        CY: cy + units,\n        R: r + units,\n        MIN_X: cx - r + units,\n        MAX_X: cx + r + units,\n        MIN_Y: cy - r + units,\n        MAX_Y: cy + r + units,\n        MID_X1: cx - r / 2 + units,\n        MID_X2: cx + r / 2 + units,\n        MID_Y1: cy - r / 2 + units,\n        MID_Y2: cy + r / 2 + units\n      };\n      var close_group = this.group();\n      var close_button = this.circle(dim.CX, dim.CY, dim.R);\n      close_button.setAttribute('fill', '#000000');\n      close_button.setAttribute('stroke', '#ffffff');\n      close_button.setAttribute('stroke-width', '2');\n      close_group._button = close_button;\n      close_group.push(close_button);\n      var a_line = this.line(dim.MID_X1, dim.MID_Y1, dim.MID_X2, dim.MID_Y2);\n      a_line.setAttribute('stroke', '#ffffff');\n      a_line.setAttribute('stroke-width', '2');\n      close_group.push(a_line);\n      var first_line = a_line;\n      var a_line = this.line(dim.MID_X1, dim.MID_Y2, dim.MID_X2, dim.MID_Y1);\n      a_line.setAttribute('stroke', '#ffffff');\n      a_line.setAttribute('stroke-width', '2');\n      close_group.push(a_line);\n\n      close_group.move = function (cx, cy) {\n        close_button.setAttribute('cx', cx);\n        dim.MID_X1 = cx - r / 2;\n        dim.MID_X2 = cx + r / 2;\n        dim.MID_Y1 = cy - r / 2;\n        dim.MID_Y2 = cy + r / 2;\n        first_line.setAttribute('x1', dim.MID_X1);\n        first_line.setAttribute('y1', dim.MID_Y1);\n        first_line.setAttribute('x2', dim.MID_X2);\n        first_line.setAttribute('y2', dim.MID_Y2);\n        a_line.setAttribute('x1', dim.MID_X1);\n        a_line.setAttribute('y1', dim.MID_Y2);\n        a_line.setAttribute('x2', dim.MID_X2);\n        a_line.setAttribute('y2', dim.MID_Y1);\n      };\n\n      return close_group;\n    };\n\n    canvas.text = function (x, y, text) {\n      var a_text = document.createElementNS(svgns, 'text');\n      var a_tspan = document.createElementNS(svgns, 'tspan');\n\n      if (typeof text != 'string') {\n        a_text.appendChild(text);\n      } else {\n        a_text.appendChild(a_tspan);\n        a_tspan.textContent = text;\n        a_tspan.setAttribute('dy', '0');\n      }\n\n      a_text.style.fontFamily = this.font_order || 'Helvetica, Verdana, Arial, Sans-serif';\n      a_text.setAttribute('x', typeof x == 'string' ? x : x * RS);\n      a_text.setAttribute('y', typeof y == 'string' ? y : y * RS);\n\n      a_text.move = function (new_x, new_width) {\n        if (typeof this.offset !== \"undefined\" && this.getAttribute('transform')) {\n          var transform_attr = this.getAttribute('transform');\n          var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n\n          if (matches[1]) {\n            this.setAttribute('transform', 'translate(' + new_x * RS + ',' + matches[1] + ')');\n          }\n        } else {\n          this.setAttribute('x', new_x * RS);\n        }\n      };\n\n      this.appendChild(a_text);\n      return a_text;\n    };\n\n    canvas.plus = function (x, y, height) {\n      var g = this.group();\n      g.appendChild(this.makeEl('rect', {\n        'x': Math.round(0.4 * height * RS).toString(),\n        'y': Math.round(0.1 * height * RS).toString(),\n        'stroke-width': '1',\n        'width': Math.round(0.2 * height * RS).toString(),\n        'height': Math.round(0.8 * height * RS).toString(),\n        'stroke': '#ffffff',\n        'fill': '#ffffff'\n      }));\n      g.appendChild(this.makeEl('rect', {\n        'x': Math.round(0.1 * height * RS).toString(),\n        'y': Math.round(0.4 * height * RS).toString(),\n        'stroke-width': '1',\n        'width': Math.round(0.8 * height * RS).toString(),\n        'height': Math.round(0.2 * height * RS).toString(),\n        'stroke': '#ffffff',\n        'fill': '#ffffff'\n      }));\n      g.setAttribute('transform', 'translate(' + x * RS + ',' + y * RS + ')');\n      return g;\n    };\n\n    canvas.minus = function (x, y, height) {\n      var g = this.group();\n      g.appendChild(this.makeEl('rect', {\n        'x': Math.round(0.1 * height * RS).toString(),\n        'y': Math.round(0.4 * height * RS).toString(),\n        'stroke-width': '1',\n        'width': Math.round(0.8 * height * RS).toString(),\n        'height': Math.round(0.2 * height * RS).toString(),\n        'stroke': '#ffffff',\n        'fill': '#ffffff'\n      }));\n      g.setAttribute('transform', 'translate(' + x * RS + ',' + y * RS + ')');\n      return g;\n    }; // Calculate the bounding box of an element with respect to its parent element\n    // Thanks to http://stackoverflow.com/questions/10623809/get-bounding-box-of-element-accounting-for-its-transform\n\n\n    canvas.transformedBoundingBox = function (el) {\n      var bb = el.getBBox(),\n          svg = el.ownerSVGElement,\n          m = el.parentNode.getScreenCTM().inverse().multiply(el.getScreenCTM()).inverse(); // Create an array of all four points for the original bounding box\n\n      var pts = [svg.createSVGPoint(), svg.createSVGPoint(), svg.createSVGPoint(), svg.createSVGPoint()];\n      pts[0].x = bb.x;\n      pts[0].y = bb.y;\n      pts[1].x = bb.x + bb.width;\n      pts[1].y = bb.y;\n      pts[2].x = bb.x + bb.width;\n      pts[2].y = bb.y + bb.height;\n      pts[3].x = bb.x;\n      pts[3].y = bb.y + bb.height; // Transform each into the space of the parent,\n      // and calculate the min/max points from that.\n\n      var xMin = Infinity,\n          xMax = -Infinity,\n          yMin = Infinity,\n          yMax = -Infinity;\n      pts.forEach(function (pt) {\n        pt = pt.matrixTransform(m);\n        xMin = Math.min(xMin, pt.x);\n        xMax = Math.max(xMax, pt.x);\n        yMin = Math.min(yMin, pt.y);\n        yMax = Math.max(yMax, pt.y);\n      }); // Update the bounding box with the new values\n\n      try {\n        bb.x = xMin;\n        bb.width = xMax - xMin;\n        bb.y = yMin;\n        bb.height = yMax - yMin;\n      } catch (e) {\n        bb = {\n          'x': xMin,\n          'y': yMin,\n          'width': xMax - xMin,\n          'height': yMax - yMin\n        };\n      }\n\n      return bb;\n    };\n\n    canvas.set = function () {\n      var an_array = [];\n      extend_array(an_array, RS);\n      return an_array;\n    };\n\n    canvas.hide = function () {\n      this.setAttribute('display', 'none');\n    };\n\n    canvas.show = function () {\n      this.setAttribute('display', 'inline');\n    };\n  };\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SVGCanvas);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/SVGCanvas.js\n")},"../gator/js/lib/SequenceRenderer.js":
/*!*******************************************!*\
  !*** ../gator/js/lib/SequenceRenderer.js ***!
  \*******************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MASCP */ \"../gator/js/lib/MASCP.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"../gator/js/bean.js\");\n/**\n * @fileOverview    Read in sequences to be re-rendered in a block that can be easily annotated.\n */\n\n\n/**\n * @class   Reformatter for sequences in html pages. The object retrieves the amino acid sequence from the \n *          given element, and then reformats the display of the sequence so that rendering layers can be\n *          applied to it. \n * @author  hjjoshi\n * @param   {Element} sequenceContainer Container element that the sequence currently is found in, and also \n *                                      the container that data will be re-inserted into.\n */\n\nconst SequenceRenderer = function () {\n  /**\n   *  @lends SequenceRenderer.prototype\n   *  @property   {Array}     trackOrder  The order of tracks on the renderer, an array of layer/group names.\n   */\n  var setupTrackOrder = function setupTrackOrder(renderer) {\n    var renderer_track_order = [];\n    var accessors = {\n      getTrackOrder: function getTrackOrder() {\n        return renderer_track_order;\n      },\n      setTrackOrder: function setTrackOrder(in_order) {\n        var track_order = [];\n        var order = in_order;\n\n        if (!order instanceof Array) {\n          order = [in_order];\n        }\n\n        for (var i = 0; i < order.length; i++) {\n          var a_track = order[i];\n\n          if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(a_track)) {\n            while (track_order.indexOf(a_track) >= 0) {\n              track_order.splice(track_order.indexOf(a_track), 1);\n            }\n\n            track_order.push(a_track);\n          }\n\n          if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(a_track)) {\n            let insert_idx = i + 1;\n            _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(order[i]).eachLayer(function (grp_lay) {\n              while (track_order.indexOf(grp_lay.name) >= 0) {\n                track_order.splice(track_order.indexOf(grp_lay.name), 1);\n              }\n\n              order.splice(insert_idx, 0, grp_lay.name);\n              insert_idx += 1;\n            });\n          }\n        }\n\n        for (i = (renderer_track_order || []).length - 1; i >= 0; i--) {\n          if (track_order.indexOf(renderer_track_order[i]) < 0) {\n            this.hideLayer(renderer_track_order[i]);\n            this.hideGroup(renderer_track_order[i]);\n\n            if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(renderer_track_order[i])) {\n              _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(renderer_track_order[i]), 'removed', [renderer]);\n            }\n\n            if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(renderer_track_order[i])) {\n              _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(renderer_track_order[i]), 'removed', [renderer]);\n            }\n          }\n        }\n\n        renderer_track_order = track_order;\n\n        if (this.refresh) {\n          this.refresh(true);\n        }\n\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(renderer, 'orderChanged', [track_order]);\n      }\n    };\n\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE) {\n      renderer.setTrackOrder = accessors.setTrackOrder;\n    }\n\n    if (typeof Object.defineProperty == 'function' && !_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE8) {\n      Object.defineProperty(renderer, \"trackOrder\", {\n        get: accessors.getTrackOrder,\n        set: accessors.setTrackOrder\n      });\n    }\n  };\n\n  return function (sequenceContainer) {\n    if (!sequenceContainer) {\n      return this;\n    }\n\n    if (typeof sequenceContainer !== 'undefined') {\n      this._container = sequenceContainer;\n\n      if (!this._container.style.position) {\n        this._container.style.position = 'relative';\n      } //        this._container.style.width = '100%';\n\n\n      _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this, 'sequenceChange', function (e) {\n        while (sequenceContainer.firstChild) {\n          sequenceContainer.removeChild(sequenceContainer.firstChild);\n        }\n\n        this._sequence_els.forEach(function (el) {\n          sequenceContainer.appendChild(el);\n        });\n\n        var float_clear = document.createElement('div');\n        float_clear.setAttribute('style', 'clear: both; float: none; height: 0px; width: 100%;');\n        sequenceContainer.appendChild(float_clear);\n        sequenceContainer.style.width = this._sequence_els.length + 'em'; //            this.showRowNumbers();            \n      });\n      this.setSequence(sequenceContainer.textContent || '');\n    }\n\n    setupTrackOrder(this);\n    return this;\n  };\n}();\n/**\n * Event fired when a layer is registered with the global layer registry\n * @name    MASCP.layerRegistered\n * @event\n * @param   {Object}    e\n * @param   {Object}    layer Layer just registered\n */\n\n/**\n * Event fired when a group is registered with the global group registry\n * @name    MASCP.groupRegistered\n * @event\n * @param   {Object}    e\n * @param   {Object}    group Group just registered\n */\n\n/**\n * Event fired when the sequence is changed in a sequence renderer\n * @name    SequenceRenderer#sequenceChange\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Event fired when a result is rendered on this renderer\n * @name    SequenceRenderer#resultsRendered\n * @event\n * @param   {Object}    e\n * @param   {MASCP.Service} reader  Reader that rendered the result.\n */\n\n/**\n * @name    MASCP.Group#visibilityChange\n * @event\n * @param   {Object}    e\n * @param   {Object}    renderer\n * @param   {Boolean}   visibility\n */\n\n/**\n * @name    MASCP.Layer#visibilityChange\n * @event\n * @param   {Object}    e\n * @param   {Object}    renderer\n * @param   {Boolean}   visibility\n */\n\n/**\n *  @lends SequenceRenderer.prototype\n *  @property   {String}  sequence  Sequence to mark up.\n */\n\n\nSequenceRenderer.prototype = {\n  sequence: null\n};\n\nif (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE) {\n  SequenceRenderer.prototype.prototype = document.createElement('div');\n}\n/**\n * Set the sequence for this renderer. Fires the sequenceChange event when the sequence is set.\n * @param {String} sequence Sequence to render\n * @see SequenceRenderer#event:sequenceChange\n */\n\n\nSequenceRenderer.prototype.setSequence = function (sequence) {\n  this.sequence = this._cleanSequence(sequence);\n  var sequence_els = [];\n  var renderer = this;\n\n  if (!this.sequence) {\n    return;\n  }\n\n  var seq_chars = this.sequence.split('');\n\n  for (var i = 0; i < seq_chars.length; i++) {\n    var aa = seq_chars[i];\n\n    if (aa.match(/[A-Za-z]/)) {\n      var span_el = document.createElement('span');\n      span_el.textContent = aa;\n      sequence_els.push(span_el);\n    }\n  }\n\n  sequence_els.forEach(function (el, i) {\n    // if ( (i % 10) == 0 && i > 0 && ((i % 50) != 0)) {\n    //     this.style.margin = '0px 0px 0px 1em';\n    // }\n    // if ( (i % 50) == 0 && i > 0 ) {\n    //     if (MASCP.IE7) {\n    //         sequence_els[i-1].style.styleFloat = 'none';\n    //         sequence_els[i-1].style.width = '1em';\n    //     }\n    //     this.style.clear = 'both';\n    // }\n    el._index = i;\n    el.style.display = 'block';\n    el.style.cssFloat = 'left';\n    el.style.styleFloat = 'left';\n    el.style.height = '1.1em';\n    el.style.position = 'relative';\n    el.addToLayer = SequenceRenderer.addElementToLayer;\n    el.addBoxOverlay = SequenceRenderer.addBoxOverlayToElement;\n    el.addToLayerWithLink = SequenceRenderer.addElementToLayerWithLink;\n    el._renderer = renderer;\n  });\n  this._sequence_els = sequence_els;\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(this, 'sequenceChange');\n};\n/**\n * Color some residues on this residue\n * @param {Array} indexes Indexes to apply the given color to\n * @param {String} color Color to use to highlight the residues\n * @returns ID for the layer that is created\n * @type String\n */\n\n\nSequenceRenderer.prototype.colorResidues = function (indexes, color) {\n  var layer_id = Math.floor(Math.random() * 1000).toString();\n  _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer(layer_id, {\n    'color': color || '#ff0000'\n  });\n  var aas = this.getAminoAcidsByPosition(indexes);\n\n  for (var i = 0; i < aas.length; i++) {\n    aas[i].addToLayer(layer_id);\n  }\n\n  return _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layer_id);\n};\n\nSequenceRenderer.prototype._cleanSequence = function (sequence) {\n  if (!sequence) {\n    return sequence;\n  }\n\n  var cleaned_sequence = sequence;\n  cleaned_sequence = cleaned_sequence.replace(new RegExp(String.fromCharCode(160), \"g\"), '');\n  cleaned_sequence = cleaned_sequence.replace(/[\\n\\t\\s\\d]+/mgi, '');\n  cleaned_sequence = cleaned_sequence.replace(/\\(.*\\)/g, '');\n  return cleaned_sequence;\n};\n/**\n * Retrieve the HTML Elements that contain the amino acids at the given positions. The first amino acid is found at position 1.\n * @param {Array} indexes Indexes to retrieve elements for\n * @returns Elements representing each amino acid at the given positions\n * @type Array\n */\n\n\nSequenceRenderer.prototype.getAminoAcidsByPosition = function (indexes) {\n  var sequence_els = this._sequence_els;\n  return indexes.map(function (index) {\n    if (index < 0) {\n      return null;\n    }\n\n    return sequence_els[index - 1];\n  });\n};\n\nSequenceRenderer.prototype.getAA = function (index) {\n  return this.getAminoAcidsByPosition([index]).shift();\n};\n/**\n * Retrieve the HTML Elements that contain the amino acids contained in the given peptide sequence.\n * @param {String} peptideSequence Peptide sequence used to look up the amino acids\n * @returns Elements representing each amino acid at the given positions\n * @type Array\n */\n\n\nSequenceRenderer.prototype.getAminoAcidsByPeptide = function (peptideSequence) {\n  var start = this.sequence.indexOf(peptideSequence);\n  var results = [];\n\n  if (start < 0) {\n    results.addToLayer = function () {};\n\n    return results;\n  }\n\n  results = results.concat(this._sequence_els.slice(start, start + peptideSequence.length));\n\n  if (results.length) {\n    results.addToLayer = function (layername, fraction, options) {\n      return results[0].addBoxOverlay(layername, results.length, fraction, options);\n    };\n  } else {\n    results.addToLayer = function () {};\n  }\n\n  return results;\n};\n/**\n * Toggle the display of the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\n\n\nSequenceRenderer.prototype.toggleLayer = function (layer, consumeChange) {\n  var layerName = layer;\n\n  if (typeof layer != 'string') {\n    layerName = layer.name;\n  } else {\n    layer = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layer];\n  }\n\n  this._container.classList.toggle(layerName + '_active');\n\n  this._container.classList.toggle(layerName + '_inactive');\n\n  if (!consumeChange) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(layer, 'visibilityChange', [this, this.isLayerActive(layer)]);\n  }\n\n  return this;\n};\n/**\n * Show the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\n\n\nSequenceRenderer.prototype.showLayer = function (lay, consumeChange) {\n  var layer = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(lay);\n\n  if (!layer || layer.disabled) {\n    return;\n  }\n\n  this._container.classList.add(layer.name + '_active');\n\n  this._container.classList.add('active_layer');\n\n  this._container.classList.remove(layer.name + '_inactive');\n\n  if (!consumeChange) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(layer, 'visibilityChange', [this, true]);\n  }\n\n  return this;\n};\n/**\n * Hide the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\n\n\nSequenceRenderer.prototype.hideLayer = function (lay, consumeChange) {\n  var layer = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(lay);\n\n  if (!layer || layer.disabled) {\n    return;\n  }\n\n  this._container.classList.remove(layer.name + '_active');\n\n  this._container.classList.remove('active_layer');\n\n  this._container.classList.add(layer.name + '_inactive');\n\n  if (!consumeChange) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(layer, 'visibilityChange', [this, false]);\n  }\n\n  return this;\n};\n/**\n * Register a layer with this renderer. Actually is a proxy on to the global registry method\n * @see MASCP#registerLayer\n */\n\n\nSequenceRenderer.prototype.registerLayer = function (layer, options) {\n  return _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer(layer, options);\n};\n/**\n * Hide or show a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @param {Boolean} visibility True for visible, false for hidden\n * @see MASCP.Group#event:visibilityChange\n */\n\n\nSequenceRenderer.prototype.setGroupVisibility = function (grp, visibility, consumeChange) {\n  var group = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(grp);\n\n  if (!group) {\n    return;\n  }\n\n  var groupName = group.name;\n  var renderer = this;\n  group.eachLayer(function (layer) {\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(layer) === layer) {\n      // We can skip explicitly setting the visibility of groups here, since\n      // any sub-groups should have a controller.\n      return;\n    }\n\n    if (this.disabled && visibility) {\n      renderer.hideLayer(layer.name);\n      return;\n    }\n\n    if (visibility === true) {\n      renderer.showLayer(layer.name);\n    } else if (visibility === false) {\n      renderer.hideLayer(layer.name);\n    } else {\n      renderer.toggleLayer(layer.name);\n    }\n  });\n\n  if (visibility !== null && !consumeChange) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(group, 'visibilityChange', [renderer, visibility]);\n  }\n};\n/**\n * Hide a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\n\n\nSequenceRenderer.prototype.hideGroup = function (group, consumeChange) {\n  this.setGroupVisibility(group, false, consumeChange);\n};\n/**\n * Show a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\n\n\nSequenceRenderer.prototype.showGroup = function (group, consumeChange) {\n  this.setGroupVisibility(group, true, consumeChange);\n};\n/**\n * Toggle the visibility for a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\n\n\nSequenceRenderer.prototype.toggleGroup = function (group, consumeChange) {\n  this.setGroupVisibility(group, consumeChange);\n};\n/**\n * Check if the given layer is active\n * @param {String|Object} layer Layer name, or layer object\n * @returns Whether this layer is active on this renderer\n * @type Boolean\n */\n\n\nSequenceRenderer.prototype.isLayerActive = function (layer) {\n  var layerName = layer;\n\n  if (typeof layer != 'string') {\n    layerName = layer.name;\n  }\n\n  return !layer.disabled && this._container.classList.contains(layerName + '_active');\n};\n/**\n * Deprecated until there's a better implementation for the CondensedSequenceRenderer\n * @private\n */\n\n\nSequenceRenderer.prototype._setHighlight = function (layer, isHighlighted) {\n  return;\n};\n/**\n * Create a layer controller for this sequence renderer. Attach the controller to the containing box, and shift the box across 20px.\n */\n\n\nSequenceRenderer.prototype.createLayerController = function () {\n  console.log(\"createLayerController is deprected\");\n  return;\n};\n/**\n * Create a checkbox that is used to control the given layer\n * @param {String|Object} layer Layer name or layer object that a controller should be generated for\n * @param {Object} inputElement Optional input element to bind events to. If no element is given, a new one is created.\n * @returns Checkbox element that when checked will toggle on the layer, and toggle it off when unchecked\n * @type Object\n */\n\n\nSequenceRenderer.prototype.createLayerCheckbox = function (layer, inputElement, exclusive) {\n  console.log(\"createLayerCheckbox is deprecated\");\n  return;\n};\n\nSequenceRenderer.prototype._removeOtherBindings = function (object, inputElement) {\n  var renderer = this;\n\n  for (var i = 0; i < inputElement._current_bindings.length; i++) {\n    if (inputElement._current_bindings[i].renderer != renderer) {\n      continue;\n    }\n\n    var cb = inputElement._current_bindings[i];\n\n    if (cb.layer && cb.layer != object.name) {\n      _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(cb.layer), 'visibilityChange', cb.object_function);\n      _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(inputElement, 'change', cb.input_function);\n    }\n\n    if (cb.group && cb.group != object.name) {\n      _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(cb.group), 'visibilityChange', cb.object_function);\n      _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(inputElement, 'change', cb.input_function);\n    }\n\n    cb.group = null;\n    cb.layer = null;\n  }\n};\n/**\n * Create a layer based controller for a group. This layer can act as a proxy for the other layers\n * @param {Object} lay Layer to turn into a group controller\n * @param {Object} grp Group to be controlled by this layer.\n */\n\n\nSequenceRenderer.prototype.createGroupController = function (lay, grp) {\n  var layer = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(lay);\n  var group = _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(grp);\n  var self = this;\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, 'visibilityChange', function (rend, visible) {\n    if (rend == self) {\n      self.setGroupVisibility(group, visible);\n      self.refresh();\n    }\n  });\n};\n/**\n * Function to be added to Amino acid elements to facilitate adding elements to layers\n * @private\n * @param {String} layerName The layer that this amino acid should be added to\n * @returns Itself\n * @type Element\n */\n\n\nSequenceRenderer.addElementToLayer = function (layerName) {\n  this.addBoxOverlay(layerName, 1);\n  return this;\n};\n/**\n * Function to be added to Amino acid elements to facilitate adding elements to layers with a link\n * @private\n * @param {String} layerName The layer that this amino acid should be added to\n * @param {String} url URL to link to\n * @returns Itself\n * @type Element\n */\n\n\nSequenceRenderer.addElementToLayerWithLink = function (layerName, url, width) {\n  this.classList.add(layerName);\n  var anchor = document.createElement('a');\n  anchor.setAttribute('href', url);\n  anchor.classList.add(layerName + '_overlay');\n  anchor.setAttribute('style', 'display: box; left: 0px; top: 0px; width: 100%; position: absolute; height: 100%;');\n  anchor.textContent = '&nbsp;';\n  this.appendChild(anchor);\n\n  while (width && width > 0) {\n    this._renderer._sequence_els[this._index + width].addToLayerWithLink(layerName, url);\n\n    width -= 1;\n  }\n\n  if (this._z_indexes && this._z_indexes[layerName]) {\n    anchor.style.zIndex = this._z_indexes[layerName];\n  }\n\n  return this;\n};\n/**\n * Function to be added to Amino acid elements to facilitate adding box overlays to elements\n * @private\n * @param {String} layerName The layer that this amino acid should be added to, as well as the fraction opacity to use for this overlay\n * @returns Itself\n * @type Element\n */\n\n\nSequenceRenderer.addBoxOverlayToElement = function (layerName, width, fraction) {\n  if (typeof fraction == 'undefined') {\n    fraction = 1;\n  }\n\n  this.classList.add(layerName);\n  var new_el = document.createElement('div');\n  new_el.classList.add(layerName + '_overlay');\n  new_el.setAttribute('style', 'top: 0px; width: 100%; position: absolute; height: 100%; opacity:' + fraction + ';');\n  this.appendChild(new_el);\n\n  while (width && width > 1) {\n    this._renderer._sequence_els[this._index + width - 1].addBoxOverlay(layerName, 0, fraction);\n\n    width -= 1;\n  }\n\n  if (this._z_indexes && this._z_indexes[layerName]) {\n    new_el.style.zIndex = this._z_indexes[layerName];\n  }\n\n  var event_names = ['mouseover', 'mousedown', 'mousemove', 'mouseout', 'click', 'dblclick', 'mouseup', 'mouseenter', 'mouseleave'];\n\n  for (var i = 0; i < event_names.length; i++) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(new_el, event_names[i], function () {\n      return function (e) {\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layerName), e.type, [e, 'SequenceRenderer']);\n      };\n    }(i));\n  }\n\n  return this;\n};\n/**\n * Reset this renderer. Hide all groups and layers, disabling them in the registry.\n */\n\n\nSequenceRenderer.prototype.reset = function () {\n  while (this._container.classList.length > 0) {\n    this._container.classList.remove(this._container.classList.item(0));\n  }\n\n  for (var group in _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].groups) {\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].groups.hasOwnProperty(group)) {\n      this.hideGroup(group);\n    }\n  }\n\n  for (var layer in _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers.hasOwnProperty(layer)) {\n      if (!this.keeptracks) {\n        this.hideLayer(layer, true);\n        _MASCP__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layer].disabled = true;\n      }\n    }\n  }\n\n  if (this.resetAnnotations) {\n    this.resetAnnotations();\n  }\n};\n/**\n * Execute the given block of code (in the renderer context) moving the refresh method away so that it is not called\n * @param {Function} func Function that contains operations to run without refreshing the renderer\n */\n\n\nSequenceRenderer.prototype.withoutRefresh = function (func) {\n  var curr_refresh = this.refresh;\n\n  this.refresh = function () {};\n\n  this.refresh.suspended = true;\n  func.apply(this);\n  this.refresh = curr_refresh;\n};\n/**\n * Refresh the display for this sequence renderer\n */\n\n\nSequenceRenderer.prototype.refresh = function () {\n  var z_index = -2;\n\n  if (!this._z_indexes) {\n    this._z_indexes = {};\n  }\n\n  for (var i = 0; i < (this.trackOrder || []).length; i++) {\n    if (!this.isLayerActive(this.trackOrder[i])) {\n      continue;\n    }\n\n    Array.prototype.slice.call(document.querySelectorAll('.' + this.trackOrder[i] + '_overlay')).forEach(function (el) {\n      el.style.zIndex = z_index;\n    });\n    this._z_indexes[this.trackOrder[i]] = z_index;\n    z_index -= 1;\n  }\n};\n/**\n * Bind a function to execute on a particular event for this object\n * @param {String} ev Event name\n * @param {Function} func Function to execute\n */\n\n\nSequenceRenderer.prototype.bind = function (ev, func) {\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this, ev, func);\n};\n\nSequenceRenderer.prototype.unbind = function (ev, func) {\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(this, ev, func);\n};\n\nSequenceRenderer.prototype.trigger = function (ev, args) {\n  _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(this, ev, args);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SequenceRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/SequenceRenderer.js\n")},"../gator/js/lib/Service.js":
/*!**********************************!*\
  !*** ../gator/js/lib/Service.js ***!
  \**********************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bean */ "../gator/js/bean.js");\n/* harmony import */ var _jsandbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsandbox */ "../gator/js/jsandbox.js");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MASCP */ "../gator/js/lib/MASCP.js");\n//"use strict";\n\n\n\n/** Default constructor for Services\n *  @class      Super-class for all MASCP services to retrieve data from\n *              proteomic databases. Sub-classes of this class override methods\n *              to change how requests are built, and how the data is parsed.\n *  @param      {String}    agi             AGI to retrieve data for\n *  @param      {String}    endpointURL     Endpoint for the service\n */\n\nconst Service = function Service(agi, endpointURL) {};\n/** Build a data retrieval class that uses the given function to extract result data.\n *  @static\n *  @param  {Function}  dataExtractor   Function to extract data from the resultant data (passed as an argument\n *                                      to the function), and then populate the result object. The function is\n *                                      bound to a hash to populate data in to. When no data is passed to the\n *                                      function, the hash should be populated with default values.\n */\n\n\nlet resultsymb = Symbol(\'resultclass\');\n\nService.buildService = function (dataExtractor) {\n  let clazz = class extends Service {\n    constructor(agi, endpointURL) {\n      super();\n\n      if (typeof endpointURL != \'undefined\') {\n        this._endpointURL = endpointURL;\n      } else {\n        this._endpointURL = clazz.SERVICE_URL;\n      }\n\n      this.agi = agi;\n      return this;\n    }\n\n    toString() {\n      for (var serv in _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"]) {\n        if (this === _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"][serv]) {\n          return "MASCP." + serv;\n        }\n      }\n    }\n\n    get Result() {\n      return this[resultsymb] || this.constructor.Result;\n    }\n\n    set Result(resultclass) {\n      this[resultsymb] = resultclass;\n    }\n\n  };\n  clazz.Result = class {\n    constructor(data) {\n      dataExtractor.apply(this, [data]);\n      return this;\n    }\n\n  };\n  Object.assign(dataExtractor.apply({}, []), clazz.Result.prototype);\n  return clazz;\n};\n\nService.clone = function (service, name) {\n  var new_service = Service.buildService(function () {\n    return this;\n  });\n  new_service.Result = service.Result;\n  new_service.prototype = new service();\n  _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"][name] = new_service;\n  new_service.prototype[\'__class__\'] = new_service;\n  return new_service;\n};\n/**\n *  @lends Service.prototype\n *  @property   {String}  agi               AGI to retrieve data for\n *  @property   {Service.Result}  result  Result from the query\n *  @property   {Boolean} async             Flag for using asynchronous requests - defaults to true\n */\n\n\nService.prototype = Object.assign({\n  \'agi\': null,\n  \'result\': null,\n  \'async\': true\n}, Service.prototype);\n/*\n * Internal callback for new data coming in from a XHR\n * @private\n */\n\nService.prototype._dataReceived = function (data, status) {\n  if (!data) {\n    return false;\n  }\n\n  var clazz = this.Result;\n\n  if (data && data.error && data.error != \'\' && data.error !== null) {\n    _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, \'error\', [data.error]);\n    return false;\n  }\n\n  if (Object.prototype.toString.call(data) === \'[object Array]\') {\n    for (var i = 0; i < data.length; i++) {\n      arguments.callee.call(this, data[i], status);\n    }\n\n    if (i === 0) {\n      this.result = new clazz();\n    }\n\n    this.result._raw_data = {\n      \'data\': data\n    };\n  } else if (!this.result) {\n    var result;\n\n    try {\n      result = new clazz(data);\n    } catch (err2) {\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, \'error\', [err2]);\n      return false;\n    }\n\n    if (!result._raw_data) {\n      result._raw_data = data;\n    }\n\n    this.result = result;\n  } else {\n    // var new_result = {};\n    try {\n      clazz.call(this.result, data);\n    } catch (err3) {\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, \'error\', [err3]);\n      return false;\n    } // for(var field in new_result) {\n    //     if (true && new_result.hasOwnProperty(field)) {\n    //         this.result[field] = new_result[field];\n    //     }\n    // }\n\n\n    if (!this.result._raw_data) {\n      this.result._raw_data = data;\n    } // this.result._raw_data = data;\n\n  }\n\n  if (data && data.retrieved) {\n    this.result.retrieved = data.retrieved;\n    this.result._raw_data.retrieved = data.retrieved;\n  }\n\n  this.result.agi = this.agi;\n  return true;\n};\n\nService.prototype.gotResult = function () {\n  var self = this;\n\n  var reader_cache = function reader_cache(thing) {\n    if (!thing.readers) {\n      thing.readers = [];\n    }\n\n    thing.readers.push(self.toString());\n  };\n\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].add(_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"], \'layerRegistered\', reader_cache);\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].add(_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"], \'groupRegistered\', reader_cache);\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(self, "resultReceived");\n\n  try {\n    _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"], \'layerRegistered\', reader_cache);\n    _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"], \'groupRegistered\', reader_cache);\n  } catch (e) {}\n\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(Service, "resultReceived");\n};\n\nService.prototype.requestComplete = function () {\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, \'requestComplete\');\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(Service, \'requestComplete\', [this]);\n};\n\nService.prototype.requestIncomplete = function () {\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, \'requestIncomplete\');\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(Service, \'requestIncomplete\', [this]);\n};\n\nService.registeredLayers = function (service) {\n  var result = [];\n\n  for (var layname in _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].layers) {\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].layers.hasOwnProperty(layname)) {\n      var layer = _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].layers[layname];\n\n      if (layer.readers && layer.readers.indexOf(service.toString()) >= 0) {\n        result.push(layer);\n      }\n    }\n  }\n\n  return result;\n};\n\nService.registeredGroups = function (service) {\n  var result = [];\n\n  for (var nm in _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].groups) {\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].groups.hasOwnProperty(nm)) {\n      var group = _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].groups[nm];\n\n      if (group.readers && group.readers.indexOf(service.toString()) >= 0) {\n        result.push(group);\n      }\n    }\n  }\n\n  return result;\n};\n/**\n *  Binds a handler to one or more events. Returns a reference to self, so this method\n *  can be chained.\n *\n *  @param  {String}    type        Event type to bind\n *  @param  {Function}  function    Handler to execute on event\n */\n\n\nService.prototype.bind = function (type, func) {\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].add(this, type, func);\n  return this;\n};\n\nService.prototype.once = function (type, func) {\n  var self = this;\n\n  var wrapped_func = function wrapped_func() {\n    _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(self, type, wrapped_func);\n    func.apply(self, [].slice.call(arguments));\n  };\n\n  self.bind(type, wrapped_func);\n};\n/**\n *  Unbinds a handler from one or more events. Returns a reference to self, so this method\n *  can be chained.\n *\n *  @param  {String}    type        Event type to unbind\n *  @param  {Function}  function    Handler to unbind from event\n */\n\n\nService.prototype.unbind = function (type, func) {\n  _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(this, type, func);\n  return this;\n};\n/**\n * @name    Service#resultReceived\n * @event\n * @param   {Object}    e\n */\n\n/**\n * @name    Service#error\n * @event\n * @param   {Object}    e\n */\n\n/**\n *  Asynchronously retrieves data from the remote source. When data is received, a \n *  resultReceived.mascp event is triggered upon this service, while an error.mascp\n *  event is triggered when an error occurs. This method returns a reference to self\n *  so it can be chained.\n */\n\n\n(function (base) {\n  var make_params = function make_params(params) {\n    var qpoints = [];\n\n    for (var fieldname in params) {\n      if (params.hasOwnProperty(fieldname)) {\n        qpoints.push(fieldname + \'=\' + params[fieldname]);\n      }\n    }\n\n    return qpoints.join(\'&\');\n  };\n\n  var cached_requests = {};\n\n  var do_request = function do_request(request_data) {\n    request_data.async = true;\n    var datablock = null;\n\n    if (!request_data.url) {\n      request_data.success.call(null, null);\n      return;\n    }\n\n    var request = new XMLHttpRequest();\n\n    if (request_data.type == \'GET\' && request_data.data) {\n      var index_of_quest = request_data.url.indexOf(\'?\');\n\n      if (index_of_quest == request_data.url.length - 1) {\n        request_data.url = request_data.url.slice(0, -1);\n        index_of_quest = -1;\n      }\n\n      var has_question = index_of_quest >= 0 ? \'&\' : \'?\';\n      request_data.url = request_data.url.replace(/\\?$/, \'\') + has_question + make_params(request_data.data);\n    }\n\n    if (request_data.type == \'GET\' && request_data.session_cache) {\n      if (cached_requests[request_data.url]) {\n        cached_requests[request_data.url].then(function (data) {\n          request_data.success.call(null, data);\n        }).catch(function (error_args) {\n          request_data.error.apply(null, [null, request, error_args]);\n        });\n        return;\n      } else {\n        var success_callback = request_data.success;\n        var error_callback = request_data.error;\n        cached_requests[request_data.url] = new Promise(function (resolve, reject) {\n          request_data.success = function (data) {\n            resolve(data);\n          };\n\n          request_data.error = function (message, req, error_obj) {\n            reject([message, req, error_obj]);\n            delete cached_requests[request_data.url];\n          };\n        });\n        cached_requests[request_data.url].catch(function (error_args) {\n          error_callback.apply(null, error_args);\n        }).then(function (data) {\n          success_callback.call(null, data);\n        });\n      }\n    }\n\n    request.open(request_data.type, request_data.url, request_data.async);\n\n    if (request_data.type == \'POST\') {\n      request.setRequestHeader("Content-Type", request_data.content ? request_data.content : "application/x-www-form-urlencoded");\n      datablock = request_data.content ? request_data.data : make_params(request_data.data);\n    }\n\n    if (request.customUA) {\n      request.setRequestHeader(\'User-Agent\', request.customUA);\n    }\n\n    if (request_data.auth) {\n      request.setRequestHeader(\'Authorization\', \'Bearer \' + request_data.auth);\n    }\n\n    if (request_data.api_key) {\n      request.setRequestHeader(\'x-api-key\', request_data.api_key);\n    }\n\n    var redirect_counts = 5;\n\n    request.onreadystatechange = function (evt) {\n      if (request.readyState == 4) {\n        if (request.status >= 300 && request.status < 400 && redirect_counts > 0) {\n          var loc = request.getResponseHeader(\'location\').replace(/location:\\s+/, \'\');\n          redirect_counts = redirect_counts - 1;\n          request.open(\'GET\', loc, request_data.async);\n          request.send();\n          return;\n        }\n\n        if (request.status == 503) {\n          // Let\'s encode an exponential backoff\n          request.last_wait = (request_data.last_wait || 500) * 2;\n          setTimeout(function () {\n            request.open(request_data.type, request_data.url, request_data.async);\n\n            if (request_data.type == \'POST\') {\n              request.setRequestHeader("Content-Type", request_data.content ? request_data.content : "application/x-www-form-urlencoded");\n            }\n\n            if (request.customUA) {\n              request.setRequestHeader(\'User-Agent\', request.customUA);\n            }\n\n            request.send(datablock);\n          }, request_data.last_wait);\n          return;\n        }\n\n        if (request.status == 403) {\n          // Make sure our S3 buckets expose the Server header cross-origin\n          var server = request.getResponseHeader(\'Server\');\n\n          if (server === \'AmazonS3\') {\n            request_data.success.call(null, {\n              "error": "No data"\n            }, 403, request);\n            return;\n          }\n        }\n\n        if (request.status >= 200 && request.status < 300) {\n          var data_block;\n\n          if (request_data.dataType == \'xml\') {\n            data_block = typeof document !== \'undefined\' ? document.implementation.createDocument(null, "nodata", null) : {\n              \'getElementsByTagName\': function getElementsByTagName() {\n                return [];\n              }\n            };\n          } else {\n            data_block = {};\n          }\n\n          try {\n            var text = request.responseText;\n            data_block = request_data.dataType == \'xml\' ? request.responseXML : request_data.dataType == \'txt\' ? request.responseText : JSON.parse(request.responseText);\n          } catch (e) {\n            if (e.type == \'unexpected_eos\') {\n              request_data.success.call(null, {}, request.status, request);\n              return;\n            } else {\n              request_data.error.call(null, request.responseText, request, {\n                \'error\': e.type || e.message,\n                \'stack\': e\n              });\n              return;\n            }\n          }\n\n          if (request.status == 202 && data_block.status == "RUNNING") {\n            setTimeout(function () {\n              request.open(request_data.type, request_data.url, request_data.async);\n\n              if (request_data.type == \'POST\') {\n                request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");\n              }\n\n              if (request.customUA) {\n                request.setRequestHeader(\'User-Agent\', request.customUA);\n              }\n\n              request.send(datablock);\n            }, 5000);\n            return;\n          }\n\n          request_data.success.call(null, data_block, request.status, request);\n          data_block = null;\n        } else {\n          request_data.error.call(null, request.responseText, request, request.status);\n        }\n      }\n    };\n\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].NETWORK_FAIL && _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].NETWORK_FAIL.enabled) {\n      setTimeout(function () {\n        console.log("Causing network failure");\n        request = {\n          \'onreadystatechange\': request.onreadystatechange\n        };\n        request.readyState = 4;\n        request.status = _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].NETWORK_FAIL.status || 500;\n        request.responseText = "Intercepted by Network Failure simulator";\n        request.onreadystatechange();\n      }, 1000);\n      return;\n    }\n\n    request.send(datablock);\n  };\n\n  Service.request = function (url, callback, noparse) {\n    var method = _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].IE ? do_request_ie : do_request;\n\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_2__["default"].IE && !url.match(/^https?\\:/)) {\n      method = do_request;\n    }\n\n    var params;\n\n    if (!url) {\n      callback(null);\n      return;\n    }\n\n    if (typeof url == \'string\') {\n      params = {\n        async: true,\n        url: url,\n        timeout: 5000,\n        type: "GET",\n        error: function error(response, req, status) {\n          callback.call(null, {\n            "status": status\n          });\n        },\n        success: function success(data, status, xhr) {\n          callback.call(null, null, data);\n        }\n      };\n    } else if (url.hasOwnProperty(\'url\')) {\n      params = url;\n\n      params.success = function (data) {\n        callback.call(null, null, data);\n      };\n\n      params.error = function (resp, req, status) {\n        callback.call(null, {\n          "status": status\n        });\n      };\n    }\n\n    if (noparse) {\n      params.dataType = \'txt\';\n\n      if (noparse === "xml") {\n        params.dataType = \'xml\';\n      }\n    }\n\n    method.call(null, params);\n  };\n  /**\n   * Private method for performing a cross-domain request using Internet Explorer 8 and up. Adapts the \n   * parameters passed, and builds an XDR object. There is no support for a locking\n   * synchronous method to do these requests (that is required for Unit testing) so an alert box is used\n   * to provide the locking.\n   * @private\n   * @param {Object} dataHash Hash with the data and settings used to build the query.\n   */\n\n\n  var do_request_ie = function do_request_ie(dataHash) {\n    // Use XDR\n    var xdr = new XDomainRequest();\n    var loaded = false;\n    var counter = 0;\n\n    xdr.onerror = function (ev) {\n      dataHash.error(xdr, xdr, {\n        "message": "XDomainRequest error"\n      });\n    };\n\n    xdr.onprogress = function () {};\n\n    xdr.open("GET", dataHash.url + "?" + make_params(dataHash.data));\n\n    xdr.onload = function () {\n      loaded = true;\n\n      if (dataHash.dataType == \'xml\') {\n        var dom = new ActiveXObject("Microsoft.XMLDOM");\n        dom.async = false;\n        dom.loadXML(xdr.responseText);\n        dataHash.success(dom, \'success\', xdr);\n      } else if (dataHash.dataType == \'json\') {\n        var parsed = null;\n\n        try {\n          parsed = JSON.parse(xdr.responseText);\n        } catch (err) {\n          dataHash.error(xdr, xdr, {\n            "message": "JSON parsing error"\n          });\n        }\n\n        if (parsed) {\n          dataHash.success(parsed, \'success\', xdr);\n        }\n      } else {\n        dataHash.success(xdr.responseText, \'success\', xdr);\n      }\n    }; // We can\'t set the content-type on the parameters here to url-encoded form data.\n\n\n    setTimeout(function () {\n      xdr.send();\n    }, 0);\n\n    while (!dataHash.async && !loaded && counter < 3) {\n      alert("This browser does not support synchronous requests, click OK while we\'re waiting for data");\n      counter += 1;\n    }\n\n    if (!dataHash.async && !loaded) {\n      alert("No data");\n    }\n  };\n\n  let handle_request_success = function handle_request_success(data, status, xhr) {\n    Service._current_reqs -= 1;\n\n    if (xhr && xhr.status !== null && xhr.status === 0) {\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, "error", [{\n        "error": "Zero return status from request "\n      }]);\n      this.requestComplete();\n      return;\n    }\n\n    var received_flag = this._dataReceived(data, status);\n\n    if (received_flag) {\n      this.gotResult();\n    }\n\n    if (received_flag !== null && typeof received_flag !== \'undefined\') {\n      this.requestComplete();\n    } else {\n      this.requestIncomplete();\n    }\n  };\n\n  let handle_request_error = function handle_request_error(response, req, status) {\n    Service._current_reqs -= 1;\n\n    if (typeof status == \'string\') {\n      status = {\n        \'error\': status,\n        \'request\': req\n      };\n    }\n\n    if (!isNaN(status)) {\n      status = {\n        "error": "Reqeust error",\n        "status": status,\n        \'request\': req\n      };\n    }\n\n    _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, "error", [status]);\n    _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(Service, \'requestComplete\');\n    this.requestComplete();\n  };\n\n  let perform_request = function perform_request(request_data) {\n    if (request_data === false) {\n      return;\n    }\n\n    if (!request_data) {\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(this, "error", ["No request data"]);\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].fire(Service, "requestComplete", [this]);\n      this.requestComplete();\n      return this;\n    }\n\n    var default_params = {\n      async: this.async,\n      url: request_data.url || this._endpointURL,\n      timeout: 5000,\n      error: handle_request_error.bind(this),\n      success: handle_request_success.bind(this)\n    };\n    default_params = Object.assign(request_data, default_params);\n    do_request(default_params);\n    Service._current_reqs += 1;\n  };\n\n  base.retrieve = function (agi, callback) {\n    var self = this;\n    Service._current_reqs = Service._current_reqs || 0;\n    Service._waiting_reqs = Service._waiting_reqs || 0;\n\n    if (Service.MAX_REQUESTS) {\n      var my_func = arguments.callee;\n\n      if (Service._current_reqs > Service.MAX_REQUESTS) {\n        Service._waiting_reqs += 1;\n        _bean__WEBPACK_IMPORTED_MODULE_0__["default"].add(Service, \'requestComplete\', function () {\n          _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(this, \'requestComplete\', arguments.callee);\n          setTimeout(function () {\n            Service._waiting_reqs -= 1;\n            my_func.call(self, agi, callback);\n          }, 0);\n        });\n        return this;\n      }\n    }\n\n    if (agi) {\n      this.agi = agi;\n    }\n\n    if (agi && callback) {\n      this.agi = agi;\n      this.result = null;\n      var done_result = false;\n\n      var done_func = function done_func(err, obj) {\n        _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(self, "resultReceived", done_func);\n        _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(self, "error", done_func);\n        _bean__WEBPACK_IMPORTED_MODULE_0__["default"].remove(self, "requestComplete", done_func);\n\n        if (!done_result) {\n          if (err) {\n            callback.call(self, err);\n          } else {\n            callback.call(self);\n          }\n        }\n\n        done_result = true;\n      };\n\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].add(self, "resultReceived", done_func);\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].add(self, "error", done_func);\n      _bean__WEBPACK_IMPORTED_MODULE_0__["default"].add(self, "requestComplete", done_func);\n    }\n\n    var request_data = this.requestData();\n    Promise.resolve(request_data).then(perform_request.bind(this));\n    return this;\n  };\n})(Service.prototype);\n/**\n *  Get the parameters that will be used to build this request. Implementations of services will\n *  override this method, returning the parameters to be used to build the XHR.\n */\n\n\nService.prototype.requestData = function () {};\n\nService.prototype.toString = function () {\n  for (var clazz in _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"]) {\n    if (this.__class__ == _MASCP__WEBPACK_IMPORTED_MODULE_2__["default"][clazz]) {\n      return "MASCP." + clazz;\n    }\n  }\n};\n/**\n * For this service, register a sequence rendering view so that the results can be marked up directly\n * on to a sequence. This method will do nothing if the service does not know how to render the \n * results onto the sequence.\n * @param {MASCP.SequenceRenderer} sequenceRenderer Sequence renderer object to render results upon\n */\n\n\nService.prototype.registerSequenceRenderer = function (sequenceRenderer, options) {\n  if (this.setupSequenceRenderer) {\n    this.renderers = this.renderers || [];\n    this.setupSequenceRenderer(sequenceRenderer, options);\n    this.renderers.push(sequenceRenderer);\n  }\n\n  sequenceRenderer.trigger(\'readerRegistered\', [this]);\n  return this;\n};\n\nService.prototype.resetOnResult = function (sequenceRenderer, rendered, track) {\n  var self = this;\n\n  var result_func = function result_func() {\n    self.unbind(\'resultReceived\', result_func);\n    sequenceRenderer.bind(\'resultsRendered\', clear_func);\n  };\n\n  var clear_func = function clear_func(reader) {\n    if (reader !== self) {\n      return;\n    }\n\n    sequenceRenderer.unbind(\'resultsRendered\', clear_func);\n    rendered.forEach(function (obj) {\n      sequenceRenderer.remove(track, obj);\n    });\n  };\n\n  this.bind(\'resultReceived\', result_func);\n};\n/**\n * For this service, set up a sequence renderer so that the events are connected up with receiving data.\n * This method should be overridden to wire up the sequence renderer to the service.\n * @param {MASCP.SequenceRenderer} sequenceRenderer Sequence renderer object to render results upon\n */\n\n\nService.prototype.setupSequenceRenderer = function (sequenceRenderer) {\n  return this;\n};\n/** Default constructor\n *  @class  Super-class for all results from MASCP services.\n */\n\n\nService.Result = function () {};\n\nService.Result.prototype = {\n  agi: null,\n  reader: null\n};\n\nService.Result.prototype.render = function () {};\n\n/* harmony default export */ __webpack_exports__["default"] = (Service);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZ2F0b3IvanMvbGliL1NlcnZpY2UuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZ2F0b3IvanMvbGliL1NlcnZpY2UuanM/Y2MxYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1widXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgYmVhbiBmcm9tICcuLi9iZWFuJztcbmltcG9ydCBKU2FuZGJveCBmcm9tICcuLi9qc2FuZGJveCc7XG5cbmltcG9ydCBNQVNDUCBmcm9tICcuL01BU0NQJztcblxuLyoqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIFNlcnZpY2VzXG4gKiAgQGNsYXNzICAgICAgU3VwZXItY2xhc3MgZm9yIGFsbCBNQVNDUCBzZXJ2aWNlcyB0byByZXRyaWV2ZSBkYXRhIGZyb21cbiAqICAgICAgICAgICAgICBwcm90ZW9taWMgZGF0YWJhc2VzLiBTdWItY2xhc3NlcyBvZiB0aGlzIGNsYXNzIG92ZXJyaWRlIG1ldGhvZHNcbiAqICAgICAgICAgICAgICB0byBjaGFuZ2UgaG93IHJlcXVlc3RzIGFyZSBidWlsdCwgYW5kIGhvdyB0aGUgZGF0YSBpcyBwYXJzZWQuXG4gKiAgQHBhcmFtICAgICAge1N0cmluZ30gICAgYWdpICAgICAgICAgICAgIEFHSSB0byByZXRyaWV2ZSBkYXRhIGZvclxuICogIEBwYXJhbSAgICAgIHtTdHJpbmd9ICAgIGVuZHBvaW50VVJMICAgICBFbmRwb2ludCBmb3IgdGhlIHNlcnZpY2VcbiAqL1xuY29uc3QgU2VydmljZSA9IGZ1bmN0aW9uKGFnaSxlbmRwb2ludFVSTCkge307XG5cbi8qKiBCdWlsZCBhIGRhdGEgcmV0cmlldmFsIGNsYXNzIHRoYXQgdXNlcyB0aGUgZ2l2ZW4gZnVuY3Rpb24gdG8gZXh0cmFjdCByZXN1bHQgZGF0YS5cbiAqICBAc3RhdGljXG4gKiAgQHBhcmFtICB7RnVuY3Rpb259ICBkYXRhRXh0cmFjdG9yICAgRnVuY3Rpb24gdG8gZXh0cmFjdCBkYXRhIGZyb20gdGhlIHJlc3VsdGFudCBkYXRhIChwYXNzZWQgYXMgYW4gYXJndW1lbnRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgZnVuY3Rpb24pLCBhbmQgdGhlbiBwb3B1bGF0ZSB0aGUgcmVzdWx0IG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm91bmQgdG8gYSBoYXNoIHRvIHBvcHVsYXRlIGRhdGEgaW4gdG8uIFdoZW4gbm8gZGF0YSBpcyBwYXNzZWQgdG8gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24sIHRoZSBoYXNoIHNob3VsZCBiZSBwb3B1bGF0ZWQgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAqL1xuXG5sZXQgcmVzdWx0c3ltYiA9IFN5bWJvbCgncmVzdWx0Y2xhc3MnKTtcblxuU2VydmljZS5idWlsZFNlcnZpY2UgPSBmdW5jdGlvbihkYXRhRXh0cmFjdG9yKVxue1xuXG4gICAgbGV0IGNsYXp6ID0gY2xhc3MgZXh0ZW5kcyBTZXJ2aWNlIHtcbiAgICAgICAgY29uc3RydWN0b3IoYWdpLGVuZHBvaW50VVJMKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmRwb2ludFVSTCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZHBvaW50VVJMID0gZW5kcG9pbnRVUkw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZHBvaW50VVJMID0gY2xhenouU0VSVklDRV9VUkw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFnaSA9IGFnaTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzZXJ2IGluIE1BU0NQKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IE1BU0NQW3NlcnZdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk1BU0NQLlwiK3NlcnY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IFJlc3VsdCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3Jlc3VsdHN5bWJdIHx8IHRoaXMuY29uc3RydWN0b3IuUmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IFJlc3VsdChyZXN1bHRjbGFzcykge1xuICAgICAgICAgICAgdGhpc1tyZXN1bHRzeW1iXSA9IHJlc3VsdGNsYXNzO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNsYXp6LlJlc3VsdCA9IGNsYXNzIHtcbiAgICAgICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICAgICAgZGF0YUV4dHJhY3Rvci5hcHBseSh0aGlzLFtkYXRhXSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBPYmplY3QuYXNzaWduKGRhdGFFeHRyYWN0b3IuYXBwbHkoe30sW10pLGNsYXp6LlJlc3VsdC5wcm90b3R5cGUpO1xuXG4gICAgcmV0dXJuIGNsYXp6O1xufTtcblxuU2VydmljZS5jbG9uZSA9IGZ1bmN0aW9uKHNlcnZpY2UsbmFtZSkge1xuICAgIHZhciBuZXdfc2VydmljZSA9IFNlcnZpY2UuYnVpbGRTZXJ2aWNlKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSk7XG4gICAgbmV3X3NlcnZpY2UuUmVzdWx0ID0gc2VydmljZS5SZXN1bHQ7XG4gICAgbmV3X3NlcnZpY2UucHJvdG90eXBlID0gbmV3IHNlcnZpY2UoKTtcbiAgICBNQVNDUFtuYW1lXSA9IG5ld19zZXJ2aWNlO1xuICAgIG5ld19zZXJ2aWNlLnByb3RvdHlwZVsnX19jbGFzc19fJ10gPSBuZXdfc2VydmljZTtcbiAgICByZXR1cm4gbmV3X3NlcnZpY2U7XG59O1xuXG5cbi8qKlxuICogIEBsZW5kcyBTZXJ2aWNlLnByb3RvdHlwZVxuICogIEBwcm9wZXJ0eSAgIHtTdHJpbmd9ICBhZ2kgICAgICAgICAgICAgICBBR0kgdG8gcmV0cmlldmUgZGF0YSBmb3JcbiAqICBAcHJvcGVydHkgICB7U2VydmljZS5SZXN1bHR9ICByZXN1bHQgIFJlc3VsdCBmcm9tIHRoZSBxdWVyeVxuICogIEBwcm9wZXJ0eSAgIHtCb29sZWFufSBhc3luYyAgICAgICAgICAgICBGbGFnIGZvciB1c2luZyBhc3luY2hyb25vdXMgcmVxdWVzdHMgLSBkZWZhdWx0cyB0byB0cnVlXG4gKi9cblNlcnZpY2UucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbih7XG4gICdhZ2knICAgICA6IG51bGwsXG4gICdyZXN1bHQnICA6IG51bGwsIFxuICAnYXN5bmMnICAgOiB0cnVlXG59LFNlcnZpY2UucHJvdG90eXBlKTtcblxuXG4vKlxuICogSW50ZXJuYWwgY2FsbGJhY2sgZm9yIG5ldyBkYXRhIGNvbWluZyBpbiBmcm9tIGEgWEhSXG4gKiBAcHJpdmF0ZVxuICovXG5cblNlcnZpY2UucHJvdG90eXBlLl9kYXRhUmVjZWl2ZWQgPSBmdW5jdGlvbihkYXRhLHN0YXR1cylcbntcbiAgICBpZiAoISBkYXRhICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBjbGF6eiA9IHRoaXMuUmVzdWx0O1xuICAgIGlmIChkYXRhICYmIGRhdGEuZXJyb3IgJiYgZGF0YS5lcnJvciAhPSAnJyAmJiBkYXRhLmVycm9yICE9PSBudWxsICkge1xuICAgICAgICBiZWFuLmZpcmUodGhpcywnZXJyb3InLFtkYXRhLmVycm9yXSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBhcmd1bWVudHMuY2FsbGVlLmNhbGwodGhpcyxkYXRhW2ldLHN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gbmV3IGNsYXp6KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXN1bHQuX3Jhd19kYXRhID0geyAnZGF0YScgOiBkYXRhIH07XG4gICAgfSBlbHNlIGlmICggISB0aGlzLnJlc3VsdCApIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBjbGF6eihkYXRhKTtcbiAgICAgICAgfSBjYXRjaChlcnIyKSB7XG4gICAgICAgICAgICBiZWFuLmZpcmUodGhpcywnZXJyb3InLFtlcnIyXSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAhIHJlc3VsdC5fcmF3X2RhdGEgKSB7XG4gICAgICAgICAgICByZXN1bHQuX3Jhd19kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB2YXIgbmV3X3Jlc3VsdCA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xhenouY2FsbCh0aGlzLnJlc3VsdCxkYXRhKTtcbiAgICAgICAgfSBjYXRjaChlcnIzKSB7XG4gICAgICAgICAgICBiZWFuLmZpcmUodGhpcywnZXJyb3InLFtlcnIzXSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZm9yKHZhciBmaWVsZCBpbiBuZXdfcmVzdWx0KSB7XG4gICAgICAgIC8vICAgICBpZiAodHJ1ZSAmJiBuZXdfcmVzdWx0Lmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMucmVzdWx0W2ZpZWxkXSA9IG5ld19yZXN1bHRbZmllbGRdO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgICAgIGlmICghIHRoaXMucmVzdWx0Ll9yYXdfZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHQuX3Jhd19kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnJlc3VsdC5fcmF3X2RhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIGlmIChkYXRhICYmIGRhdGEucmV0cmlldmVkKSB7XG4gICAgICAgIHRoaXMucmVzdWx0LnJldHJpZXZlZCA9IGRhdGEucmV0cmlldmVkO1xuICAgICAgICB0aGlzLnJlc3VsdC5fcmF3X2RhdGEucmV0cmlldmVkID0gZGF0YS5yZXRyaWV2ZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5yZXN1bHQuYWdpID0gdGhpcy5hZ2k7XG4gICAgXG4gICAgXG4gICAgXG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5TZXJ2aWNlLnByb3RvdHlwZS5nb3RSZXN1bHQgPSBmdW5jdGlvbigpXG57XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFxuICAgIHZhciByZWFkZXJfY2FjaGUgPSBmdW5jdGlvbih0aGluZykge1xuICAgICAgICBpZiAoICEgdGhpbmcucmVhZGVycyApIHtcbiAgICAgICAgICAgIHRoaW5nLnJlYWRlcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGluZy5yZWFkZXJzLnB1c2goc2VsZi50b1N0cmluZygpKTtcbiAgICB9O1xuICAgIFxuICAgIGJlYW4uYWRkKE1BU0NQLCdsYXllclJlZ2lzdGVyZWQnLCByZWFkZXJfY2FjaGUpO1xuICAgIGJlYW4uYWRkKE1BU0NQLCdncm91cFJlZ2lzdGVyZWQnLCByZWFkZXJfY2FjaGUpO1xuICAgIGJlYW4uZmlyZShzZWxmLFwicmVzdWx0UmVjZWl2ZWRcIik7XG4gICAgdHJ5IHtcbiAgICAgICAgYmVhbi5yZW1vdmUoTUFTQ1AsJ2xheWVyUmVnaXN0ZXJlZCcscmVhZGVyX2NhY2hlKTtcbiAgICAgICAgYmVhbi5yZW1vdmUoTUFTQ1AsJ2dyb3VwUmVnaXN0ZXJlZCcscmVhZGVyX2NhY2hlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuXG4gICAgYmVhbi5maXJlKFNlcnZpY2UsXCJyZXN1bHRSZWNlaXZlZFwiKTtcbn07XG5cblNlcnZpY2UucHJvdG90eXBlLnJlcXVlc3RDb21wbGV0ZSA9IGZ1bmN0aW9uKClcbntcbiAgICBiZWFuLmZpcmUodGhpcywncmVxdWVzdENvbXBsZXRlJyk7XG4gICAgYmVhbi5maXJlKFNlcnZpY2UsJ3JlcXVlc3RDb21wbGV0ZScsW3RoaXNdKTtcbn07XG5cblNlcnZpY2UucHJvdG90eXBlLnJlcXVlc3RJbmNvbXBsZXRlID0gZnVuY3Rpb24oKVxue1xuICAgIGJlYW4uZmlyZSh0aGlzLCdyZXF1ZXN0SW5jb21wbGV0ZScpO1xuICAgIGJlYW4uZmlyZShTZXJ2aWNlLCdyZXF1ZXN0SW5jb21wbGV0ZScsW3RoaXNdKTtcbn07XG5cblxuU2VydmljZS5yZWdpc3RlcmVkTGF5ZXJzID0gZnVuY3Rpb24oc2VydmljZSkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBsYXluYW1lIGluIE1BU0NQLmxheWVycykge1xuICAgICAgICBpZiAoTUFTQ1AubGF5ZXJzLmhhc093blByb3BlcnR5KGxheW5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSBNQVNDUC5sYXllcnNbbGF5bmFtZV07XG4gICAgICAgICAgICBpZiAobGF5ZXIucmVhZGVycyAmJiBsYXllci5yZWFkZXJzLmluZGV4T2Yoc2VydmljZS50b1N0cmluZygpKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobGF5ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5TZXJ2aWNlLnJlZ2lzdGVyZWRHcm91cHMgPSBmdW5jdGlvbihzZXJ2aWNlKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIG5tIGluIE1BU0NQLmdyb3Vwcykge1xuICAgICAgICBpZiAoTUFTQ1AuZ3JvdXBzLmhhc093blByb3BlcnR5KG5tKSkge1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gTUFTQ1AuZ3JvdXBzW25tXTtcbiAgICAgICAgICAgIGlmIChncm91cC5yZWFkZXJzICYmIGdyb3VwLnJlYWRlcnMuaW5kZXhPZihzZXJ2aWNlLnRvU3RyaW5nKCkpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChncm91cCk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDsgIFxufTtcblxuLyoqXG4gKiAgQmluZHMgYSBoYW5kbGVyIHRvIG9uZSBvciBtb3JlIGV2ZW50cy4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byBzZWxmLCBzbyB0aGlzIG1ldGhvZFxuICogIGNhbiBiZSBjaGFpbmVkLlxuICpcbiAqICBAcGFyYW0gIHtTdHJpbmd9ICAgIHR5cGUgICAgICAgIEV2ZW50IHR5cGUgdG8gYmluZFxuICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgZnVuY3Rpb24gICAgSGFuZGxlciB0byBleGVjdXRlIG9uIGV2ZW50XG4gKi9cblxuU2VydmljZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uKHR5cGUsZnVuYylcbntcbiAgICBiZWFuLmFkZCh0aGlzLHR5cGUsZnVuYyk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5TZXJ2aWNlLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSxmdW5jKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB3cmFwcGVkX2Z1bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgYmVhbi5yZW1vdmUoc2VsZix0eXBlLHdyYXBwZWRfZnVuYyk7XG4gICAgICAgIGZ1bmMuYXBwbHkoc2VsZixbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgc2VsZi5iaW5kKHR5cGUsd3JhcHBlZF9mdW5jKTtcbn07XG5cbi8qKlxuICogIFVuYmluZHMgYSBoYW5kbGVyIGZyb20gb25lIG9yIG1vcmUgZXZlbnRzLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHNlbGYsIHNvIHRoaXMgbWV0aG9kXG4gKiAgY2FuIGJlIGNoYWluZWQuXG4gKlxuICogIEBwYXJhbSAge1N0cmluZ30gICAgdHlwZSAgICAgICAgRXZlbnQgdHlwZSB0byB1bmJpbmRcbiAqICBAcGFyYW0gIHtGdW5jdGlvbn0gIGZ1bmN0aW9uICAgIEhhbmRsZXIgdG8gdW5iaW5kIGZyb20gZXZlbnRcbiAqL1xuU2VydmljZS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24odHlwZSxmdW5jKVxue1xuICAgIGJlYW4ucmVtb3ZlKHRoaXMsdHlwZSxmdW5jKTtcbiAgICByZXR1cm4gdGhpczsgICAgXG59O1xuXG4vKipcbiAqIEBuYW1lICAgIFNlcnZpY2UjcmVzdWx0UmVjZWl2ZWRcbiAqIEBldmVudFxuICogQHBhcmFtICAge09iamVjdH0gICAgZVxuICovXG5cbi8qKlxuICogQG5hbWUgICAgU2VydmljZSNlcnJvclxuICogQGV2ZW50XG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBlXG4gKi9cblxuLyoqXG4gKiAgQXN5bmNocm9ub3VzbHkgcmV0cmlldmVzIGRhdGEgZnJvbSB0aGUgcmVtb3RlIHNvdXJjZS4gV2hlbiBkYXRhIGlzIHJlY2VpdmVkLCBhIFxuICogIHJlc3VsdFJlY2VpdmVkLm1hc2NwIGV2ZW50IGlzIHRyaWdnZXJlZCB1cG9uIHRoaXMgc2VydmljZSwgd2hpbGUgYW4gZXJyb3IubWFzY3BcbiAqICBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuIFRoaXMgbWV0aG9kIHJldHVybnMgYSByZWZlcmVuY2UgdG8gc2VsZlxuICogIHNvIGl0IGNhbiBiZSBjaGFpbmVkLlxuICovXG4oZnVuY3Rpb24oYmFzZSkge1xuXG52YXIgbWFrZV9wYXJhbXMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICB2YXIgcXBvaW50cyA9IFtdO1xuICAgIGZvcih2YXIgZmllbGRuYW1lIGluIHBhcmFtcykge1xuICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGZpZWxkbmFtZSkpIHtcbiAgICAgICAgICAgIHFwb2ludHMucHVzaChmaWVsZG5hbWUgKyc9JytwYXJhbXNbZmllbGRuYW1lXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHFwb2ludHMuam9pbignJicpO1xufTtcblxudmFyIGNhY2hlZF9yZXF1ZXN0cyA9IHt9O1xuXG52YXIgZG9fcmVxdWVzdCA9IGZ1bmN0aW9uKHJlcXVlc3RfZGF0YSkge1xuICAgIFxuICAgIHJlcXVlc3RfZGF0YS5hc3luYyA9IHRydWU7XG5cbiAgICB2YXIgZGF0YWJsb2NrID0gbnVsbDtcbiAgICBcbiAgICBpZiAoICEgcmVxdWVzdF9kYXRhLnVybCApIHtcbiAgICAgICAgcmVxdWVzdF9kYXRhLnN1Y2Nlc3MuY2FsbChudWxsLG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICBcbiAgICBpZiAocmVxdWVzdF9kYXRhLnR5cGUgPT0gJ0dFVCcgJiYgcmVxdWVzdF9kYXRhLmRhdGEpIHtcbiAgICAgICAgdmFyIGluZGV4X29mX3F1ZXN0ID0gcmVxdWVzdF9kYXRhLnVybC5pbmRleE9mKCc/Jyk7XG5cbiAgICAgICAgaWYgKGluZGV4X29mX3F1ZXN0ID09IChyZXF1ZXN0X2RhdGEudXJsLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICByZXF1ZXN0X2RhdGEudXJsID0gcmVxdWVzdF9kYXRhLnVybC5zbGljZSgwLC0xKTtcbiAgICAgICAgICAgIGluZGV4X29mX3F1ZXN0ID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhc19xdWVzdGlvbiA9ICAoaW5kZXhfb2ZfcXVlc3QgPj0gMCkgPyAnJicgOiAnPyc7XG4gICAgICAgIHJlcXVlc3RfZGF0YS51cmwgPSByZXF1ZXN0X2RhdGEudXJsLnJlcGxhY2UoL1xcPyQvLCcnKSArIGhhc19xdWVzdGlvbiArIG1ha2VfcGFyYW1zKHJlcXVlc3RfZGF0YS5kYXRhKTtcbiAgICB9XG4gICAgaWYgKHJlcXVlc3RfZGF0YS50eXBlID09ICdHRVQnICYmIHJlcXVlc3RfZGF0YS5zZXNzaW9uX2NhY2hlKSB7XG4gICAgICAgIGlmIChjYWNoZWRfcmVxdWVzdHNbcmVxdWVzdF9kYXRhLnVybF0pIHtcbiAgICAgICAgICAgIGNhY2hlZF9yZXF1ZXN0c1tyZXF1ZXN0X2RhdGEudXJsXS50aGVuKCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdF9kYXRhLnN1Y2Nlc3MuY2FsbChudWxsLGRhdGEpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3JfYXJncykge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RfZGF0YS5lcnJvci5hcHBseShudWxsLFtudWxsLHJlcXVlc3QsZXJyb3JfYXJnc10pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3VjY2Vzc19jYWxsYmFjayA9IHJlcXVlc3RfZGF0YS5zdWNjZXNzO1xuICAgICAgICAgICAgdmFyIGVycm9yX2NhbGxiYWNrID0gcmVxdWVzdF9kYXRhLmVycm9yO1xuICAgICAgICAgICAgY2FjaGVkX3JlcXVlc3RzW3JlcXVlc3RfZGF0YS51cmxdID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0X2RhdGEuc3VjY2VzcyA9IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVxdWVzdF9kYXRhLmVycm9yID0gZnVuY3Rpb24obWVzc2FnZSxyZXEsZXJyb3Jfb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChbbWVzc2FnZSxyZXEsZXJyb3Jfb2JqXSk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjYWNoZWRfcmVxdWVzdHNbcmVxdWVzdF9kYXRhLnVybF07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FjaGVkX3JlcXVlc3RzW3JlcXVlc3RfZGF0YS51cmxdLmNhdGNoKGZ1bmN0aW9uKGVycm9yX2FyZ3MpIHtcbiAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjay5hcHBseShudWxsLGVycm9yX2FyZ3MpO1xuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc19jYWxsYmFjay5jYWxsKG51bGwsZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVlc3Qub3BlbihyZXF1ZXN0X2RhdGEudHlwZSxyZXF1ZXN0X2RhdGEudXJsLHJlcXVlc3RfZGF0YS5hc3luYyk7XG5cbiAgICBpZiAocmVxdWVzdF9kYXRhLnR5cGUgPT0gJ1BPU1QnKSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLHJlcXVlc3RfZGF0YS5jb250ZW50ID8gcmVxdWVzdF9kYXRhLmNvbnRlbnQgOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKTtcbiAgICAgICAgZGF0YWJsb2NrID0gcmVxdWVzdF9kYXRhLmNvbnRlbnQgPyByZXF1ZXN0X2RhdGEuZGF0YSA6IG1ha2VfcGFyYW1zKHJlcXVlc3RfZGF0YS5kYXRhKTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdC5jdXN0b21VQSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ1VzZXItQWdlbnQnLHJlcXVlc3QuY3VzdG9tVUEpO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0X2RhdGEuYXV0aCkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCdCZWFyZXIgJytyZXF1ZXN0X2RhdGEuYXV0aCk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3RfZGF0YS5hcGlfa2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcigneC1hcGkta2V5JyxyZXF1ZXN0X2RhdGEuYXBpX2tleSk7XG4gICAgfVxuXG4gICAgdmFyIHJlZGlyZWN0X2NvdW50cyA9IDU7XG5cbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA+PSAzMDAgJiYgcmVxdWVzdC5zdGF0dXMgPCA0MDAgJiYgcmVkaXJlY3RfY291bnRzID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBsb2MgPSAocmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignbG9jYXRpb24nKSkucmVwbGFjZSgvbG9jYXRpb246XFxzKy8sJycpO1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0X2NvdW50cyA9IHJlZGlyZWN0X2NvdW50cyAtIDE7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLGxvYyxyZXF1ZXN0X2RhdGEuYXN5bmMpO1xuICAgICAgICAgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PSA1MDMpIHtcbiAgICAgICAgICAgICAgICAvLyBMZXQncyBlbmNvZGUgYW4gZXhwb25lbnRpYWwgYmFja29mZlxuICAgICAgICAgICAgICAgIHJlcXVlc3QubGFzdF93YWl0ID0gKHJlcXVlc3RfZGF0YS5sYXN0X3dhaXQgfHwgNTAwKSAqIDI7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9wZW4ocmVxdWVzdF9kYXRhLnR5cGUscmVxdWVzdF9kYXRhLnVybCxyZXF1ZXN0X2RhdGEuYXN5bmMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdF9kYXRhLnR5cGUgPT0gJ1BPU1QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixyZXF1ZXN0X2RhdGEuY29udGVudCA/IHJlcXVlc3RfZGF0YS5jb250ZW50IDogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QuY3VzdG9tVUEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignVXNlci1BZ2VudCcscmVxdWVzdC5jdXN0b21VQSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKGRhdGFibG9jayk7XG4gICAgICAgICAgICAgICAgfSxyZXF1ZXN0X2RhdGEubGFzdF93YWl0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG91ciBTMyBidWNrZXRzIGV4cG9zZSB0aGUgU2VydmVyIGhlYWRlciBjcm9zcy1vcmlnaW5cbiAgICAgICAgICAgICAgICB2YXIgc2VydmVyID0gcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcignU2VydmVyJyk7XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZlciA9PT0gJ0FtYXpvblMzJykge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0X2RhdGEuc3VjY2Vzcy5jYWxsKG51bGwse1wiZXJyb3JcIiA6IFwiTm8gZGF0YVwifSw0MDMscmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPj0gMjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFfYmxvY2s7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RfZGF0YS5kYXRhVHlwZSA9PSAneG1sJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhX2Jsb2NrID0gdHlwZW9mKGRvY3VtZW50KSAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudChudWxsLCBcIm5vZGF0YVwiLCBudWxsKSA6IHsgJ2dldEVsZW1lbnRzQnlUYWdOYW1lJyA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH0gfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhX2Jsb2NrID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gcmVxdWVzdC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFfYmxvY2sgPSByZXF1ZXN0X2RhdGEuZGF0YVR5cGUgPT0gJ3htbCcgPyByZXF1ZXN0LnJlc3BvbnNlWE1MIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RfZGF0YS5kYXRhVHlwZSA9PSAndHh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09ICd1bmV4cGVjdGVkX2VvcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RfZGF0YS5zdWNjZXNzLmNhbGwobnVsbCx7fSxyZXF1ZXN0LnN0YXR1cyxyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RfZGF0YS5lcnJvci5jYWxsKG51bGwscmVxdWVzdC5yZXNwb25zZVRleHQscmVxdWVzdCx7J2Vycm9yJyA6IGUudHlwZSB8fCBlLm1lc3NhZ2UsICdzdGFjaycgOiBlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PSAyMDIgJiYgZGF0YV9ibG9jay5zdGF0dXMgPT0gXCJSVU5OSU5HXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5vcGVuKHJlcXVlc3RfZGF0YS50eXBlLHJlcXVlc3RfZGF0YS51cmwscmVxdWVzdF9kYXRhLmFzeW5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0X2RhdGEudHlwZSA9PSAnUE9TVCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LmN1c3RvbVVBKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdVc2VyLUFnZW50JyxyZXF1ZXN0LmN1c3RvbVVBKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2VuZChkYXRhYmxvY2spO1xuICAgICAgICAgICAgICAgICAgICB9LDUwMDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcXVlc3RfZGF0YS5zdWNjZXNzLmNhbGwobnVsbCxkYXRhX2Jsb2NrLHJlcXVlc3Quc3RhdHVzLHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIGRhdGFfYmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0X2RhdGEuZXJyb3IuY2FsbChudWxsLHJlcXVlc3QucmVzcG9uc2VUZXh0LHJlcXVlc3QscmVxdWVzdC5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoTUFTQ1AuTkVUV09SS19GQUlMICYmIE1BU0NQLk5FVFdPUktfRkFJTC5lbmFibGVkKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhdXNpbmcgbmV0d29yayBmYWlsdXJlXCIpO1xuICAgICAgICAgICAgcmVxdWVzdCA9IHsgJ29ucmVhZHlzdGF0ZWNoYW5nZScgOiByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZX07XG4gICAgICAgICAgICByZXF1ZXN0LnJlYWR5U3RhdGUgPSA0O1xuICAgICAgICAgICAgcmVxdWVzdC5zdGF0dXMgPSBNQVNDUC5ORVRXT1JLX0ZBSUwuc3RhdHVzIHx8IDUwMDtcbiAgICAgICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0ID0gXCJJbnRlcmNlcHRlZCBieSBOZXR3b3JrIEZhaWx1cmUgc2ltdWxhdG9yXCI7XG4gICAgICAgICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSgpO1xuICAgICAgICB9LDEwMDApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVxdWVzdC5zZW5kKGRhdGFibG9jayk7XG59O1xuXG5TZXJ2aWNlLnJlcXVlc3QgPSBmdW5jdGlvbih1cmwsY2FsbGJhY2ssbm9wYXJzZSkge1xuICAgIHZhciBtZXRob2QgPSAgTUFTQ1AuSUUgPyBkb19yZXF1ZXN0X2llIDogZG9fcmVxdWVzdDtcbiAgICBpZiAoTUFTQ1AuSUUgJiYgISB1cmwubWF0Y2goL15odHRwcz9cXDovKSkge1xuICAgICAgICBtZXRob2QgPSBkb19yZXF1ZXN0O1xuICAgIH1cbiAgICB2YXIgcGFyYW1zO1xuICAgIGlmICggISB1cmwgKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdXJsID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhcmFtcyA9ICB7IGFzeW5jOiB0cnVlLCB1cmw6IHVybCwgdGltZW91dDogNTAwMCwgdHlwZSA6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24ocmVzcG9uc2UscmVxLHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwobnVsbCx7XCJzdGF0dXNcIiA6IHN0YXR1cyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOmZ1bmN0aW9uKGRhdGEsc3RhdHVzLHhocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwobnVsbCxudWxsLGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAodXJsLmhhc093blByb3BlcnR5KCd1cmwnKSkge1xuICAgICAgICBwYXJhbXMgPSB1cmw7XG4gICAgICAgIHBhcmFtcy5zdWNjZXNzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChudWxsLG51bGwsZGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIHBhcmFtcy5lcnJvciA9IGZ1bmN0aW9uKHJlc3AscmVxLHN0YXR1cykge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChudWxsLHtcInN0YXR1c1wiOiBzdGF0dXN9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG5vcGFyc2UpIHtcbiAgICAgICAgcGFyYW1zLmRhdGFUeXBlID0gJ3R4dCc7XG4gICAgICAgIGlmIChub3BhcnNlID09PSBcInhtbFwiKSB7XG4gICAgICAgICAgICBwYXJhbXMuZGF0YVR5cGUgPSAneG1sJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBtZXRob2QuY2FsbChudWxsLHBhcmFtcyk7XG59O1xuXG4vKipcbiAqIFByaXZhdGUgbWV0aG9kIGZvciBwZXJmb3JtaW5nIGEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgdXNpbmcgSW50ZXJuZXQgRXhwbG9yZXIgOCBhbmQgdXAuIEFkYXB0cyB0aGUgXG4gKiBwYXJhbWV0ZXJzIHBhc3NlZCwgYW5kIGJ1aWxkcyBhbiBYRFIgb2JqZWN0LiBUaGVyZSBpcyBubyBzdXBwb3J0IGZvciBhIGxvY2tpbmdcbiAqIHN5bmNocm9ub3VzIG1ldGhvZCB0byBkbyB0aGVzZSByZXF1ZXN0cyAodGhhdCBpcyByZXF1aXJlZCBmb3IgVW5pdCB0ZXN0aW5nKSBzbyBhbiBhbGVydCBib3ggaXMgdXNlZFxuICogdG8gcHJvdmlkZSB0aGUgbG9ja2luZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YUhhc2ggSGFzaCB3aXRoIHRoZSBkYXRhIGFuZCBzZXR0aW5ncyB1c2VkIHRvIGJ1aWxkIHRoZSBxdWVyeS5cbiAqL1xuXG5cbnZhciBkb19yZXF1ZXN0X2llID0gZnVuY3Rpb24oZGF0YUhhc2gpXG57XG4gICAgLy8gVXNlIFhEUlxuICAgIHZhciB4ZHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZGVkID0gZmFsc2U7XG4gICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgIHhkci5vbmVycm9yID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgZGF0YUhhc2guZXJyb3IoeGRyLHhkcix7XCJtZXNzYWdlXCIgOiBcIlhEb21haW5SZXF1ZXN0IGVycm9yXCJ9KTtcbiAgICB9O1xuICAgIHhkci5vbnByb2dyZXNzID0gZnVuY3Rpb24oKSB7IH07XG4gICAgeGRyLm9wZW4oXCJHRVRcIixkYXRhSGFzaC51cmwrXCI/XCIrbWFrZV9wYXJhbXMoZGF0YUhhc2guZGF0YSkpO1xuICAgIHhkci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKGRhdGFIYXNoLmRhdGFUeXBlID09ICd4bWwnKSB7XG4gICAgICAgICAgICB2YXIgZG9tID0gbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpO1xuICAgICAgICAgICAgZG9tLmFzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICBkb20ubG9hZFhNTCh4ZHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIGRhdGFIYXNoLnN1Y2Nlc3MoZG9tLCAnc3VjY2VzcycseGRyKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhSGFzaC5kYXRhVHlwZSA9PSAnanNvbicpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBudWxsO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSBKU09OLnBhcnNlKHhkci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICBkYXRhSGFzaC5lcnJvcih4ZHIseGRyLHtcIm1lc3NhZ2VcIiA6IFwiSlNPTiBwYXJzaW5nIGVycm9yXCJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICBkYXRhSGFzaC5zdWNjZXNzKHBhcnNlZCwnc3VjY2VzcycseGRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFIYXNoLnN1Y2Nlc3MoeGRyLnJlc3BvbnNlVGV4dCwgJ3N1Y2Nlc3MnLCB4ZHIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBXZSBjYW4ndCBzZXQgdGhlIGNvbnRlbnQtdHlwZSBvbiB0aGUgcGFyYW1ldGVycyBoZXJlIHRvIHVybC1lbmNvZGVkIGZvcm0gZGF0YS5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgeGRyLnNlbmQoKTtcbiAgICB9LCAwKTtcbiAgICB3aGlsZSAoISBkYXRhSGFzaC5hc3luYyAmJiAhIGxvYWRlZCAmJiBjb3VudGVyIDwgMykge1xuICAgICAgICBhbGVydChcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHN5bmNocm9ub3VzIHJlcXVlc3RzLCBjbGljayBPSyB3aGlsZSB3ZSdyZSB3YWl0aW5nIGZvciBkYXRhXCIpO1xuICAgICAgICBjb3VudGVyICs9IDE7XG4gICAgfVxuICAgIGlmICggISBkYXRhSGFzaC5hc3luYyAmJiAhIGxvYWRlZCApIHtcbiAgICAgICAgYWxlcnQoXCJObyBkYXRhXCIpO1xuICAgIH1cbn07XG5cbmxldCBoYW5kbGVfcmVxdWVzdF9zdWNjZXNzID0gZnVuY3Rpb24oZGF0YSxzdGF0dXMseGhyKSB7XG4gICAgU2VydmljZS5fY3VycmVudF9yZXFzIC09IDE7XG4gICAgaWYgKCB4aHIgJiYgeGhyLnN0YXR1cyAhPT0gbnVsbCAmJiB4aHIuc3RhdHVzID09PSAwICkge1xuICAgICAgICBiZWFuLmZpcmUodGhpcyxcImVycm9yXCIsW3tcImVycm9yXCI6IFwiWmVybyByZXR1cm4gc3RhdHVzIGZyb20gcmVxdWVzdCBcIn1dKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q29tcGxldGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmVjZWl2ZWRfZmxhZyA9IHRoaXMuX2RhdGFSZWNlaXZlZChkYXRhLHN0YXR1cyk7XG5cbiAgICBpZiAocmVjZWl2ZWRfZmxhZykge1xuICAgICAgICB0aGlzLmdvdFJlc3VsdCgpO1xuICAgIH1cblxuICAgIGlmIChyZWNlaXZlZF9mbGFnICE9PSBudWxsICYmIHR5cGVvZiByZWNlaXZlZF9mbGFnICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnJlcXVlc3RDb21wbGV0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEluY29tcGxldGUoKTtcbiAgICB9XG59O1xuXG5sZXQgaGFuZGxlX3JlcXVlc3RfZXJyb3IgPSBmdW5jdGlvbihyZXNwb25zZSxyZXEsc3RhdHVzKSB7XG4gICAgU2VydmljZS5fY3VycmVudF9yZXFzIC09IDE7XG4gICAgaWYgKHR5cGVvZiBzdGF0dXMgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3RhdHVzID0geyAnZXJyb3InIDogc3RhdHVzICwgJ3JlcXVlc3QnIDogcmVxIH07XG4gICAgfVxuICAgIGlmICghIGlzTmFOKHN0YXR1cykgKSB7XG4gICAgICAgIHN0YXR1cyA9IHsgXCJlcnJvclwiIDogXCJSZXFldXN0IGVycm9yXCIsIFwic3RhdHVzXCIgOiBzdGF0dXMsICdyZXF1ZXN0JyA6IHJlcSB9O1xuICAgIH1cbiAgICBiZWFuLmZpcmUodGhpcyxcImVycm9yXCIsW3N0YXR1c10pO1xuICAgIGJlYW4uZmlyZShTZXJ2aWNlLCdyZXF1ZXN0Q29tcGxldGUnKTtcbiAgICB0aGlzLnJlcXVlc3RDb21wbGV0ZSgpO1xufTtcblxubGV0IHBlcmZvcm1fcmVxdWVzdCA9IGZ1bmN0aW9uKHJlcXVlc3RfZGF0YSkge1xuXG4gICAgaWYgKHJlcXVlc3RfZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghIHJlcXVlc3RfZGF0YSApIHtcbiAgICAgICAgYmVhbi5maXJlKHRoaXMsXCJlcnJvclwiLFtcIk5vIHJlcXVlc3QgZGF0YVwiXSk7XG4gICAgICAgIGJlYW4uZmlyZShTZXJ2aWNlLFwicmVxdWVzdENvbXBsZXRlXCIsW3RoaXNdKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q29tcGxldGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRfcGFyYW1zID0ge1xuICAgICAgICBhc3luYzogICAgICB0aGlzLmFzeW5jLFxuICAgICAgICB1cmw6ICAgICAgICByZXF1ZXN0X2RhdGEudXJsIHx8IHRoaXMuX2VuZHBvaW50VVJMLFxuICAgICAgICB0aW1lb3V0OiAgICA1MDAwLFxuICAgICAgICBlcnJvcjogICAgICBoYW5kbGVfcmVxdWVzdF9lcnJvci5iaW5kKHRoaXMpLFxuICAgICAgICBzdWNjZXNzOiAgICBoYW5kbGVfcmVxdWVzdF9zdWNjZXNzLmJpbmQodGhpcylcbiAgICB9O1xuICAgIGRlZmF1bHRfcGFyYW1zID0gT2JqZWN0LmFzc2lnbihyZXF1ZXN0X2RhdGEsZGVmYXVsdF9wYXJhbXMpO1xuXG4gICAgZG9fcmVxdWVzdChkZWZhdWx0X3BhcmFtcyk7XG5cbiAgICBTZXJ2aWNlLl9jdXJyZW50X3JlcXMgKz0gMTtcbn07XG5cblxuYmFzZS5yZXRyaWV2ZSA9IGZ1bmN0aW9uKGFnaSxjYWxsYmFjaylcbntcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBTZXJ2aWNlLl9jdXJyZW50X3JlcXMgPSBTZXJ2aWNlLl9jdXJyZW50X3JlcXMgfHwgMDtcbiAgICBTZXJ2aWNlLl93YWl0aW5nX3JlcXMgPSBTZXJ2aWNlLl93YWl0aW5nX3JlcXMgfHwgMDtcbiAgICBcbiAgICBpZiAoU2VydmljZS5NQVhfUkVRVUVTVFMpIHtcbiAgICAgICAgdmFyIG15X2Z1bmMgPSBhcmd1bWVudHMuY2FsbGVlO1xuICAgICAgICBpZiAoU2VydmljZS5fY3VycmVudF9yZXFzID4gU2VydmljZS5NQVhfUkVRVUVTVFMpIHtcbiAgICAgICAgICAgIFNlcnZpY2UuX3dhaXRpbmdfcmVxcyArPSAxO1xuICAgICAgICAgICAgYmVhbi5hZGQoU2VydmljZSwncmVxdWVzdENvbXBsZXRlJyxmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBiZWFuLnJlbW92ZSh0aGlzLCdyZXF1ZXN0Q29tcGxldGUnLGFyZ3VtZW50cy5jYWxsZWUpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIFNlcnZpY2UuX3dhaXRpbmdfcmVxcyAtPSAxO1xuICAgICAgICAgICAgICAgICAgICBteV9mdW5jLmNhbGwoc2VsZixhZ2ksY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0sMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhZ2kpIHtcbiAgICAgICAgdGhpcy5hZ2kgPSBhZ2k7XG4gICAgfVxuXG4gICAgaWYgKGFnaSAmJiBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmFnaSA9IGFnaTtcblxuICAgICAgICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICB2YXIgZG9uZV9yZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGRvbmVfZnVuYyA9IGZ1bmN0aW9uKGVycixvYmopIHtcbiAgICAgICAgICAgIGJlYW4ucmVtb3ZlKHNlbGYsXCJyZXN1bHRSZWNlaXZlZFwiLGRvbmVfZnVuYyk7XG4gICAgICAgICAgICBiZWFuLnJlbW92ZShzZWxmLFwiZXJyb3JcIixkb25lX2Z1bmMpO1xuICAgICAgICAgICAgYmVhbi5yZW1vdmUoc2VsZixcInJlcXVlc3RDb21wbGV0ZVwiLGRvbmVfZnVuYyk7XG4gICAgICAgICAgICBpZiAoICEgZG9uZV9yZXN1bHQgKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHNlbGYsZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHNlbGYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmVfcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgYmVhbi5hZGQoc2VsZixcInJlc3VsdFJlY2VpdmVkXCIsZG9uZV9mdW5jKTtcbiAgICAgICAgYmVhbi5hZGQoc2VsZixcImVycm9yXCIsZG9uZV9mdW5jKTtcbiAgICAgICAgYmVhbi5hZGQoc2VsZixcInJlcXVlc3RDb21wbGV0ZVwiLGRvbmVfZnVuYyk7XG4gICAgfVxuICAgIHZhciByZXF1ZXN0X2RhdGEgPSB0aGlzLnJlcXVlc3REYXRhKCk7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3RfZGF0YSkudGhlbiggcGVyZm9ybV9yZXF1ZXN0LmJpbmQodGhpcykgKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbn0pKFNlcnZpY2UucHJvdG90eXBlKTtcblxuLyoqXG4gKiAgR2V0IHRoZSBwYXJhbWV0ZXJzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGJ1aWxkIHRoaXMgcmVxdWVzdC4gSW1wbGVtZW50YXRpb25zIG9mIHNlcnZpY2VzIHdpbGxcbiAqICBvdmVycmlkZSB0aGlzIG1ldGhvZCwgcmV0dXJuaW5nIHRoZSBwYXJhbWV0ZXJzIHRvIGJlIHVzZWQgdG8gYnVpbGQgdGhlIFhIUi5cbiAqL1xuXG5TZXJ2aWNlLnByb3RvdHlwZS5yZXF1ZXN0RGF0YSA9IGZ1bmN0aW9uKClcbntcbiAgICBcbn07XG5cblNlcnZpY2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKVxue1xuICAgIGZvciAodmFyIGNsYXp6IGluIE1BU0NQKSB7XG4gICAgICAgIGlmICh0aGlzLl9fY2xhc3NfXyA9PSBNQVNDUFtjbGF6el0pIHtcbiAgICAgICAgICAgIHJldHVybiBcIk1BU0NQLlwiK2NsYXp6O1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBGb3IgdGhpcyBzZXJ2aWNlLCByZWdpc3RlciBhIHNlcXVlbmNlIHJlbmRlcmluZyB2aWV3IHNvIHRoYXQgdGhlIHJlc3VsdHMgY2FuIGJlIG1hcmtlZCB1cCBkaXJlY3RseVxuICogb24gdG8gYSBzZXF1ZW5jZS4gVGhpcyBtZXRob2Qgd2lsbCBkbyBub3RoaW5nIGlmIHRoZSBzZXJ2aWNlIGRvZXMgbm90IGtub3cgaG93IHRvIHJlbmRlciB0aGUgXG4gKiByZXN1bHRzIG9udG8gdGhlIHNlcXVlbmNlLlxuICogQHBhcmFtIHtNQVNDUC5TZXF1ZW5jZVJlbmRlcmVyfSBzZXF1ZW5jZVJlbmRlcmVyIFNlcXVlbmNlIHJlbmRlcmVyIG9iamVjdCB0byByZW5kZXIgcmVzdWx0cyB1cG9uXG4gKi9cblNlcnZpY2UucHJvdG90eXBlLnJlZ2lzdGVyU2VxdWVuY2VSZW5kZXJlciA9IGZ1bmN0aW9uKHNlcXVlbmNlUmVuZGVyZXIsb3B0aW9ucylcbntcbiAgICBpZiAodGhpcy5zZXR1cFNlcXVlbmNlUmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcnMgPSB0aGlzLnJlbmRlcmVycyB8fCBbXTtcbiAgICAgICAgdGhpcy5zZXR1cFNlcXVlbmNlUmVuZGVyZXIoc2VxdWVuY2VSZW5kZXJlcixvcHRpb25zKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlcnMucHVzaChzZXF1ZW5jZVJlbmRlcmVyKTtcbiAgICB9XG4gICAgc2VxdWVuY2VSZW5kZXJlci50cmlnZ2VyKCdyZWFkZXJSZWdpc3RlcmVkJyxbdGhpc10pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuU2VydmljZS5wcm90b3R5cGUucmVzZXRPblJlc3VsdCA9IGZ1bmN0aW9uKHNlcXVlbmNlUmVuZGVyZXIscmVuZGVyZWQsdHJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHJlc3VsdF9mdW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYudW5iaW5kKCdyZXN1bHRSZWNlaXZlZCcscmVzdWx0X2Z1bmMpO1xuICAgICAgICBzZXF1ZW5jZVJlbmRlcmVyLmJpbmQoJ3Jlc3VsdHNSZW5kZXJlZCcsY2xlYXJfZnVuYyk7XG4gICAgfTtcblxuICAgIHZhciBjbGVhcl9mdW5jID0gZnVuY3Rpb24ocmVhZGVyKSB7XG4gICAgICAgIGlmIChyZWFkZXIgIT09IHNlbGYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXF1ZW5jZVJlbmRlcmVyLnVuYmluZCgncmVzdWx0c1JlbmRlcmVkJyxjbGVhcl9mdW5jKTtcbiAgICAgICAgcmVuZGVyZWQuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHNlcXVlbmNlUmVuZGVyZXIucmVtb3ZlKHRyYWNrLG9iaik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5iaW5kKCdyZXN1bHRSZWNlaXZlZCcscmVzdWx0X2Z1bmMpO1xufTtcblxuXG4vKipcbiAqIEZvciB0aGlzIHNlcnZpY2UsIHNldCB1cCBhIHNlcXVlbmNlIHJlbmRlcmVyIHNvIHRoYXQgdGhlIGV2ZW50cyBhcmUgY29ubmVjdGVkIHVwIHdpdGggcmVjZWl2aW5nIGRhdGEuXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgb3ZlcnJpZGRlbiB0byB3aXJlIHVwIHRoZSBzZXF1ZW5jZSByZW5kZXJlciB0byB0aGUgc2VydmljZS5cbiAqIEBwYXJhbSB7TUFTQ1AuU2VxdWVuY2VSZW5kZXJlcn0gc2VxdWVuY2VSZW5kZXJlciBTZXF1ZW5jZSByZW5kZXJlciBvYmplY3QgdG8gcmVuZGVyIHJlc3VsdHMgdXBvblxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5zZXR1cFNlcXVlbmNlUmVuZGVyZXIgPSBmdW5jdGlvbihzZXF1ZW5jZVJlbmRlcmVyKVxue1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqIERlZmF1bHQgY29uc3RydWN0b3JcbiAqICBAY2xhc3MgIFN1cGVyLWNsYXNzIGZvciBhbGwgcmVzdWx0cyBmcm9tIE1BU0NQIHNlcnZpY2VzLlxuICovXG5TZXJ2aWNlLlJlc3VsdCA9IGZ1bmN0aW9uKClcbnsgIFxufTtcblxuU2VydmljZS5SZXN1bHQucHJvdG90eXBlID0ge1xuICAgIGFnaSAgICAgOiAgIG51bGwsXG4gICAgcmVhZGVyICA6ICAgbnVsbFxufTtcblxuXG5TZXJ2aWNlLlJlc3VsdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZXJ2aWNlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUVBOzs7Ozs7OztBQU9BO0FBRUE7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTNCQTtBQTZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBT0E7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQVFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBOzs7Ozs7Ozs7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7QUFNQTs7Ozs7O0FBTUE7Ozs7Ozs7O0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTs7Ozs7O0FBS0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7O0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBOzs7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBRUE7Ozs7O0FBR0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFLQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../gator/js/lib/Service.js\n')},"../gator/js/lib/ServiceCaching.js":
/*!*****************************************!*\
  !*** ../gator/js/lib/ServiceCaching.js ***!
  \*****************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Service */ "../gator/js/lib/Service.js");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MASCP */ "../gator/js/lib/MASCP.js");\n\n\nvar get_db_data, store_db_data, search_service, clear_service, find_latest_data, data_timestamps, sweep_cache, cached_accessions, begin_transaction, end_transaction, first_accession;\nvar max_age = 0,\n    min_age = 0;\n\nclass CachingService extends _Service__WEBPACK_IMPORTED_MODULE_0__["default"] {}\n\nCachingService.BeginCaching = function () {\n  CachingService.CacheService(CachingService.prototype);\n}; // To do 7 days ago, you do\n// var date = new Date();\n// date.setDate(date.getDate() - 1);\n// Service.SetMinimumFreshnessAge(date);\n// Set the minimum age if you want nothing OLDER than this date\n\n\nCachingService.SetMinimumAge = function (date) {\n  if (date === 0) {\n    min_age = 0;\n  } else {\n    min_age = date.getTime();\n  }\n}; // Set the maximum age if you want nothing NEWER than this date\n\n\nCachingService.SetMaximumAge = function (date) {\n  if (date === 0) {\n    max_age = 0;\n  } else {\n    max_age = date.getTime();\n  }\n};\n\nCachingService.SweepCache = function (date) {\n  if (!date) {\n    date = new Date();\n  }\n\n  sweep_cache(date.getTime());\n};\n\nCachingService.CacheService = function (reader) {\n  if (reader.prototype && reader.prototype.retrieve.caching || reader.retrieve.caching) {\n    return;\n  }\n\n  var _oldRetrieve = reader.retrieve;\n  var has_avoid;\n\n  reader.retrieve = function (agi, cback) {\n    var self = this;\n    var id = agi ? agi : self.agi;\n\n    if (!id) {\n      _oldRetrieve.call(self, id, cback);\n\n      return self;\n    }\n\n    id = id.toLowerCase();\n    self.agi = id;\n\n    if (self.avoid_database) {\n      if (has_avoid) {\n        return;\n      }\n\n      has_avoid = self._dataReceived;\n\n      self._dataReceived = function () {\n        return function (dat) {\n          var res = has_avoid.call(this, dat);\n          var id = self.agi;\n\n          if (res && this.result && this.result._raw_data !== null) {\n            store_db_data(id, this.toString(), this.result._raw_data || {});\n          }\n\n          dat = {};\n          return res;\n        };\n      }();\n\n      cback.call(self);\n      return;\n    }\n\n    if (has_avoid && !self.avoid_database) {\n      self._dataReceived = has_avoid;\n      has_avoid = null;\n      cback.call(self);\n      return;\n    }\n\n    get_db_data(id, self.toString(), function (err, data) {\n      if (data) {\n        if (cback) {\n          self.result = null;\n\n          var done_func = function done_func(err) {\n            bean.remove(self, "resultReceived", arguments.callee);\n            bean.remove(self, "error", arguments.callee);\n            cback.call(self, err);\n          };\n\n          bean.add(self, "resultReceived", done_func);\n          bean.add(self, "error", done_func);\n        }\n\n        var received_flag = self._dataReceived(data, "db");\n\n        if (received_flag) {\n          self.gotResult();\n        }\n\n        if (received_flag !== null) {\n          self.requestComplete();\n        } else {\n          self.requestIncomplete();\n        }\n      } else {\n        var old_received = self._dataReceived;\n\n        self._dataReceived = function () {\n          return function (dat, source) {\n            var res = old_received.call(this, dat, source);\n\n            if (res && this.result && this.result._raw_data !== null) {\n              store_db_data(id, this.toString(), this.result._raw_data || {});\n            }\n\n            this._dataReceived = null;\n            this._dataReceived = old_received;\n            dat = {};\n            return res;\n          };\n        }();\n\n        var old_url = self._endpointURL; // If we have a maximum age, i.e. we don\'t want anything newer than a date\n        // we should not actually do a request that won\'t respect that.\n        // We can set a minimum age, since the latest data will be, by definition be the latest!\n\n        if (max_age !== 0) {\n          self._endpointURL = null;\n        }\n\n        _oldRetrieve.call(self, id, cback);\n\n        self._endpointURL = old_url;\n      }\n    });\n    return self;\n  };\n\n  reader.retrieve.caching = true;\n};\n\nCachingService.FindCachedService = function (service, cback) {\n  var serviceString = service.toString();\n  search_service(serviceString, cback);\n  return true;\n};\n\nCachingService.CachedAgis = function (service, cback) {\n  var serviceString = service.toString();\n  cached_accessions(serviceString, cback);\n  return true;\n};\n\nCachingService.FirstAgi = function (service, cback) {\n  var serviceString = service.toString();\n  first_accession(serviceString, cback);\n  return true;\n};\n\nCachingService.ClearCache = function (service, agi, callback) {\n  var serviceString = service.toString();\n\n  if (!callback) {\n    callback = function callback() {};\n  }\n\n  clear_service(serviceString, agi, callback);\n  return true;\n};\n\nCachingService.HistoryForService = function (service, cback) {\n  var serviceString = service.toString();\n  data_timestamps(serviceString, null, cback);\n};\n\nCachingService.Snapshot = function (service, date, wanted, cback) {\n  var serviceString = service.toString();\n  get_snapshot(serviceString, null, wanted, cback);\n};\n\nvar transaction_ref_count = 0;\nvar waiting_callbacks = [];\n\nCachingService.BulkOperation = function (callback) {\n  transaction_ref_count++;\n\n  var trans = function trans(callback) {\n    if (!callback) {\n      callback = function callback() {};\n    }\n\n    transaction_ref_count--;\n    waiting_callbacks.push(callback);\n\n    if (transaction_ref_count == 0) {\n      end_transaction(function (err) {\n        waiting_callbacks.forEach(function (cback) {\n          cback(err);\n        });\n        waiting_callbacks = [];\n      });\n    }\n  };\n\n  begin_transaction(callback, trans);\n  return trans;\n};\n\nvar setup_idb = function setup_idb(idb) {\n  var transaction_store_db;\n  var transaction_find_latest;\n  var transaction_data = [];\n\n  begin_transaction = function begin_transaction(callback, trans) {\n    if (transaction_store_db != null) {\n      setTimeout(function () {\n        callback.call({\n          "transaction": trans\n        });\n      }, 0);\n      return false;\n    }\n\n    transaction_store_db = store_db_data;\n\n    store_db_data = function store_db_data(acc, service, data) {\n      transaction_data.push([acc, service, data]);\n    };\n\n    setTimeout(function () {\n      callback.call({\n        "transaction": trans\n      });\n    }, 0);\n    return true;\n  };\n\n  end_transaction = function end_transaction(callback) {\n    if (transaction_store_db === null) {\n      callback(null);\n      return;\n    }\n\n    store_db_data = transaction_store_db;\n    transaction_store_db = null;\n    var trans = idb.transaction(["cached"], "readwrite");\n    var store = trans.objectStore("cached");\n\n    trans.oncomplete = function (event) {\n      callback(null);\n    };\n\n    trans.onerror = function (event) {\n      callback(event.target.errorCode);\n    };\n\n    while (transaction_data.length > 0) {\n      var row = transaction_data.shift();\n      var acc = row[0];\n      var service = row[1];\n      var data = row[2];\n\n      if (typeof data != \'object\' || data.constructor.name !== \'Object\' || typeof Document != \'undefined\' && data instanceof Document) {\n        continue;\n      }\n\n      var dateobj = data.retrieved ? data.retrieved : new Date();\n\n      if (typeof dateobj === \'string\' || typeof dateobj === \'number\') {\n        dateobj = new Date(dateobj);\n      }\n\n      dateobj.setUTCHours(0);\n      dateobj.setUTCMinutes(0);\n      dateobj.setUTCSeconds(0);\n      dateobj.setUTCMilliseconds(0);\n      var reporter = insert_report_func(acc, service);\n      var datetime = dateobj.getTime();\n      data.id = [acc, service, datetime];\n      data.acc = acc;\n      data.service = service;\n\n      if (window.msIndexedDB) {\n        data.serviceacc = service + acc;\n      }\n\n      data.retrieved = datetime;\n      var req = store.put(data);\n      req.onerror = reporter;\n    }\n  };\n\n  var insert_report_func = function insert_report_func(acc, service) {\n    return function (err, rows) {\n      if (!err && rows) {}\n    };\n  };\n\n  store_db_data = function store_db_data(acc, service, data) {\n    var trans = idb.transaction(["cached"], "readwrite");\n    var store = trans.objectStore("cached");\n\n    if (typeof data != \'object\' || typeof Document != \'undefined\' && data instanceof Document) {\n      return;\n    }\n\n    var dateobj = data.retrieved ? data.retrieved : new Date();\n\n    if (typeof dateobj === \'string\' || typeof dateobj === \'number\') {\n      dateobj = new Date(dateobj);\n    }\n\n    dateobj.setUTCHours(0);\n    dateobj.setUTCMinutes(0);\n    dateobj.setUTCSeconds(0);\n    dateobj.setUTCMilliseconds(0);\n    var reporter = insert_report_func(acc, service);\n    var datetime = dateobj.getTime();\n    data.id = [acc, service, datetime];\n    data.acc = acc;\n\n    if (window.msIndexedDB) {\n      data.serviceacc = service + acc;\n    }\n\n    data.service = service;\n    data.retrieved = datetime;\n    var req = store.put(data); // req.onsuccess = reporter;\n\n    req.onerror = reporter;\n  };\n\n  get_db_data = function get_db_data(acc, service, cback) {\n    var timestamps = max_age ? [min_age, max_age] : [min_age, new Date().getTime()];\n    return find_latest_data(acc, service, timestamps, cback);\n  };\n\n  find_latest_data = function find_latest_data(acc, service, timestamps, cback) {\n    if (!acc) {\n      cback.call();\n      return;\n    }\n\n    var trans = idb.transaction(["cached"], "readonly");\n    var store = trans.objectStore("cached");\n    var idx = store.index(window.msIndexedDB ? "entries-ms" : "entries");\n    var max_stamp = -1;\n    var result = null;\n    var range = IDBKeyRange.only(window.msIndexedDB ? service + acc : [acc, service]);\n\n    idx.openCursor(range).onsuccess = function (event) {\n      var cursor = event.target.result;\n\n      if (cursor) {\n        var ts = window.msIndexedDB ? cursor.value.retrieved : cursor.primaryKey[2];\n        var c_acc = window.msIndexedDB ? cursor.value.acc : cursor.primaryKey[0];\n        var serv = window.msIndexedDB ? cursor.value.service : cursor.primaryKey[1];\n\n        if (ts >= timestamps[0] && ts <= timestamps[1]) {\n          if (ts > max_stamp && c_acc == acc && serv == service) {\n            result = cursor.value;\n            max_stamp = ts;\n            result.retrieved = new Date(ts);\n          }\n        }\n\n        cursor.continue();\n      } else {\n        if (result) {// result = result.data\n        }\n\n        cback.call(null, null, result);\n      }\n    };\n  };\n\n  sweep_cache = function sweep_cache(timestamp) {\n    var trans = idb.transaction(["cached"], "readwrite");\n    var store = trans.objectStore("cached");\n    var idx = store.index("timestamps");\n    var results = [];\n\n    idx.openKeyCursor(null, "nextunique").onsuccess = function (event) {\n      var cursor = event.target.result;\n\n      if (cursor) {\n        if (timestamp >= cursor.key[1]) {\n          store.delete(cursor.primaryKey);\n        }\n\n        cursor.continue();\n      }\n    };\n  };\n\n  data_timestamps = function data_timestamps(service, timestamps, cback) {\n    if (!timestamps || typeof timestamps != \'object\' || !timestamps.length) {\n      timestamps = [0, new Date().getTime()];\n    }\n\n    var trans = idb.transaction(["cached"], "readonly");\n    var store = trans.objectStore("cached");\n    var idx = store.index("timestamps");\n    var results = [];\n\n    idx.openKeyCursor(null, "nextunique").onsuccess = function (event) {\n      var cursor = event.target.result;\n\n      if (cursor) {\n        if (cursor.key[0] == service && timestamps[0] <= cursor.key[1] && timestamps[1] >= cursor.key[1]) {\n          results.push(new Date(parseInt(cursor.key[1])));\n        }\n\n        cursor.continue();\n      } else {\n        cback.call(null, results);\n      }\n    };\n  };\n\n  clear_service = function clear_service(service, acc, callback) {\n    var trans = idb.transaction(["cached"], "readwrite");\n    var store = trans.objectStore("cached");\n    var idx = store.index("services");\n    var range = IDBKeyRange.only(service);\n\n    idx.openCursor(range).onsuccess = function (event) {\n      var cursor = event.target.result;\n\n      if (cursor) {\n        if (!acc || cursor.value.acc == acc) {\n          if (window.msIndexedDB) {\n            store.delete(cursor.value.serviceacc);\n          } else {\n            store.delete(cursor.value.id ? cursor.value.id : cursor.primaryKey);\n          }\n        }\n\n        cursor.continue();\n      }\n    };\n\n    trans.oncomplete = function () {\n      callback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"]);\n    };\n  };\n\n  search_service = function search_service(service, cback) {\n    var trans = idb.transaction(["cached"], "readonly");\n    var store = trans.objectStore("cached");\n    var idx = store.index("services");\n    var results = [];\n    var range = IDBKeyRange.only(service);\n\n    idx.openKeyCursor(range, "nextunique").onsuccess = function (event) {\n      var cursor = event.target.result;\n\n      if (cursor) {\n        results.push(cursor.key);\n        cursor.continue();\n      } else {\n        cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], results);\n      }\n    };\n  };\n\n  first_accession = function first_accession(service, cback) {\n    var trans = idb.transaction(["cached"], "readonly");\n    var store = trans.objectStore("cached");\n    var idx = store.index("services");\n    var range = IDBKeyRange.only(service);\n\n    idx.openCursor(range, "nextunique").onsuccess = function (event) {\n      var cursor = event.target.result;\n\n      if (cursor) {\n        cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], cursor.value.acc);\n      } else {\n        cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], null);\n      }\n    };\n  };\n\n  cached_accessions = function cached_accessions(service, cback) {\n    var trans = idb.transaction(["cached"], "readonly");\n    var store = trans.objectStore("cached");\n    var idx = store.index("services");\n    var results = [];\n    var range = IDBKeyRange.only(service);\n\n    idx.openCursor(range).onsuccess = function (event) {\n      var cursor = event.target.result;\n\n      if (cursor) {\n        results.push(cursor.value.acc);\n        cursor.continue();\n      } else {\n        cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], results);\n      }\n    };\n  };\n};\n\nvar setup_websql = function setup_websql(db) {\n  db.all(\'SELECT version from versions where tablename = "datacache"\', function (err, rows) {\n    var version = rows && rows.length > 0 ? rows[0].version : null;\n\n    if (version == 1.3) {\n      if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events) {\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events.emit(\'ready\');\n      }\n\n      if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready) {\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready();\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n      } else {\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n      }\n\n      return;\n    }\n\n    if (!version || version == "" || version < 1.0) {\n      db.exec(\'CREATE TABLE if not exists versions (version REAL, tablename TEXT);\');\n      db.exec(\'CREATE TABLE if not exists "datacache" (agi TEXT,service TEXT,retrieved REAL,data TEXT);\', function (err) {\n        if (err && err != "Error: not an error") {\n          throw err;\n        }\n      });\n      db.exec(\'DELETE FROM versions where tablename = "datacache"\');\n      db.exec(\'INSERT INTO versions(version,tablename) VALUES(1.1,"datacache");\', function (err, rows) {\n        if (!err) {//                        console.log("Upgrade to 1.1 completed");\n        }\n      });\n      version = 1.1;\n    }\n\n    if (version < 1.2) {\n      db.exec(\'DROP TABLE if exists datacache_tmp;\');\n      db.exec(\'CREATE TABLE if not exists datacache_tmp (acc TEXT,service TEXT,retrieved REAL,data TEXT);\');\n      db.exec(\'INSERT INTO datacache_tmp(acc,service,retrieved,data) SELECT agi,service,retrieved,data FROM datacache;\');\n      db.exec(\'DROP TABLE datacache;\');\n      db.exec(\'ALTER TABLE datacache_tmp RENAME TO datacache;\');\n      db.exec(\'CREATE INDEX accessions on datacache(acc);\');\n      db.exec(\'CREATE INDEX accessions_service on datacache(acc,service);\');\n      db.exec(\'DELETE FROM versions where tablename = "datacache"\');\n      db.exec(\'INSERT INTO versions(version,tablename) VALUES(1.2,"datacache");\', function (err, rows) {\n        if (!err) {//                          console.log("Upgrade to 1.2 completed");\n        }\n      });\n      version = 1.2;\n    }\n\n    if (version < 1.3) {\n      db.exec(\'CREATE INDEX if not exists services on datacache(service);\');\n      db.exec(\'DELETE FROM versions where tablename = "datacache"\');\n      db.exec(\'INSERT INTO versions(version,tablename) VALUES(1.3,"datacache");\', function (err, rows) {\n        if (!err) {\n          if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events) {\n            _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events.emit(\'ready\');\n          }\n\n          if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready) {\n            _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready();\n            _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n          } else {\n            _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n          }\n        }\n      });\n      version = 1.3;\n    }\n  });\n\n  begin_transaction = function begin_transaction(callback, trans) {\n    callback.call({\n      "transaction": trans\n    });\n  };\n\n  end_transaction = function end_transaction(callback) {\n    callback();\n  };\n\n  sweep_cache = function sweep_cache(timestamp) {\n    db.all("DELETE from datacache where retrieved <= ? ", [timestamp], function () {});\n  };\n\n  clear_service = function clear_service(service, acc, callback) {\n    var servicename = service;\n    servicename += "%";\n\n    if (!acc) {\n      db.all("DELETE from datacache where service like ? ", [servicename], function () {\n        callback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"]);\n      });\n    } else {\n      db.all("DELETE from datacache where service like ? and acc = ?", [servicename, acc.toLowerCase()], function () {\n        callback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"]);\n      });\n    }\n  };\n\n  search_service = function search_service(service, cback) {\n    db.all("SELECT distinct service from datacache where service like ? ", [service + "%"], function (err, records) {\n      var results = {};\n\n      if (records && records.length > 0) {\n        records.forEach(function (record) {\n          results[record.service] = true;\n        });\n      }\n\n      var uniques = [];\n\n      for (var k in results) {\n        if (results.hasOwnProperty(k)) {\n          uniques.push(k);\n        }\n      }\n\n      cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], uniques);\n      return uniques;\n    });\n  };\n\n  first_accession = function first_accession(service, cback) {\n    db.all("SELECT distinct acc from datacache where service = ? limit 1", [service], function (err, records) {\n      if (!records || records.length < 1) {\n        cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], null);\n      } else {\n        cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], records[0].acc);\n      }\n    });\n  };\n\n  cached_accessions = function cached_accessions(service, cback) {\n    db.all("SELECT distinct acc from datacache where service = ?", [service], function (err, records) {\n      var results = [];\n\n      for (var i = 0; i < records.length; i++) {\n        results.push(records[i].acc);\n      }\n\n      cback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"], results);\n    });\n  };\n\n  get_snapshot = function get_snapshot(service, timestamps, wanted, cback) {\n    if (!timestamps || typeof timestamps != \'object\' || !timestamps.length) {\n      timestamps = [0, new Date().getTime()];\n    }\n\n    var sql;\n    var args = [service, timestamps[0], timestamps[1]];\n\n    if (wanted && Array.isArray(wanted)) {\n      var question_marks = new Array(wanted.length + 1).join(\',?\').substring(1);\n      args = args.concat(wanted);\n      sql = "SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? AND acc in (" + question_marks + ") ORDER BY retrieved ASC";\n    } else {\n      if (wanted && /^\\d+$/.test(wanted.toString())) {\n        sql = "SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? LIMIT ? ORDER BY retrieved ASC";\n        args = args.concat(parseInt(wanted.toString()));\n      } else {\n        sql = "SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? ORDER BY retrieved ASC";\n      }\n    }\n\n    db.all(sql, args, function (err, records) {\n      records = records || [];\n      var results = {};\n      records.forEach(function (record) {\n        var data = typeof record.data === \'string\' ? JSON.parse(record.data) : record.data;\n\n        if (data) {\n          data.retrieved = new Date(parseInt(record.retrieved));\n        }\n\n        if (results[record.acc] && results[record.acc].retrieved > record.retrieved) {\n          return;\n        }\n\n        results[record.acc] = record;\n      });\n      cback.call(null, null, results);\n    });\n  };\n\n  get_db_data = function get_db_data(acc, service, cback) {\n    var timestamps = max_age ? [min_age, max_age] : [min_age, new Date().getTime()];\n    return find_latest_data(acc, service, timestamps, cback);\n  };\n\n  var insert_report_func = function insert_report_func(acc, service) {\n    return function (err, rows) {\n      if (!err && rows) {//                    console.log("Caching result for "+acc+" in "+service);\n      }\n    };\n  };\n\n  store_db_data = function store_db_data(acc, service, data) {\n    if (typeof data != \'object\' || typeof Document != \'undefined\' && data instanceof Document) {\n      return;\n    }\n\n    var str_rep;\n\n    try {\n      str_rep = JSON.stringify(data);\n    } catch (err) {\n      return;\n    }\n\n    var dateobj = data.retrieved ? data.retrieved : new Date();\n\n    if (typeof dateobj == \'string\') {\n      dateobj = new Date();\n    }\n\n    dateobj.setUTCHours(0);\n    dateobj.setUTCMinutes(0);\n    dateobj.setUTCSeconds(0);\n    dateobj.setUTCMilliseconds(0);\n    var datetime = dateobj.getTime();\n    data = {};\n    db.all("INSERT INTO datacache(acc,service,retrieved,data) VALUES(?,?,?,?)", [acc, service, datetime, str_rep], insert_report_func(acc, service));\n  };\n\n  find_latest_data = function find_latest_data(acc, service, timestamps, cback) {\n    var sql = "SELECT * from datacache where acc=? and service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved DESC LIMIT 1";\n    var args = [acc, service, timestamps[0], timestamps[1]];\n    db.all(sql, args, function (err, records) {\n      if (records && records.length > 0 && typeof records[0] != "undefined") {\n        var data = typeof records[0].data === \'string\' ? JSON.parse(records[0].data) : records[0].data;\n\n        if (data) {\n          data.retrieved = new Date(parseInt(records[0].retrieved));\n        }\n\n        cback.call(null, null, data);\n      } else {\n        cback.call(null, null, null);\n      }\n    });\n  };\n\n  data_timestamps = function data_timestamps(service, timestamps, cback) {\n    if (!timestamps || typeof timestamps != \'object\' || !timestamps.length) {\n      timestamps = [0, new Date().getTime()];\n    }\n\n    var sql = "SELECT distinct retrieved from datacache where service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved ASC";\n    var args = [service, timestamps[0], timestamps[1]];\n    db.all(sql, args, function (err, records) {\n      var result = [];\n\n      if (records && records.length > 0 && typeof records[0] != "undefined") {\n        for (var i = records.length - 1; i >= 0; i--) {\n          result.push(new Date(parseInt(records[i].retrieved)));\n        }\n      }\n\n      cback.call(null, result);\n    });\n  };\n};\n\nvar setup_localstorage = function setup_localstorage() {\n  sweep_cache = function sweep_cache(timestamp) {\n    if ("localStorage" in window) {\n      var keys = [];\n\n      for (var i = 0, len = localStorage.length; i < len; i++) {\n        keys.push(localStorage.key(i));\n      }\n\n      var key = keys.shift();\n\n      while (key) {\n        if (new RegExp("^MASCP.*").test(key)) {\n          var data = localStorage[key];\n\n          if (data && typeof data === \'string\') {\n            var datablock = JSON.parse(data);\n            datablock.retrieved = timestamp;\n            localStorage.removeItem(key);\n          }\n        }\n\n        key = keys.shift();\n      }\n    }\n  };\n\n  clear_service = function clear_service(service, acc, callback) {\n    if ("localStorage" in window) {\n      var keys = [];\n\n      for (var i = 0, len = localStorage.length; i < len; i++) {\n        keys.push(localStorage.key(i));\n      }\n\n      var key = keys.shift();\n\n      while (key) {\n        if (new RegExp("^" + service + ".*" + (acc ? "#" + acc.toLowerCase() + "$" : "")).test(key)) {\n          localStorage.removeItem(key);\n\n          if (acc) {\n            return;\n          }\n        }\n\n        key = keys.shift();\n      }\n\n      callback.call(_Service__WEBPACK_IMPORTED_MODULE_0__["default"]);\n    }\n  };\n\n  search_service = function search_service(service, cback) {\n    var results = {};\n\n    if ("localStorage" in window) {\n      var key;\n      var re = new RegExp("^" + service + ".*");\n\n      for (var i = 0, len = localStorage.length; i < len; i++) {\n        key = localStorage.key(i);\n\n        if (re.test(key)) {\n          results[key.replace(/\\.#.*$/g, \'\')] = true;\n        }\n      }\n    }\n\n    var uniques = [];\n\n    for (var k in results) {\n      if (results.hasOwnProperty(k)) {\n        uniques.push(k);\n      }\n    }\n\n    cback.call(CachingService, uniques);\n    return uniques;\n  };\n\n  first_accession = function first_accession(service, cback) {\n    if ("localStorage" in window) {\n      var key;\n      var re = new RegExp("^" + service);\n\n      for (var i = 0, len = localStorage.length; i < len; i++) {\n        key = localStorage.key(i);\n\n        if (re.test(key)) {\n          key = key.replace(service, \'\');\n          cback.call(CachingService, key);\n          return;\n        }\n      }\n    }\n\n    cback.call(CachingService, null);\n  };\n\n  cached_accessions = function cached_accessions(service, cback) {\n    if ("localStorage" in window) {\n      var key;\n      var re = new RegExp("^" + service);\n\n      for (var i = 0, len = localStorage.length; i < len; i++) {\n        key = localStorage.key(i);\n\n        if (re.test(key)) {\n          key = key.replace(service, \'\');\n          results[key] = true;\n        }\n      }\n    }\n\n    var uniques = [];\n\n    for (var k in results) {\n      if (results.hasOwnProperty(k)) {\n        uniques.push(k);\n      }\n    }\n\n    cback.call(CachingService, uniques);\n  };\n\n  get_db_data = function get_db_data(acc, service, cback) {\n    var data = localStorage[service.toString() + ".#" + (acc || \'\').toLowerCase()];\n\n    if (data && typeof data === \'string\') {\n      var datablock = JSON.parse(data);\n      datablock.retrieved = new Date(parseInt(datablock.retrieved));\n      cback.call(null, null, datablock);\n    } else {\n      cback.call(null, null, null);\n    }\n  };\n\n  store_db_data = function store_db_data(acc, service, data) {\n    if (data && (typeof data !== \'object\' || data instanceof Document || data.nodeName)) {\n      return;\n    }\n\n    data.retrieved = new Date().getTime();\n    localStorage[service.toString() + ".#" + (acc || \'\').toLowerCase()] = JSON.stringify(data);\n  };\n\n  find_latest_data = function find_latest_data(acc, service, timestamp, cback) {\n    // We don\'t actually retrieve historical data for this\n    return get_db_data(acc, service, cback);\n  };\n\n  data_timestamps = function data_timestamps(service, timestamp, cback) {\n    cback.call(null, []);\n  };\n\n  begin_transaction = function begin_transaction(callback) {\n    // No support for transactions here. Do nothing.\n    setTimeout(function () {\n      callback.call();\n    }, 0);\n  };\n\n  end_transaction = function end_transaction(callback) {\n    // No support for transactions here. Do nothing.\n    setTimeout(function () {\n      callback();\n    }, 0);\n  };\n\n  if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events) {\n    _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events.emit(\'ready\');\n  }\n\n  setTimeout(function () {\n    if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready) {\n      _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready();\n      _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n    } else {\n      _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n    }\n  }, 100);\n};\n\nvar db, idb;\n\nif ("openDatabase" in window || "indexedDB" in window) {\n  if ("indexedDB" in window) {\n    /* Versioning of DB schema */\n    var change_func = function change_func(version, transaction) {\n      var db = transaction.db;\n\n      if (db.objectStoreNames && db.objectStoreNames.contains("cached")) {\n        db.deleteObjectStore("cached");\n      }\n\n      var keypath = window.msIndexedDB ? "serviceacc" : "id";\n      var store = db.createObjectStore("cached", {\n        keyPath: keypath\n      });\n      store.createIndex("entries", ["acc", "service"], {\n        unique: false\n      });\n\n      if (window.msIndexedDB) {\n        store.createIndex("entries-ms", "serviceacc", {\n          unique: false\n        });\n      }\n\n      store.createIndex("timestamps", ["service", "retrieved"], {\n        unique: false\n      });\n      store.createIndex("services", "service", {\n        unique: false\n      });\n\n      transaction.oncomplete = function () {\n        database_ready(db);\n\n        database_ready = function database_ready() {};\n      };\n    };\n\n    idb = true;\n    var db_version = 2;\n    var req = indexedDB.open("datacache", db_version);\n\n    req.onupgradeneeded = function (e) {\n      var transaction = req.transaction;\n      change_func(e.oldVersion, transaction);\n    };\n\n    var database_ready = function database_ready(db) {\n      if (db) {\n        idb = db;\n      }\n\n      setup_idb(idb);\n\n      if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events) {\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].events.emit("ready");\n      }\n\n      if (_MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready) {\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready();\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n      } else {\n        _MASCP__WEBPACK_IMPORTED_MODULE_1__["default"].ready = true;\n      }\n    };\n\n    req.onerror = function (e) {\n      console.log("Error loading Database");\n      setup_localstorage(); // setTimeout(function() {\n      //     indexedDB.deleteDatabase("datacache").onsuccess = function() {\n      //     }\n      // },0);\n    };\n\n    req.onsuccess = function (e) {\n      idb = e.target.result;\n      var version = db_version;\n\n      if (idb.version != Number(version)) {\n        var versionRequest = db.setVersion(ver);\n\n        versionRequest.onsuccess = function (e) {\n          var transaction = versionRequest.result;\n          change_func(oldVersion, transaction);\n        };\n      } else {\n        database_ready();\n      }\n    };\n  } else {\n    try {\n      db = openDatabase("cached", "", "MASCP Gator cache", 1024 * 1024);\n    } catch (err) {\n      throw err;\n    }\n\n    db.all = function (sql, args, callback) {\n      this.exec(sql, args, callback);\n    };\n\n    db.exec = function (sql, args, callback) {\n      var self = this;\n      var sqlargs = args;\n      var cback = callback;\n\n      if (typeof cback == \'undefined\' && sqlargs && Object.prototype.toString.call(sqlargs) != \'[object Array]\') {\n        cback = args;\n        sqlargs = null;\n      }\n\n      self.transaction(function (tx) {\n        tx.executeSql(sql, sqlargs, function (tx, result) {\n          var res = [];\n\n          for (var i = 0; i < result.rows.length; i++) {\n            res.push(result.rows.item(i));\n          }\n\n          if (cback) {\n            cback.call(db, null, res);\n          }\n        }, function (tx, err) {\n          if (cback) {\n            cback.call(db, err);\n          }\n        });\n      });\n    };\n  }\n}\n\nif (typeof idb !== \'undefined\') {// Do nothing\n} else if (typeof db !== \'undefined\') {\n  setup_websql(db);\n} else if ("localStorage" in window) {\n  setup_localstorage();\n} else {\n  sweep_cache = function sweep_cache(timestamp) {};\n\n  clear_service = function clear_service(service, acc) {};\n\n  search_service = function search_service(service, cback) {};\n\n  cached_accessions = function cached_accessions(service, cback) {\n    cback.call(CachingService, []);\n  };\n\n  get_db_data = function get_db_data(acc, service, cback) {\n    cback.call(null, null, null);\n  };\n\n  store_db_data = function store_db_data(acc, service, data) {};\n\n  find_latest_data = function find_latest_data(acc, service, timestamp, cback) {\n    // We don\'t actually retrieve historical data for this\n    cback.call(null, []);\n  };\n\n  data_timestamps = function data_timestamps(service, timestamp, cback) {\n    cback.call(null, []);\n  };\n\n  begin_transaction = function begin_transaction(callback, trans) {\n    // No support for transactions here. Do nothing.\n    setTimeout(function () {\n      callback({\n        "transaction": trans\n      });\n    }, 0);\n  };\n\n  end_transaction = function end_transaction(callback) {\n    // No support for transactions here. Do nothing.\n    setTimeout(function () {\n      callback();\n    }, 0);\n  };\n}\n\n/* harmony default export */ __webpack_exports__["default"] = (CachingService);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/ServiceCaching.js\n')},"../gator/js/lib/TrackRendererComponent.js":
/*!*************************************************!*\
  !*** ../gator/js/lib/TrackRendererComponent.js ***!
  \*************************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GatorComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GatorComponent */ \"../gator/js/lib/GatorComponent.js\");\n/* harmony import */ var _jsandbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsandbox */ \"../gator/js/jsandbox.js\");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MASCP */ \"../gator/js/lib/MASCP.js\");\n\n\n\nconst SANDBOXES = new Map();\n\nlet retrieve_renderer = function retrieve_renderer() {\n  let renderer_url = this.getAttribute('src');\n  return fetch(renderer_url).then(dat => dat.text());\n};\n\nfunction WrapHTML() {\n  return Reflect.construct(HTMLElement, [], Object.getPrototypeOf(this).constructor);\n}\n\nObject.setPrototypeOf(WrapHTML.prototype, HTMLElement.prototype);\nObject.setPrototypeOf(WrapHTML, HTMLElement);\n\nlet get_renderer_sequence = (renderer, accession) => {\n  return new Promise(resolve => {\n    (function () {\n      var obj = {\n        \"gotResult\": function gotResult() {\n          resolve(renderer.sequence);\n        },\n        \"acc\": accession\n      };\n      renderer.trigger('readerRegistered', [obj]);\n      obj.gotResult();\n    })();\n  });\n};\n\nlet set_basic_offset = (objects, basic_offset) => {\n  objects.forEach(function (obj) {\n    if (obj.options) {\n      if (obj.options.offset) {\n        obj.options.offset += basic_offset;\n        return;\n      }\n\n      obj.options.offset = basic_offset;\n    } else {\n      obj.options = {\n        \"offset\": basic_offset\n      };\n    }\n  });\n};\n\nlet apply_rendering = (renderer, default_track, objects) => {\n  if (Array.isArray(objects)) {\n    var temp_objects = {};\n    console.log('No accession provided');\n    temp_objects['DEFAULTACC'] = objects;\n    objects = temp_objects;\n  }\n\n  for (let acc of Object.keys(objects)) {\n    let r = objects[acc];\n    set_basic_offset(r, 0);\n    renderer.renderObjects(default_track, r.filter(function (item) {\n      return !item.track;\n    }));\n    var items_by_track = {};\n    r.filter(function (item) {\n      return item.track;\n    }).forEach(function (item) {\n      items_by_track[item.track] = items_by_track[item.track] || [];\n      items_by_track[item.track].push(item);\n    });\n    Object.keys(items_by_track).forEach(function (track) {\n      if (_MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(track)) {\n        _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].registerLayer(track, {}, [renderer]); // We force a refresh of the track order\n        // to pick up any layers that have been re-enabled\n\n        renderer.trackOrder = renderer.trackOrder;\n        renderer.renderObjects(track, items_by_track[track]);\n      }\n    });\n    renderer.trigger('resultsRendered', [undefined]);\n    renderer.refresh();\n  }\n};\n\nlet do_rendering = (renderer, script, data, default_track) => {\n  const SANDBOX = SANDBOXES.get(script) || new _jsandbox__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  SANDBOXES.set(script, SANDBOX);\n  get_renderer_sequence(renderer).then(sequence => {\n    SANDBOX.eval(script, () => {\n      SANDBOX.eval({\n        'data': 'renderData(input.sequence,input.data,input.acc,input.track)',\n        'input': {\n          'sequence': sequence,\n          'data': data,\n          'track': default_track\n        },\n        'onerror': message => {\n          throw new Error(message);\n        },\n        'callback': apply_rendering.bind(null, renderer, default_track)\n      });\n    });\n  });\n};\n\nclass TrackRendererComponent extends WrapHTML {\n  static get observedAttributes() {\n    return ['track', 'src'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    this.script = retrieve_renderer.call(this);\n  }\n\n  render(renderer, data, track) {\n    this.script.then(script => {\n      do_rendering(renderer, script, data, track);\n    });\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    this._data = data;\n    this.render(this.ownerDocument.getElementById(this.getAttribute('renderer')).renderer, this._data, this.getAttribute('track'));\n  }\n\n  attributeChangedCallback(name) {\n    if (this.hasAttribute('renderer') && this.data && name === 'track') {\n      this.render(document.getElementById(this.getAttribute('renderer')).renderer, this._data, this.getAttribute('track'));\n    }\n\n    if (name === 'src') {\n      this.script = retrieve_renderer.call(this);\n    }\n  }\n\n}\n\ncustomElements.define('x-trackrenderer', TrackRendererComponent);\n\nlet create_track = function create_track() {\n  _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].registerLayer(this.name, {});\n  _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(this.name).fullname = this.fullname || this.name;\n  _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(this.name).scales.clear();\n\n  for (let scale of this.scale) {\n    _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(this.name).scales.add(scale);\n  }\n};\n\nclass TrackComponent extends WrapHTML {\n  static get observedAttributes() {\n    return ['name', 'fullname', 'scale'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    create_track.call(this);\n  }\n\n  get name() {\n    return this.getAttribute('name');\n  }\n\n  set name(name) {\n    return this.setAttribute('name', name);\n  }\n\n  get layer() {\n    return _MASCP__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLayer(this.name);\n  }\n\n  get fullname() {\n    return this.getAttribute('fullname');\n  }\n\n  set fullname(name) {\n    return this.setAttribute('fullname', name);\n  }\n\n  get scale() {\n    return (this.getAttribute('scale') || '').split(',');\n  }\n\n  set scale(scale) {\n    return this.setAttribute('scale', scale);\n  }\n\n  attributeChangedCallback(name) {\n    create_track.call(this);\n  }\n\n}\n\ncustomElements.define('x-gatortrack', TrackComponent);\n/* harmony default export */ __webpack_exports__[\"default\"] = (TrackRendererComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../gator/js/lib/TrackRendererComponent.js\n")},"../gator/js/lib/UniprotReader.js":
/*!****************************************!*\
  !*** ../gator/js/lib/UniprotReader.js ***!
  \****************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Service */ "../gator/js/lib/Service.js");\n/* harmony import */ var _UserdataReader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UserdataReader */ "../gator/js/lib/UserdataReader.js");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bean */ "../gator/js/bean.js");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MASCP */ "../gator/js/lib/MASCP.js");\n/**\n * @fileOverview    Classes for reading data from Uniprot database\n */\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Uniprot for a given AGI.\n *  @param      {String} agi            Agi to look up\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\n\nconst UniprotReader = _Service__WEBPACK_IMPORTED_MODULE_0__["default"].buildService(function (data) {\n  if (data && typeof data === \'string\') {\n    var dats = UniprotReader.parseFasta(data);\n    var key;\n\n    for (key in dats) {\n      if (dats.hasOwnProperty(key)) {\n        data = {\n          \'data\': dats[key]\n        };\n        this._raw_data = data;\n      }\n    }\n  }\n\n  this._data = data || {};\n\n  if (!this._data.data) {\n    this._data = {\n      \'data\': [\'\', \'\']\n    };\n  }\n\n  return this;\n});\nUniprotReader.SERVICE_URL = null;\n\nUniprotReader.prototype.requestData = function () {\n  var self = this;\n\n  if (!UniprotReader.SERVICE_URL) {\n    throw new Error(\'No service URL for UniprotReader\');\n  }\n\n  return {\n    type: "GET",\n    dataType: "json",\n    \'auth\': _MASCP__WEBPACK_IMPORTED_MODULE_3__["default"].GATOR_AUTH_TOKEN,\n    \'api_key\': _MASCP__WEBPACK_IMPORTED_MODULE_3__["default"].GATOR_CLIENT_ID,\n    \'url\': UniprotReader.SERVICE_URL + \'/\' + this.agi.toUpperCase()\n  };\n};\n\nUniprotReader.Result.prototype.getDescription = function () {\n  return this._data.data[1];\n};\n\nUniprotReader.Result.prototype.getSequence = function () {\n  return this._data.data[0];\n};\n\nUniprotReader.parseFasta = function (datablock) {\n  var chunks = datablock.split(\'>\');\n  var datas = {};\n  chunks.forEach(function (entry) {\n    var lines = entry.split(/\\n/);\n\n    if (lines.length <= 1) {\n      return;\n    }\n\n    var header = lines.shift();\n    var seq = lines.join("");\n    var header_data = header.split(\'|\');\n    var acc = header_data[1];\n    var desc = header_data[2];\n    datas[acc] = [seq, desc];\n  });\n  return datas;\n};\n\nUniprotReader.readFastaFile = function (datablock, callback) {\n  var datas = UniprotReader.parseFasta(datablock);\n  var writer = new _UserdataReader__WEBPACK_IMPORTED_MODULE_1__["default"]();\n\n  writer.toString = function () {\n    return "UniprotReader";\n  };\n\n  writer.map = function (dat) {\n    return dat.data;\n  };\n\n  writer.datasetname = "UniprotReader";\n  callback(writer);\n  setTimeout(function () {\n    writer.avoid_database = true;\n    writer.setData("UniprotReader", {\n      "data": datas\n    });\n  }, 0);\n  return writer;\n};\n\n/* harmony default export */ __webpack_exports__["default"] = (UniprotReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZ2F0b3IvanMvbGliL1VuaXByb3RSZWFkZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZ2F0b3IvanMvbGliL1VuaXByb3RSZWFkZXIuanM/MzVkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlT3ZlcnZpZXcgICAgQ2xhc3NlcyBmb3IgcmVhZGluZyBkYXRhIGZyb20gVW5pcHJvdCBkYXRhYmFzZVxuICovXG5cbmltcG9ydCBTZXJ2aWNlIGZyb20gJy4vU2VydmljZSc7XG5pbXBvcnQgVXNlcmRhdGFSZWFkZXIgZnJvbSAnLi9Vc2VyZGF0YVJlYWRlcic7XG5pbXBvcnQgYmVhbiBmcm9tICcuLi9iZWFuJztcbmltcG9ydCBNQVNDUCBmcm9tICcuL01BU0NQJztcblxuXG4vKiogRGVmYXVsdCBjbGFzcyBjb25zdHJ1Y3RvclxuICogIEBjbGFzcyAgICAgIFNlcnZpY2UgY2xhc3MgdGhhdCB3aWxsIHJldHJpZXZlIGRhdGEgZnJvbSBVbmlwcm90IGZvciBhIGdpdmVuIEFHSS5cbiAqICBAcGFyYW0gICAgICB7U3RyaW5nfSBhZ2kgICAgICAgICAgICBBZ2kgdG8gbG9vayB1cFxuICogIEBwYXJhbSAgICAgIHtTdHJpbmd9IGVuZHBvaW50VVJMICAgIEVuZHBvaW50IFVSTCBmb3IgdGhpcyBzZXJ2aWNlXG4gKiAgQGV4dGVuZHMgICAgTUFTQ1AuU2VydmljZVxuICovXG5jb25zdCBVbmlwcm90UmVhZGVyID0gU2VydmljZS5idWlsZFNlcnZpY2UoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkYXRhICYmIHR5cGVvZihkYXRhKSA9PT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdHMgPSBVbmlwcm90UmVhZGVyLnBhcnNlRmFzdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBkYXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7ICdkYXRhJyA6IGRhdHNba2V5XSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmF3X2RhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgdGhpcy5fZGF0YS5kYXRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB7ICdkYXRhJyA6IFsnJywnJ10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuVW5pcHJvdFJlYWRlci5TRVJWSUNFX1VSTCA9IG51bGw7XG5cblVuaXByb3RSZWFkZXIucHJvdG90eXBlLnJlcXVlc3REYXRhID0gZnVuY3Rpb24oKVxue1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoICEgVW5pcHJvdFJlYWRlci5TRVJWSUNFX1VSTCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNlcnZpY2UgVVJMIGZvciBVbmlwcm90UmVhZGVyJyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgJ2F1dGgnIDogTUFTQ1AuR0FUT1JfQVVUSF9UT0tFTixcbiAgICAgICAgJ2FwaV9rZXknIDogTUFTQ1AuR0FUT1JfQ0xJRU5UX0lELFxuICAgICAgICAndXJsJyAgIDogVW5pcHJvdFJlYWRlci5TRVJWSUNFX1VSTCsnLycrKHRoaXMuYWdpKS50b1VwcGVyQ2FzZSgpXG4gICAgfTtcbn07XG5cblVuaXByb3RSZWFkZXIuUmVzdWx0LnByb3RvdHlwZS5nZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmRhdGFbMV07XG59O1xuXG5Vbmlwcm90UmVhZGVyLlJlc3VsdC5wcm90b3R5cGUuZ2V0U2VxdWVuY2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5kYXRhWzBdO1xufTtcblxuVW5pcHJvdFJlYWRlci5wYXJzZUZhc3RhID0gZnVuY3Rpb24oZGF0YWJsb2NrKSB7XG4gICAgdmFyIGNodW5rcyA9IChkYXRhYmxvY2suc3BsaXQoJz4nKSk7XG4gICAgdmFyIGRhdGFzID0ge307XG4gICAgY2h1bmtzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgdmFyIGxpbmVzID0gZW50cnkuc3BsaXQoL1xcbi8pO1xuICAgICAgICBpZiAobGluZXMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVhZGVyID0gbGluZXMuc2hpZnQoKTtcbiAgICAgICAgdmFyIHNlcSA9IGxpbmVzLmpvaW4oXCJcIik7XG4gICAgICAgIHZhciBoZWFkZXJfZGF0YSA9IGhlYWRlci5zcGxpdCgnfCcpO1xuICAgICAgICB2YXIgYWNjID0gaGVhZGVyX2RhdGFbMV07XG4gICAgICAgIHZhciBkZXNjID0gaGVhZGVyX2RhdGFbMl07XG4gICAgICAgIGRhdGFzW2FjY10gPSBbc2VxLGRlc2NdO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhcztcbn1cblxuVW5pcHJvdFJlYWRlci5yZWFkRmFzdGFGaWxlID0gZnVuY3Rpb24oZGF0YWJsb2NrLGNhbGxiYWNrKSB7XG5cbiAgICB2YXIgZGF0YXMgPSBVbmlwcm90UmVhZGVyLnBhcnNlRmFzdGEoZGF0YWJsb2NrKTtcblxuICAgIHZhciB3cml0ZXIgPSBuZXcgVXNlcmRhdGFSZWFkZXIoKTtcbiAgICB3cml0ZXIudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiVW5pcHJvdFJlYWRlclwiO1xuICAgIH07XG4gICAgd3JpdGVyLm1hcCA9IGZ1bmN0aW9uKGRhdCkge1xuICAgICAgICByZXR1cm4gZGF0LmRhdGE7XG4gICAgfTtcbiAgICB3cml0ZXIuZGF0YXNldG5hbWUgPSBcIlVuaXByb3RSZWFkZXJcIjtcbiAgICBjYWxsYmFjayh3cml0ZXIpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHdyaXRlci5hdm9pZF9kYXRhYmFzZSA9IHRydWU7XG4gICAgICAgIHdyaXRlci5zZXREYXRhKFwiVW5pcHJvdFJlYWRlclwiLHtcImRhdGFcIiA6IGRhdGFzfSk7XG4gICAgfSwwKTtcbiAgICByZXR1cm4gd3JpdGVyO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVW5pcHJvdFJlYWRlcjtcblxuXG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOzs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../gator/js/lib/UniprotReader.js\n')},"../gator/js/lib/UserdataReader.js":
/*!*****************************************!*\
  !*** ../gator/js/lib/UserdataReader.js ***!
  \*****************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Service */ "../gator/js/lib/Service.js");\n/* harmony import */ var _ServiceCaching__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServiceCaching */ "../gator/js/lib/ServiceCaching.js");\n/* harmony import */ var _MASCP__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MASCP */ "../gator/js/lib/MASCP.js");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bean */ "../gator/js/bean.js");\n/**\n * @fileOverview    Classes for getting arbitrary user data onto the GATOR\n */\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve sequence data for a given AGI from a given ecotype\n *  @param      {String} agi            Agi to look up\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\n\nconst UserdataReader = _Service__WEBPACK_IMPORTED_MODULE_0__["default"].buildService(function (data) {\n  if (!data) {\n    return this;\n  }\n\n  this._raw_data = data;\n  return this;\n});\n\nUserdataReader.prototype.toString = function () {\n  return \'UserdataReader.\' + this.datasetname;\n};\n\nUserdataReader.prototype.requestData = function () {\n  var agi = this.agi.toUpperCase();\n  return {\n    type: "GET",\n    dataType: "json",\n    data: {\n      \'agi\': agi,\n      \'service\': this.datasetname\n    }\n  };\n};\n\nUserdataReader.prototype.setupSequenceRenderer = function (renderer) {// We don\'t have any default rendering for the UserDataReader\n  // since it\'s all going to be custom stuff anyway\n};\n\nvar apply_map = function apply_map(data_block) {\n  var map = this.map;\n  var databits = data_block.data;\n  var headers = databits.shift();\n  var dataset = {};\n  var id_col = headers.indexOf(map.id);\n  var cols_to_add = [];\n\n  for (var col in map) {\n    if (col == "id") {\n      continue;\n    }\n\n    if (map.hasOwnProperty(col)) {\n      cols_to_add.push({\n        "name": col,\n        "index": headers.indexOf(map[col])\n      });\n    }\n  }\n\n  while (databits.length > 0) {\n    var row = databits.shift();\n    var id = row[id_col].toLowerCase();\n\n    if (!dataset[id]) {\n      dataset[id] = {\n        "data": {}\n      };\n    }\n\n    var obj = dataset[id];\n    var i;\n\n    for (i = cols_to_add.length - 1; i >= 0; i--) {\n      if (!obj.data[cols_to_add[i].name]) {\n        obj.data[cols_to_add[i].name] = [];\n      }\n\n      obj.data[cols_to_add[i].name] = obj.data[cols_to_add[i].name].concat((row[cols_to_add[i].index] || \'\').split(\',\'));\n    }\n\n    obj.retrieved = data_block.retrieved;\n    obj.title = data_block.title;\n\n    if (data_block.etag) {\n      obj.etag = data_block.etag;\n    }\n  }\n\n  return dataset;\n};\n\nUserdataReader.prototype.setData = function (name, data) {\n  if (!data) {\n    return;\n  }\n\n  var self = this; // Call CacheService on this object/class\n  // just to make sure that it has access\n  // to the cache retrieval mechanisms\n\n  _ServiceCaching__WEBPACK_IMPORTED_MODULE_1__["default"].CacheService(this);\n  this.datasetname = name;\n\n  if (!data.retrieved) {\n    data.retrieved = new Date();\n  }\n\n  if (!data.title) {\n    data.title = name;\n  }\n\n  self.title = data.title;\n  var dataset = {}; // Format is { "accession" : { "data" : {}, "retrieved" : "" , "title" : ""  } };\n\n  if (typeof this.map == \'object\') {\n    dataset = apply_map.call(this, data);\n  }\n\n  if (typeof this.map == \'function\') {\n    if (this.map.callback) {\n      var self_func = arguments.callee;\n      this.map(data, function (parsed) {\n        self.map = function (d) {\n          return d;\n        };\n\n        self_func.call(self, name, parsed);\n      });\n      return;\n    }\n\n    dataset = this.map(data);\n  }\n\n  if (!this.map) {\n    return;\n  }\n\n  this.data = dataset;\n  var inserter = new UserdataReader();\n\n  inserter.toString = function () {\n    return self.toString();\n  };\n\n  inserter.data = dataset;\n\n  inserter.retrieve = function (an_acc, cback) {\n    this.agi = an_acc; // this._dataReceived(dataset[this.agi]);\n\n    cback.call(this);\n  };\n\n  _ServiceCaching__WEBPACK_IMPORTED_MODULE_1__["default"].CacheService(inserter);\n  var accs = [];\n  var acc;\n\n  for (acc in dataset) {\n    if (dataset.hasOwnProperty(acc)) {\n      if (acc.match(/[A-Z]/)) {\n        dataset[acc.toLowerCase()] = dataset[acc];\n        delete dataset[acc];\n        acc = acc.toLowerCase();\n      }\n\n      accs.push(acc);\n    }\n  }\n\n  var total = accs.length;\n  var retrieve = this.retrieve;\n\n  this.retrieve = function (id, cback) {\n    console.log("Data not ready! Waiting for ready state");\n    var self = this;\n    _bean__WEBPACK_IMPORTED_MODULE_3__["default"].add(self, \'ready\', function () {\n      _bean__WEBPACK_IMPORTED_MODULE_3__["default"].remove(self, \'ready\', arguments.callee);\n      self.retrieve(id, cback);\n    });\n  };\n\n  if (accs.length < 1) {\n    setTimeout(function () {\n      self.retrieve = retrieve;\n      _bean__WEBPACK_IMPORTED_MODULE_3__["default"].fire(self, \'ready\', [data]);\n    }, 0);\n    return;\n  }\n\n  _ServiceCaching__WEBPACK_IMPORTED_MODULE_1__["default"].BulkOperation(function (err) {\n    if (err) {\n      _bean__WEBPACK_IMPORTED_MODULE_3__["default"].fire(self, \'error\', [err]);\n      return;\n    }\n\n    var trans = this.transaction;\n    inserter.avoid_database = true;\n    inserter.retrieve(accs[0], function () {\n      while (accs.length > 0) {\n        var acc = accs.shift();\n        _bean__WEBPACK_IMPORTED_MODULE_3__["default"].fire(self, \'progress\', [100 * ((total - accs.length) / total), total - accs.length, total]);\n        inserter.agi = acc;\n\n        inserter._dataReceived(dataset[acc]);\n\n        if (accs.length === 0) {\n          self.retrieve = retrieve;\n          trans(function (err) {\n            if (!err) {\n              _bean__WEBPACK_IMPORTED_MODULE_3__["default"].fire(self, \'ready\', [data]);\n            } else {\n              _bean__WEBPACK_IMPORTED_MODULE_3__["default"].fire(self, \'error\');\n            }\n          });\n          return;\n        }\n      }\n    });\n  });\n};\n\nUserdataReader.datasets = function (cback, done) {\n  _ServiceCaching__WEBPACK_IMPORTED_MODULE_1__["default"].FindCachedService(this, function (services) {\n    var result = [];\n\n    for (var i = 0, len = services.length; i < len; i++) {\n      result.push(services[i].replace(/UserdataReader./, \'\'));\n    }\n\n    if (result.forEach) {\n      result.forEach(cback);\n    }\n\n    if (done) {\n      done();\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__["default"] = (UserdataReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZ2F0b3IvanMvbGliL1VzZXJkYXRhUmVhZGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2dhdG9yL2pzL2xpYi9Vc2VyZGF0YVJlYWRlci5qcz84YjAxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVPdmVydmlldyAgICBDbGFzc2VzIGZvciBnZXR0aW5nIGFyYml0cmFyeSB1c2VyIGRhdGEgb250byB0aGUgR0FUT1JcbiAqL1xuXG5pbXBvcnQgU2VydmljZSBmcm9tICcuL1NlcnZpY2UnO1xuaW1wb3J0IENhY2hpbmdTZXJ2aWNlIGZyb20gJy4vU2VydmljZUNhY2hpbmcnO1xuaW1wb3J0IE1BU0NQIGZyb20gJy4vTUFTQ1AnO1xuaW1wb3J0IGJlYW4gZnJvbSAnLi4vYmVhbic7XG5cblxuLyoqIERlZmF1bHQgY2xhc3MgY29uc3RydWN0b3JcbiAqICBAY2xhc3MgICAgICBTZXJ2aWNlIGNsYXNzIHRoYXQgd2lsbCByZXRyaWV2ZSBzZXF1ZW5jZSBkYXRhIGZvciBhIGdpdmVuIEFHSSBmcm9tIGEgZ2l2ZW4gZWNvdHlwZVxuICogIEBwYXJhbSAgICAgIHtTdHJpbmd9IGFnaSAgICAgICAgICAgIEFnaSB0byBsb29rIHVwXG4gKiAgQHBhcmFtICAgICAge1N0cmluZ30gZW5kcG9pbnRVUkwgICAgRW5kcG9pbnQgVVJMIGZvciB0aGlzIHNlcnZpY2VcbiAqICBAZXh0ZW5kcyAgICBNQVNDUC5TZXJ2aWNlXG4gKi9cbmNvbnN0IFVzZXJkYXRhUmVhZGVyID0gU2VydmljZS5idWlsZFNlcnZpY2UoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGRhdGEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYXdfZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cblVzZXJkYXRhUmVhZGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnVXNlcmRhdGFSZWFkZXIuJyt0aGlzLmRhdGFzZXRuYW1lO1xufTtcblxuVXNlcmRhdGFSZWFkZXIucHJvdG90eXBlLnJlcXVlc3REYXRhID0gZnVuY3Rpb24oKVxue1xuICAgIHZhciBhZ2kgPSB0aGlzLmFnaS50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgZGF0YTogeyAnYWdpJyAgICAgICA6IGFnaSxcbiAgICAgICAgICAgICAgICAnc2VydmljZScgICA6IHRoaXMuZGF0YXNldG5hbWUgXG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuXG5Vc2VyZGF0YVJlYWRlci5wcm90b3R5cGUuc2V0dXBTZXF1ZW5jZVJlbmRlcmVyID0gZnVuY3Rpb24ocmVuZGVyZXIpIHtcbi8vIFdlIGRvbid0IGhhdmUgYW55IGRlZmF1bHQgcmVuZGVyaW5nIGZvciB0aGUgVXNlckRhdGFSZWFkZXJcbi8vIHNpbmNlIGl0J3MgYWxsIGdvaW5nIHRvIGJlIGN1c3RvbSBzdHVmZiBhbnl3YXlcbn07XG5cbnZhciBhcHBseV9tYXAgPSBmdW5jdGlvbihkYXRhX2Jsb2NrKSB7XG4gICAgdmFyIG1hcCA9IHRoaXMubWFwO1xuICAgIHZhciBkYXRhYml0cyA9IGRhdGFfYmxvY2suZGF0YTtcbiAgICB2YXIgaGVhZGVycyA9IGRhdGFiaXRzLnNoaWZ0KCk7XG4gICAgdmFyIGRhdGFzZXQgPSB7fTtcbiAgICB2YXIgaWRfY29sID0gaGVhZGVycy5pbmRleE9mKG1hcC5pZCk7XG4gICAgdmFyIGNvbHNfdG9fYWRkID0gW107XG4gICAgZm9yICh2YXIgY29sIGluIG1hcCkge1xuICAgICAgICBpZiAoY29sID09IFwiaWRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShjb2wpKSB7XG4gICAgICAgICAgICBjb2xzX3RvX2FkZC5wdXNoKHsgXCJuYW1lXCIgOiBjb2wsIFwiaW5kZXhcIiA6IGhlYWRlcnMuaW5kZXhPZihtYXBbY29sXSkgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKGRhdGFiaXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHJvdyA9IGRhdGFiaXRzLnNoaWZ0KCk7XG4gICAgICAgIHZhciBpZCA9IHJvd1tpZF9jb2xdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICggISBkYXRhc2V0W2lkXSApIHtcbiAgICAgICAgICAgIGRhdGFzZXRbaWRdID0ge1wiZGF0YVwiIDoge319O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmogPSBkYXRhc2V0W2lkXTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IGNvbHNfdG9fYWRkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoICEgb2JqLmRhdGFbY29sc190b19hZGRbaV0ubmFtZV0gKSB7XG4gICAgICAgICAgICAgICAgb2JqLmRhdGFbY29sc190b19hZGRbaV0ubmFtZV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9iai5kYXRhW2NvbHNfdG9fYWRkW2ldLm5hbWVdID0gb2JqLmRhdGFbY29sc190b19hZGRbaV0ubmFtZV0uY29uY2F0KChyb3dbY29sc190b19hZGRbaV0uaW5kZXhdIHx8ICcnKS5zcGxpdCgnLCcpKTtcbiAgICAgICAgfVxuICAgICAgICBvYmoucmV0cmlldmVkID0gZGF0YV9ibG9jay5yZXRyaWV2ZWQ7XG4gICAgICAgIG9iai50aXRsZSA9IGRhdGFfYmxvY2sudGl0bGU7XG4gICAgICAgIGlmIChkYXRhX2Jsb2NrLmV0YWcpIHtcbiAgICAgICAgICAgIG9iai5ldGFnID0gZGF0YV9ibG9jay5ldGFnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhc2V0O1xufTtcblxuVXNlcmRhdGFSZWFkZXIucHJvdG90eXBlLnNldERhdGEgPSBmdW5jdGlvbihuYW1lLGRhdGEpIHtcbiAgICBcbiAgICBpZiAoICEgZGF0YSApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBcbiAgICAvLyBDYWxsIENhY2hlU2VydmljZSBvbiB0aGlzIG9iamVjdC9jbGFzc1xuICAgIC8vIGp1c3QgdG8gbWFrZSBzdXJlIHRoYXQgaXQgaGFzIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBjYWNoZSByZXRyaWV2YWwgbWVjaGFuaXNtc1xuXG4gICAgQ2FjaGluZ1NlcnZpY2UuQ2FjaGVTZXJ2aWNlKHRoaXMpO1xuICAgIFxuICAgIHRoaXMuZGF0YXNldG5hbWUgPSBuYW1lO1xuXG4gICAgaWYgKCAhIGRhdGEucmV0cmlldmVkICkge1xuICAgICAgICBkYXRhLnJldHJpZXZlZCA9IG5ldyBEYXRlKCk7XG4gICAgfVxuICAgIGlmICggISBkYXRhLnRpdGxlICkge1xuICAgICAgICBkYXRhLnRpdGxlID0gbmFtZTtcbiAgICB9XG5cbiAgICBzZWxmLnRpdGxlID0gZGF0YS50aXRsZTtcblxuICAgIHZhciBkYXRhc2V0ID0ge307IC8vIEZvcm1hdCBpcyB7IFwiYWNjZXNzaW9uXCIgOiB7IFwiZGF0YVwiIDoge30sIFwicmV0cmlldmVkXCIgOiBcIlwiICwgXCJ0aXRsZVwiIDogXCJcIiAgfSB9O1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm1hcCA9PSAnb2JqZWN0Jykge1xuICAgICAgICBkYXRhc2V0ID0gYXBwbHlfbWFwLmNhbGwodGhpcyxkYXRhKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLm1hcCA9PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgICAgaWYgKHRoaXMubWFwLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgc2VsZl9mdW5jID0gYXJndW1lbnRzLmNhbGxlZTtcbiAgICAgICAgICAgIHRoaXMubWFwKGRhdGEsZnVuY3Rpb24ocGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5tYXAgPSBmdW5jdGlvbihkKSB7IHJldHVybiAoZCk7IH07XG4gICAgICAgICAgICAgICAgc2VsZl9mdW5jLmNhbGwoc2VsZixuYW1lLHBhcnNlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkYXRhc2V0ID0gdGhpcy5tYXAoZGF0YSk7XG4gICAgfVxuXG4gICAgaWYgKCAhIHRoaXMubWFwICkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGF0YSA9IGRhdGFzZXQ7XG4gICAgXG4gICAgdmFyIGluc2VydGVyID0gbmV3IFVzZXJkYXRhUmVhZGVyKCk7XG5cbiAgICBpbnNlcnRlci50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc2VsZi50b1N0cmluZygpO1xuICAgIH07XG5cbiAgICBpbnNlcnRlci5kYXRhID0gZGF0YXNldDtcbiAgICBcbiAgICBpbnNlcnRlci5yZXRyaWV2ZSA9IGZ1bmN0aW9uKGFuX2FjYyxjYmFjaykge1xuICAgICAgICB0aGlzLmFnaSA9IGFuX2FjYztcbiAgICAgICAgLy8gdGhpcy5fZGF0YVJlY2VpdmVkKGRhdGFzZXRbdGhpcy5hZ2ldKTtcbiAgICAgICAgY2JhY2suY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFxuICAgIENhY2hpbmdTZXJ2aWNlLkNhY2hlU2VydmljZShpbnNlcnRlcik7XG5cbiAgICB2YXIgYWNjcyA9IFtdO1xuICAgIHZhciBhY2M7XG4gICAgZm9yIChhY2MgaW4gZGF0YXNldCkge1xuICAgICAgICBpZiAoZGF0YXNldC5oYXNPd25Qcm9wZXJ0eShhY2MpKSB7XG4gICAgICAgICAgICBpZiAoYWNjLm1hdGNoKC9bQS1aXS8pKSB7XG4gICAgICAgICAgICAgICAgZGF0YXNldFthY2MudG9Mb3dlckNhc2UoKV0gPSBkYXRhc2V0W2FjY107XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFzZXRbYWNjXTtcbiAgICAgICAgICAgICAgICBhY2MgPSBhY2MudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjY3MucHVzaChhY2MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB0b3RhbCA9IGFjY3MubGVuZ3RoO1xuXG4gICAgdmFyIHJldHJpZXZlID0gdGhpcy5yZXRyaWV2ZTtcblxuICAgIHRoaXMucmV0cmlldmUgPSBmdW5jdGlvbihpZCxjYmFjaykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkRhdGEgbm90IHJlYWR5ISBXYWl0aW5nIGZvciByZWFkeSBzdGF0ZVwiKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOyAgICAgICAgXG4gICAgICAgIGJlYW4uYWRkKHNlbGYsJ3JlYWR5JyxmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGJlYW4ucmVtb3ZlKHNlbGYsJ3JlYWR5Jyxhcmd1bWVudHMuY2FsbGVlKTtcbiAgICAgICAgICAgIHNlbGYucmV0cmlldmUoaWQsY2JhY2spO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChhY2NzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYucmV0cmlldmUgPSByZXRyaWV2ZTtcbiAgICAgICAgICAgIGJlYW4uZmlyZShzZWxmLCdyZWFkeScsW2RhdGFdKTtcbiAgICAgICAgfSwwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBDYWNoaW5nU2VydmljZS5CdWxrT3BlcmF0aW9uKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBiZWFuLmZpcmUoc2VsZiwnZXJyb3InLFtlcnJdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhbnMgPSB0aGlzLnRyYW5zYWN0aW9uO1xuICAgICAgICBpbnNlcnRlci5hdm9pZF9kYXRhYmFzZSA9IHRydWU7XG4gICAgICAgIGluc2VydGVyLnJldHJpZXZlKGFjY3NbMF0sZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aGlsZSAoYWNjcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjYyA9IGFjY3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBiZWFuLmZpcmUoc2VsZiwncHJvZ3Jlc3MnLFsxMDAgKiAoKHRvdGFsIC0gYWNjcy5sZW5ndGgpIC8gdG90YWwpLCB0b3RhbCAtIGFjY3MubGVuZ3RoLCB0b3RhbF0pO1xuICAgICAgICAgICAgICAgIGluc2VydGVyLmFnaSA9IGFjYztcbiAgICAgICAgICAgICAgICBpbnNlcnRlci5fZGF0YVJlY2VpdmVkKGRhdGFzZXRbYWNjXSk7XG4gICAgICAgICAgICAgICAgaWYgKGFjY3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmV0cmlldmUgPSByZXRyaWV2ZTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnMoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgZXJyICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlYW4uZmlyZShzZWxmLCdyZWFkeScsW2RhdGFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVhbi5maXJlKHNlbGYsJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuXG59O1xuXG5Vc2VyZGF0YVJlYWRlci5kYXRhc2V0cyA9IGZ1bmN0aW9uKGNiYWNrLGRvbmUpIHtcbiAgICBDYWNoaW5nU2VydmljZS5GaW5kQ2FjaGVkU2VydmljZSh0aGlzLGZ1bmN0aW9uKHNlcnZpY2VzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlcnZpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNlcnZpY2VzW2ldLnJlcGxhY2UoL1VzZXJkYXRhUmVhZGVyLi8sJycpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmZvckVhY2gpIHtcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKGNiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVc2VyZGF0YVJlYWRlcjsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBSEE7QUFPQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../gator/js/lib/UserdataReader.js\n')},"./js/SeqViewer.js":
/*!*************************!*\
  !*** ./js/SeqViewer.js ***!
  \*************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gator */ \"./js/gator.js\");\n/* harmony import */ var mascp_jstools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mascp-jstools */ \"../gator/js/index.js\");\n\n\n\nconst retrieve_uniprot = function retrieve_uniprot(uniprot) {\n  return mascp_jstools__WEBPACK_IMPORTED_MODULE_1__[\"default\"].GatorDataReader.authenticate().then(function (url_base) {\n    let a_reader = new mascp_jstools__WEBPACK_IMPORTED_MODULE_1__[\"default\"].UniprotReader();\n    return new Promise((resolve, reject) => {\n      a_reader.retrieve(uniprot, function (err) {\n        resolve(this.result._raw_data.data[0]);\n      });\n    });\n  });\n};\n\nconst session_ready = new Promise((resolve, reject) => {\n  if (HTMLWidgets.shinyMode) {\n    $(document).on('shiny:sessioninitialized', resolve);\n  } else {\n    reject();\n  }\n});\n\nconst notify_sequence = function notify_sequence(el, seq) {\n  if (HTMLWidgets.shinyMode) {\n    let el_id = el.getAttribute('id');\n    Shiny.setInputValue(\"sequenceChange_\".concat(el_id), seq, {\n      priority: \"event\"\n    });\n  }\n};\n\nconst set_sequence = function set_sequence(el, uniprot) {\n  return retrieve_uniprot(uniprot).then(seq => {\n    let viewer = el.querySelector('x-protviewer');\n    viewer.uniprot = uniprot;\n    return new Promise(resolve => {\n      let resolver = () => {\n        viewer.renderer.unbind('sequenceChange', resolver);\n        viewer.refreshTracks();\n        viewer.fitToZoom();\n\n        for (let track of viewer.querySelectorAll('x-gatortrack')) {\n          track.setAttribute('scale', uniprot);\n        }\n\n        session_ready.then(() => {\n          notify_sequence(el, seq);\n        });\n        resolve();\n      };\n\n      viewer.renderer.bind('sequenceChange', resolver);\n      viewer.renderer.setSequence(seq);\n    });\n  });\n};\n\nconst tmpl = document.createElement('template');\ntmpl.innerHTML = \"\\n<x-protviewer id=\\\"protview\\\" interactive>\\n    <x-gatortrack name=\\\"domains\\\" fullname=\\\"Domains\\\" scale=\\\"uniprot\\\" ></x-gatortrack>\\n    <x-gatortrack name=\\\"ptms\\\" fullname=\\\"PTMS\\\" scale=\\\"uniprot\\\" ></x-gatortrack>\\n    <x-gatortrack name=\\\"data\\\" fullname=\\\"Data\\\" scale=\\\"uniprot\\\" ></x-gatortrack>\\n</x-protviewer>\\n<x-trackrenderer track=\\\"domains\\\" renderer=\\\"protview\\\"></x-trackrenderer>\\n<x-trackrenderer track=\\\"ptms\\\" renderer=\\\"protview\\\"></x-trackrenderer>\\n<x-trackrenderer track=\\\"data\\\" renderer=\\\"protview\\\"></x-trackrenderer>\\n\";\n\nconst render_domains = (el, value) => {\n  return Object(_gator__WEBPACK_IMPORTED_MODULE_0__[\"getData\"])('glycodomain', value).then(dat => {\n    el.querySelector('x-trackrenderer[track=\"domains\"]').data = dat._raw_data.data;\n  });\n};\n\nconst render_ptm_data = (el, value) => {\n  return Object(_gator__WEBPACK_IMPORTED_MODULE_0__[\"getData\"])('combined', value).then(dat => {\n    el.querySelector('x-trackrenderer[track=\"ptms\"]').data = dat._raw_data.data;\n  });\n};\n\nconst pan_listener = function pan_listener(viewer) {\n  console.log('Pan listener', viewer);\n  let el_id = viewer.parentNode.getAttribute('id');\n  let leftvis = viewer.renderer.leftVisibleResidue();\n  let rightvis = viewer.renderer.rightVisibleResidue();\n\n  if (HTMLWidgets.shinyMode) {\n    Shiny.setInputValue('pan_${el_id}', {\n      left: leftvis,\n      right: rightvis\n    }, {\n      priority: \"event\"\n    });\n  } // Send message back to R\n\n};\n\nconst enable_pan_listener = function enable_pan_listener(viewer) {\n  let listener = pan_listener.bind(null, viewer);\n  viewer.addEventListener('pandone', listener);\n  viewer.renderer.bind('zoomChange', listener);\n  return listener;\n};\n\nconst METHODS = {\n  setUniprot: (el, params) => {\n    let value_uc = params.uniprot.toUpperCase();\n    return set_sequence(el, value_uc).then(() => {\n      render_domains(el, value_uc);\n      render_ptm_data(el, value_uc);\n    });\n  },\n  showRange: (el, params) => {\n    let viewer = el.querySelector('x-protviewer');\n\n    if (!viewer.renderer.sequence) {\n      return;\n    }\n\n    viewer.removeEventListener('pandone', viewer.pan_listener);\n    viewer.renderer.unbind('zoomChange', viewer.pan_listener);\n    el.querySelector('x-protviewer').renderer.showResidues(params.min, params.max).then(() => {\n      viewer.pan_listener = enable_pan_listener(viewer);\n    });\n  },\n  addTrack: (el, params) => {\n    let datapoints = HTMLWidgets.dataframeToD3(params.dataframe);\n\n    if (params.track) {\n      datapoints.forEach(point => point.track = params.track);\n    } else {\n      params.track = 'data';\n    }\n\n    el.querySelector(\"x-trackrenderer[track=\\\"\".concat(params.track, \"\\\"]\")).data = datapoints;\n  }\n};\nHTMLWidgets.widget({\n  name: 'SeqViewer',\n  type: 'output',\n  factory: function factory(el, width, height) {\n    let viewer = null;\n    return {\n      renderValue: function renderValue(input) {\n        if (!viewer) {\n          let new_viewer = tmpl.content.cloneNode(true);\n          el.appendChild(new_viewer);\n          viewer = el.getElementsByTagName('x-protviewer').protview;\n          viewer.setAttribute('id', 'protviewer-' + el.getAttribute('id'));\n\n          for (let renderer of el.querySelectorAll('x-trackrenderer')) {\n            renderer.setAttribute('renderer', 'protviewer-' + el.getAttribute('id'));\n          }\n        }\n\n        let params = input.message;\n\n        if (params.interactive) {\n          viewer.setAttribute('interactive', '');\n          viewer.removeAttribute('selecting');\n        } else {\n          viewer.removeAttribute('interactive');\n        }\n\n        if (!params.ptms) {\n          let ptm_track = el.querySelector('x-gatortrack[name=\"ptms\"]');\n          ptm_track.parentNode.removeChild(ptm_track);\n        }\n\n        if (!params.domains) {\n          let domain_track = el.querySelector('x-gatortrack[name=\"domains\"]');\n          domain_track.parentNode.removeChild(domain_track);\n        } // https://github.com/ramnathv/htmlwidgets/issues/71\n\n\n        el.querySelector('x-trackrenderer[track=\"domains\"]').setAttribute('src', HTMLWidgets.getAttachmentUrl('renderers', 'glycodomain.packed'));\n        el.querySelector('x-trackrenderer[track=\"ptms\"]').setAttribute('src', HTMLWidgets.getAttachmentUrl('renderers', 'msdata.packed'));\n        el.querySelector('x-trackrenderer[track=\"data\"]').setAttribute('src', HTMLWidgets.getAttachmentUrl('renderers', 'customdata.packed'));\n\n        if (HTMLWidgets.shinyMode) {\n          for (let method of Object.keys(METHODS)) {\n            Shiny.addCustomMessageHandler(\"seqviewer:\".concat(method), message => {\n              var el = document.getElementById(message.id);\n\n              if (el) {\n                METHODS[method](el, message);\n              }\n            });\n          }\n\n          viewer.pan_listener = enable_pan_listener(viewer);\n        }\n\n        let seqset = Promise.resolve();\n\n        if (params.uniprot) {\n          seqset = METHODS['setUniprot'](el, params);\n        }\n\n        if (params.dataframe) {\n          seqset.then(() => METHODS['addTrack'](el, params));\n        }\n\n        if (input.api) {\n          input.api.map(message => {\n            message.method = message.method.split(':')[1];\n            return message;\n          }).sort((a, b) => {\n            if (a.method == 'setUniprot') {\n              return -1;\n            }\n\n            return 1;\n          }).forEach(message => {\n            if (message.method == 'setUniprot') {\n              seqset = seqset.then(() => {\n                return METHODS[message.method](el, message);\n              });\n            } else {\n              seqset.then(() => METHODS[message.method](el, message));\n            }\n          });\n        }\n      },\n      resize: function resize(width, height) {// TODO: code to re-render the widget with a new size\n      }\n    };\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9TZXFWaWV3ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9TZXFWaWV3ZXIuanM/YjJkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREYXRhIH0gZnJvbSAnLi9nYXRvcic7XG5cbmltcG9ydCBNQVNDUCBmcm9tICdtYXNjcC1qc3Rvb2xzJztcblxuY29uc3QgcmV0cmlldmVfdW5pcHJvdCA9IGZ1bmN0aW9uKHVuaXByb3QpIHtcbiAgcmV0dXJuIE1BU0NQLkdhdG9yRGF0YVJlYWRlci5hdXRoZW50aWNhdGUoKS50aGVuKGZ1bmN0aW9uKHVybF9iYXNlKSB7XG4gICAgbGV0IGFfcmVhZGVyID0gbmV3IE1BU0NQLlVuaXByb3RSZWFkZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KSA9PiB7XG4gICAgYV9yZWFkZXIucmV0cmlldmUodW5pcHJvdCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICByZXNvbHZlKHRoaXMucmVzdWx0Ll9yYXdfZGF0YS5kYXRhWzBdKTtcbiAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZXNzaW9uX3JlYWR5ID0gbmV3IFByb21pc2UoIChyZXNvbHZlLHJlamVjdCkgPT4ge1xuICBpZiAoSFRNTFdpZGdldHMuc2hpbnlNb2RlKSB7XG4gICAgJChkb2N1bWVudCkub24oJ3NoaW55OnNlc3Npb25pbml0aWFsaXplZCcsIHJlc29sdmUpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdCgpO1xuICB9XG59KTtcblxuY29uc3Qgbm90aWZ5X3NlcXVlbmNlID0gZnVuY3Rpb24oZWwsc2VxKSB7XG4gIGlmIChIVE1MV2lkZ2V0cy5zaGlueU1vZGUpIHtcbiAgICBsZXQgZWxfaWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgU2hpbnkuc2V0SW5wdXRWYWx1ZShgc2VxdWVuY2VDaGFuZ2VfJHtlbF9pZH1gLHNlcSwgeyBwcmlvcml0eTogXCJldmVudFwifSk7XG4gIH1cbn07XG5cbmNvbnN0IHNldF9zZXF1ZW5jZSA9IGZ1bmN0aW9uKGVsLHVuaXByb3QpIHtcbiAgcmV0dXJuIHJldHJpZXZlX3VuaXByb3QodW5pcHJvdCkudGhlbiAoc2VxID0+IHtcbiAgICBsZXQgdmlld2VyID0gZWwucXVlcnlTZWxlY3RvcigneC1wcm90dmlld2VyJyk7XG4gICAgdmlld2VyLnVuaXByb3QgPSB1bmlwcm90O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiB7XG4gICAgICBsZXQgcmVzb2x2ZXIgPSAoKSA9PiB7XG4gICAgICAgIHZpZXdlci5yZW5kZXJlci51bmJpbmQoJ3NlcXVlbmNlQ2hhbmdlJyxyZXNvbHZlcik7XG4gICAgICAgIHZpZXdlci5yZWZyZXNoVHJhY2tzKCk7XG4gICAgICAgIHZpZXdlci5maXRUb1pvb20oKTtcbiAgICAgICAgZm9yIChsZXQgdHJhY2sgb2Ygdmlld2VyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3gtZ2F0b3J0cmFjaycpKSB7XG4gICAgICAgICAgdHJhY2suc2V0QXR0cmlidXRlKCdzY2FsZScsdW5pcHJvdCk7XG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvbl9yZWFkeS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgbm90aWZ5X3NlcXVlbmNlKGVsLHNlcSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdmlld2VyLnJlbmRlcmVyLmJpbmQoJ3NlcXVlbmNlQ2hhbmdlJyxyZXNvbHZlcik7XG4gICAgICB2aWV3ZXIucmVuZGVyZXIuc2V0U2VxdWVuY2Uoc2VxKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5cblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cbnRtcGwuaW5uZXJIVE1MID0gYFxuPHgtcHJvdHZpZXdlciBpZD1cInByb3R2aWV3XCIgaW50ZXJhY3RpdmU+XG4gICAgPHgtZ2F0b3J0cmFjayBuYW1lPVwiZG9tYWluc1wiIGZ1bGxuYW1lPVwiRG9tYWluc1wiIHNjYWxlPVwidW5pcHJvdFwiID48L3gtZ2F0b3J0cmFjaz5cbiAgICA8eC1nYXRvcnRyYWNrIG5hbWU9XCJwdG1zXCIgZnVsbG5hbWU9XCJQVE1TXCIgc2NhbGU9XCJ1bmlwcm90XCIgPjwveC1nYXRvcnRyYWNrPlxuICAgIDx4LWdhdG9ydHJhY2sgbmFtZT1cImRhdGFcIiBmdWxsbmFtZT1cIkRhdGFcIiBzY2FsZT1cInVuaXByb3RcIiA+PC94LWdhdG9ydHJhY2s+XG48L3gtcHJvdHZpZXdlcj5cbjx4LXRyYWNrcmVuZGVyZXIgdHJhY2s9XCJkb21haW5zXCIgcmVuZGVyZXI9XCJwcm90dmlld1wiPjwveC10cmFja3JlbmRlcmVyPlxuPHgtdHJhY2tyZW5kZXJlciB0cmFjaz1cInB0bXNcIiByZW5kZXJlcj1cInByb3R2aWV3XCI+PC94LXRyYWNrcmVuZGVyZXI+XG48eC10cmFja3JlbmRlcmVyIHRyYWNrPVwiZGF0YVwiIHJlbmRlcmVyPVwicHJvdHZpZXdcIj48L3gtdHJhY2tyZW5kZXJlcj5cbmA7XG5cbmNvbnN0IHJlbmRlcl9kb21haW5zID0gKGVsLHZhbHVlKSA9PiB7XG4gIHJldHVybiBnZXREYXRhKCdnbHljb2RvbWFpbicsdmFsdWUpLnRoZW4oIGRhdCA9PiB7XG4gICAgZWwucXVlcnlTZWxlY3RvcigneC10cmFja3JlbmRlcmVyW3RyYWNrPVwiZG9tYWluc1wiXScpLmRhdGEgPSBkYXQuX3Jhd19kYXRhLmRhdGE7XG4gIH0pO1xufTtcblxuY29uc3QgcmVuZGVyX3B0bV9kYXRhID0gKGVsLHZhbHVlKSA9PiB7XG4gIHJldHVybiBnZXREYXRhKCdjb21iaW5lZCcsdmFsdWUpLnRoZW4oIGRhdCA9PiB7XG4gICAgZWwucXVlcnlTZWxlY3RvcigneC10cmFja3JlbmRlcmVyW3RyYWNrPVwicHRtc1wiXScpLmRhdGEgPSBkYXQuX3Jhd19kYXRhLmRhdGE7XG4gIH0pO1xufTtcblxuXG5cbmNvbnN0IHBhbl9saXN0ZW5lciA9IGZ1bmN0aW9uKHZpZXdlcikge1xuICBjb25zb2xlLmxvZygnUGFuIGxpc3RlbmVyJyx2aWV3ZXIpO1xuICBsZXQgZWxfaWQgPSB2aWV3ZXIucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gIGxldCBsZWZ0dmlzID0gdmlld2VyLnJlbmRlcmVyLmxlZnRWaXNpYmxlUmVzaWR1ZSgpO1xuICBsZXQgcmlnaHR2aXMgPSB2aWV3ZXIucmVuZGVyZXIucmlnaHRWaXNpYmxlUmVzaWR1ZSgpO1xuICBpZiAoSFRNTFdpZGdldHMuc2hpbnlNb2RlKSB7XG4gICAgU2hpbnkuc2V0SW5wdXRWYWx1ZSgncGFuXyR7ZWxfaWR9Jyx7IGxlZnQ6IGxlZnR2aXMsIHJpZ2h0OiByaWdodHZpcyAgfSwgeyBwcmlvcml0eTogXCJldmVudFwifSk7XG4gIH1cbiAgLy8gU2VuZCBtZXNzYWdlIGJhY2sgdG8gUlxufTtcblxuY29uc3QgZW5hYmxlX3Bhbl9saXN0ZW5lciA9IGZ1bmN0aW9uKHZpZXdlcil7XG4gIGxldCBsaXN0ZW5lciA9IHBhbl9saXN0ZW5lci5iaW5kKG51bGwsdmlld2VyKTtcbiAgdmlld2VyLmFkZEV2ZW50TGlzdGVuZXIoJ3BhbmRvbmUnLGxpc3RlbmVyKTtcbiAgdmlld2VyLnJlbmRlcmVyLmJpbmQoJ3pvb21DaGFuZ2UnLGxpc3RlbmVyKTtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufTtcblxuXG5jb25zdCBNRVRIT0RTID0ge1xuICBzZXRVbmlwcm90OiAoZWwscGFyYW1zKSA9PiB7XG4gICAgbGV0IHZhbHVlX3VjID0gcGFyYW1zLnVuaXByb3QudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gc2V0X3NlcXVlbmNlKGVsLHZhbHVlX3VjKS50aGVuKCAoKSA9PiB7XG4gICAgICByZW5kZXJfZG9tYWlucyhlbCx2YWx1ZV91Yyk7XG4gICAgICByZW5kZXJfcHRtX2RhdGEoZWwsdmFsdWVfdWMpO1xuICAgIH0pO1xuICB9LFxuICBzaG93UmFuZ2U6IChlbCxwYXJhbXMpID0+IHtcbiAgICBsZXQgdmlld2VyID0gZWwucXVlcnlTZWxlY3RvcigneC1wcm90dmlld2VyJyk7XG4gICAgaWYgKCAhIHZpZXdlci5yZW5kZXJlci5zZXF1ZW5jZSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmlld2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BhbmRvbmUnLHZpZXdlci5wYW5fbGlzdGVuZXIpO1xuICAgIHZpZXdlci5yZW5kZXJlci51bmJpbmQoJ3pvb21DaGFuZ2UnLHZpZXdlci5wYW5fbGlzdGVuZXIpO1xuICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJ3gtcHJvdHZpZXdlcicpLnJlbmRlcmVyLnNob3dSZXNpZHVlcyhwYXJhbXMubWluLHBhcmFtcy5tYXgpXG4gICAgLnRoZW4oICgpID0+IHtcbiAgICAgIHZpZXdlci5wYW5fbGlzdGVuZXIgPSBlbmFibGVfcGFuX2xpc3RlbmVyKHZpZXdlcik7XG4gICAgfSlcbiAgfSxcbiAgYWRkVHJhY2s6IChlbCxwYXJhbXMpID0+IHtcbiAgICBsZXQgZGF0YXBvaW50cyA9IEhUTUxXaWRnZXRzLmRhdGFmcmFtZVRvRDMocGFyYW1zLmRhdGFmcmFtZSk7XG4gICAgaWYgKHBhcmFtcy50cmFjaykge1xuICAgICAgZGF0YXBvaW50cy5mb3JFYWNoKCBwb2ludCA9PiBwb2ludC50cmFjayA9IHBhcmFtcy50cmFjayApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMudHJhY2sgPSAnZGF0YSc7XG4gICAgfVxuICAgIGVsLnF1ZXJ5U2VsZWN0b3IoYHgtdHJhY2tyZW5kZXJlclt0cmFjaz1cIiR7cGFyYW1zLnRyYWNrfVwiXWApLmRhdGEgPSBkYXRhcG9pbnRzO1xuICB9XG59O1xuXG5cbkhUTUxXaWRnZXRzLndpZGdldCh7XG5cbiAgbmFtZTogJ1NlcVZpZXdlcicsXG5cbiAgdHlwZTogJ291dHB1dCcsXG5cbiAgZmFjdG9yeTogZnVuY3Rpb24oZWwsIHdpZHRoLCBoZWlnaHQpIHtcblxuICAgIGxldCB2aWV3ZXIgPSBudWxsO1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgcmVuZGVyVmFsdWU6IGZ1bmN0aW9uKGlucHV0KSB7XG5cbiAgICAgICAgaWYgKCAhIHZpZXdlciApIHtcbiAgICAgICAgICBsZXQgbmV3X3ZpZXdlciA9IHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgZWwuYXBwZW5kQ2hpbGQobmV3X3ZpZXdlcik7XG4gICAgICAgICAgdmlld2VyID0gZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3gtcHJvdHZpZXdlcicpLnByb3R2aWV3O1xuICAgICAgICAgIHZpZXdlci5zZXRBdHRyaWJ1dGUoJ2lkJywncHJvdHZpZXdlci0nK2VsLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgICAgZm9yIChsZXQgcmVuZGVyZXIgb2YgZWwucXVlcnlTZWxlY3RvckFsbCgneC10cmFja3JlbmRlcmVyJykpIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldEF0dHJpYnV0ZSgncmVuZGVyZXInLCdwcm90dmlld2VyLScrZWwuZ2V0QXR0cmlidXRlKCdpZCcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGFyYW1zID0gaW5wdXQubWVzc2FnZTtcblxuICAgICAgICBpZiAocGFyYW1zLmludGVyYWN0aXZlKSB7XG4gICAgICAgICAgdmlld2VyLnNldEF0dHJpYnV0ZSgnaW50ZXJhY3RpdmUnLCcnKTtcbiAgICAgICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RpbmcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3ZXIucmVtb3ZlQXR0cmlidXRlKCdpbnRlcmFjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhIHBhcmFtcy5wdG1zICkge1xuICAgICAgICAgIGxldCBwdG1fdHJhY2sgPSBlbC5xdWVyeVNlbGVjdG9yKCd4LWdhdG9ydHJhY2tbbmFtZT1cInB0bXNcIl0nKTtcbiAgICAgICAgICBwdG1fdHJhY2sucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwdG1fdHJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhIHBhcmFtcy5kb21haW5zICkge1xuICAgICAgICAgIGxldCBkb21haW5fdHJhY2sgPSBlbC5xdWVyeVNlbGVjdG9yKCd4LWdhdG9ydHJhY2tbbmFtZT1cImRvbWFpbnNcIl0nKTtcbiAgICAgICAgICBkb21haW5fdHJhY2sucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkb21haW5fdHJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JhbW5hdGh2L2h0bWx3aWRnZXRzL2lzc3Vlcy83MVxuXG4gICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJ3gtdHJhY2tyZW5kZXJlclt0cmFjaz1cImRvbWFpbnNcIl0nKS5zZXRBdHRyaWJ1dGUoJ3NyYycsSFRNTFdpZGdldHMuZ2V0QXR0YWNobWVudFVybCgncmVuZGVyZXJzJywgJ2dseWNvZG9tYWluLnBhY2tlZCcpKTtcbiAgICAgICAgZWwucXVlcnlTZWxlY3RvcigneC10cmFja3JlbmRlcmVyW3RyYWNrPVwicHRtc1wiXScpLnNldEF0dHJpYnV0ZSgnc3JjJyxIVE1MV2lkZ2V0cy5nZXRBdHRhY2htZW50VXJsKCdyZW5kZXJlcnMnLCAnbXNkYXRhLnBhY2tlZCcpKTtcbiAgICAgICAgZWwucXVlcnlTZWxlY3RvcigneC10cmFja3JlbmRlcmVyW3RyYWNrPVwiZGF0YVwiXScpLnNldEF0dHJpYnV0ZSgnc3JjJyxIVE1MV2lkZ2V0cy5nZXRBdHRhY2htZW50VXJsKCdyZW5kZXJlcnMnLCAnY3VzdG9tZGF0YS5wYWNrZWQnKSk7XG5cbiAgICAgICAgaWYgKEhUTUxXaWRnZXRzLnNoaW55TW9kZSkge1xuICAgICAgICAgIGZvciAobGV0IG1ldGhvZCBvZiBPYmplY3Qua2V5cyhNRVRIT0RTKSkge1xuICAgICAgICAgICAgU2hpbnkuYWRkQ3VzdG9tTWVzc2FnZUhhbmRsZXIoYHNlcXZpZXdlcjoke21ldGhvZH1gLCBtZXNzYWdlID0+IHtcbiAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWVzc2FnZS5pZCk7XG4gICAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgIE1FVEhPRFNbbWV0aG9kXShlbCxtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmlld2VyLnBhbl9saXN0ZW5lciA9IGVuYWJsZV9wYW5fbGlzdGVuZXIodmlld2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzZXFzZXQgPSBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgICAgICBpZiAocGFyYW1zLnVuaXByb3QpIHtcbiAgICAgICAgICBzZXFzZXQgPSBNRVRIT0RTWydzZXRVbmlwcm90J10oZWwscGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMuZGF0YWZyYW1lKSB7XG4gICAgICAgICAgc2Vxc2V0LnRoZW4oICgpID0+IE1FVEhPRFNbJ2FkZFRyYWNrJ10oZWwscGFyYW1zKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQuYXBpKSB7XG4gICAgICAgICAgaW5wdXQuYXBpLm1hcChtZXNzYWdlID0+IHtcbiAgICAgICAgICAgIG1lc3NhZ2UubWV0aG9kID0gbWVzc2FnZS5tZXRob2Quc3BsaXQoJzonKVsxXTtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgIH0pLnNvcnQoIChhLGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhLm1ldGhvZCA9PSAnc2V0VW5pcHJvdCcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfSkuZm9yRWFjaCggbWVzc2FnZSA9PiB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tZXRob2QgPT0gJ3NldFVuaXByb3QnKSB7XG4gICAgICAgICAgICAgIHNlcXNldCA9IHNlcXNldC50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1FVEhPRFNbbWVzc2FnZS5tZXRob2RdKGVsLG1lc3NhZ2UpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXFzZXQudGhlbiggKCkgPT4gTUVUSE9EU1ttZXNzYWdlLm1ldGhvZF0oZWwsbWVzc2FnZSkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgfSxcblxuICAgICAgcmVzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG5cbiAgICAgICAgLy8gVE9ETzogY29kZSB0byByZS1yZW5kZXIgdGhlIHdpZGdldCB3aXRoIGEgbmV3IHNpemVcblxuICAgICAgfVxuXG4gICAgfTtcbiAgfVxufSk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBNUJBO0FBZ0NBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBSUE7QUF4RkE7QUEyRkE7QUFyR0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/SeqViewer.js\n")},"./js/gator.js":
/*!*********************!*\
  !*** ./js/gator.js ***!
  \*********************/
/*! exports provided: getMetadata, getData, getExpression */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMetadata", function() { return getMetadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getData", function() { return getData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getExpression", function() { return getExpression; });\n/* harmony import */ var mascp_jstools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mascp-jstools */ "../gator/js/index.js");\n\nmascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GatorDataReader.anonymous = true;\nmascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GatorDataReader.server = \'https://glycodomain.glycomics.ku.dk\';\nmascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].AUTH0_CLIENT_ID = \'fNED1UGvPaP0XlrcEvWsHXIODIKy6WVB\';\nmascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GATOR_CLIENT_ID = mascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].AUTH0_CLIENT_ID;\n\nlet getData = function getData(dataset, accession) {\n  return mascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GatorDataReader.authenticate().then(function (url_base) {\n    let a_reader = mascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GatorDataReader.createReader(dataset);\n    a_reader.datasetname = dataset;\n    return new Promise((resolve, reject) => {\n      a_reader.retrieve(accession, function (err) {\n        resolve(this.result);\n      });\n    });\n  });\n};\n\nlet getMetadata = function getMetadata(dataset) {\n  return mascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GatorDataReader.authenticate().then(function (url_base) {\n    let headers = new Headers();\n    headers.append(\'Authorization\', \'Bearer \' + mascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GATOR_AUTH_TOKEN);\n    headers.append(\'x-api-key\', mascp_jstools__WEBPACK_IMPORTED_MODULE_0__["default"].GATOR_CLIENT_ID);\n    let req_params = {\n      method: \'GET\',\n      headers: headers\n    };\n    let req = new Request("".concat(url_base, "/metadata/").concat(dataset), req_params);\n    return fetch(req).then(resp => resp.json());\n  });\n};\n\nlet hydrate_expression = (metadata, dat) => {\n  let values = dat._raw_data.data;\n  let locations = metadata.locations;\n  locations.forEach((loc, idx) => loc.expression = values[idx]);\n  return locations;\n};\n\nlet getExpression = (dataset, geneid) => {\n  return getMetadata(dataset).then(meta => {\n    return getData(dataset, geneid).then(hydrate_expression.bind(null, meta));\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9nYXRvci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL2dhdG9yLmpzPzMzYzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1BU0NQIGZyb20gJ21hc2NwLWpzdG9vbHMnO1xuXG5NQVNDUC5HYXRvckRhdGFSZWFkZXIuYW5vbnltb3VzID0gdHJ1ZTtcblxuTUFTQ1AuR2F0b3JEYXRhUmVhZGVyLnNlcnZlciA9ICdodHRwczovL2dseWNvZG9tYWluLmdseWNvbWljcy5rdS5kayc7XG5cbk1BU0NQLkFVVEgwX0NMSUVOVF9JRD0nZk5FRDFVR3ZQYVAwWGxyY0V2V3NIWElPRElLeTZXVkInO1xuTUFTQ1AuR0FUT1JfQ0xJRU5UX0lEPU1BU0NQLkFVVEgwX0NMSUVOVF9JRDtcblxubGV0IGdldERhdGEgPSBmdW5jdGlvbihkYXRhc2V0LGFjY2Vzc2lvbikge1xuICByZXR1cm4gTUFTQ1AuR2F0b3JEYXRhUmVhZGVyLmF1dGhlbnRpY2F0ZSgpLnRoZW4oZnVuY3Rpb24odXJsX2Jhc2UpIHtcbiAgICBsZXQgYV9yZWFkZXIgPSBNQVNDUC5HYXRvckRhdGFSZWFkZXIuY3JlYXRlUmVhZGVyKGRhdGFzZXQpO1xuICAgIGFfcmVhZGVyLmRhdGFzZXRuYW1lID0gZGF0YXNldDtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KSA9PiB7XG4gICAgICBhX3JlYWRlci5yZXRyaWV2ZShhY2Nlc3Npb24sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICByZXNvbHZlKHRoaXMucmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmxldCBnZXRNZXRhZGF0YSA9IGZ1bmN0aW9uKGRhdGFzZXQpIHtcbiAgcmV0dXJuIE1BU0NQLkdhdG9yRGF0YVJlYWRlci5hdXRoZW50aWNhdGUoKS50aGVuKGZ1bmN0aW9uKHVybF9iYXNlKSB7XG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgIGhlYWRlcnMuYXBwZW5kKCdBdXRob3JpemF0aW9uJywnQmVhcmVyICcrTUFTQ1AuR0FUT1JfQVVUSF9UT0tFTik7XG4gICAgaGVhZGVycy5hcHBlbmQoJ3gtYXBpLWtleScsTUFTQ1AuR0FUT1JfQ0xJRU5UX0lEKTtcbiAgICBsZXQgcmVxX3BhcmFtcyA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzXG4gICAgfTtcbiAgICBsZXQgcmVxID0gbmV3IFJlcXVlc3QoYCR7dXJsX2Jhc2V9L21ldGFkYXRhLyR7ZGF0YXNldH1gLCByZXFfcGFyYW1zKTtcbiAgICByZXR1cm4gZmV0Y2gocmVxKS50aGVuKCByZXNwID0+IHJlc3AuanNvbigpKTtcbiAgfSk7XG59O1xuXG5sZXQgaHlkcmF0ZV9leHByZXNzaW9uID0gKG1ldGFkYXRhLGRhdCkgPT4ge1xuICBsZXQgdmFsdWVzID0gZGF0Ll9yYXdfZGF0YS5kYXRhO1xuICBsZXQgbG9jYXRpb25zID0gbWV0YWRhdGEubG9jYXRpb25zO1xuICBsb2NhdGlvbnMuZm9yRWFjaCggKGxvYyxpZHgpID0+IGxvYy5leHByZXNzaW9uID0gdmFsdWVzW2lkeF0gKTtcbiAgcmV0dXJuIGxvY2F0aW9ucztcbn1cblxubGV0IGdldEV4cHJlc3Npb24gPSAoZGF0YXNldCxnZW5laWQpID0+IHtcbiAgcmV0dXJuIGdldE1ldGFkYXRhKGRhdGFzZXQpLnRoZW4oIG1ldGEgPT4ge1xuICAgIHJldHVybiBnZXREYXRhKGRhdGFzZXQsZ2VuZWlkKS50aGVuKCBoeWRyYXRlX2V4cHJlc3Npb24uYmluZChudWxsLG1ldGEpICk7XG4gIH0pO1xufVxuXG5cbmV4cG9ydCB7IGdldE1ldGFkYXRhLCBnZXREYXRhLCBnZXRFeHByZXNzaW9uIH07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/gator.js\n')},"./node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */function(module,exports){eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnJlZ2lzdHJ5Lm5wbWpzLm9yZy93ZWJwYWNrLzQuMjkuNi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzPzAwODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/amd-options.js\n")},"./node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */function(module,exports){eval('module.exports = function (originalModule) {\n  if (!originalModule.webpackPolyfill) {\n    var module = Object.create(originalModule); // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, "loaded", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, "id", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    Object.defineProperty(module, "exports", {\n      enumerable: true\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnJlZ2lzdHJ5Lm5wbWpzLm9yZy93ZWJwYWNrLzQuMjkuNi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzPzgyYjAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/.registry.npmjs.org/webpack/4.29.6/node_modules/webpack/buildin/harmony-module.js\n')},0:
/*!*******************************!*\
  !*** multi ./js/SeqViewer.js ***!
  \*******************************/
/*! no static exports found */function(g,I,C){g.exports=C(/*! ./js/SeqViewer.js */"./js/SeqViewer.js")}});